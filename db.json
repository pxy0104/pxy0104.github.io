{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/dog.jpg","path":"images/dog.jpg","modified":0,"renderable":0},{"_id":"source/img/0001.png","path":"img/0001.png","modified":0,"renderable":0},{"_id":"source/img/0002.png","path":"img/0002.png","modified":0,"renderable":0},{"_id":"source/img/0003.png","path":"img/0003.png","modified":0,"renderable":0},{"_id":"source/img/0004.png","path":"img/0004.png","modified":0,"renderable":0},{"_id":"source/img/0005.png","path":"img/0005.png","modified":0,"renderable":0},{"_id":"source/img/0006.png","path":"img/0006.png","modified":0,"renderable":0},{"_id":"source/img/0007.png","path":"img/0007.png","modified":0,"renderable":0},{"_id":"source/img/0008.png","path":"img/0008.png","modified":0,"renderable":0},{"_id":"source/img/0009.png","path":"img/0009.png","modified":0,"renderable":0},{"_id":"source/img/0010.png","path":"img/0010.png","modified":0,"renderable":0},{"_id":"source/img/0011.png","path":"img/0011.png","modified":0,"renderable":0},{"_id":"source/img/0012.png","path":"img/0012.png","modified":0,"renderable":0},{"_id":"source/img/0013.png","path":"img/0013.png","modified":0,"renderable":0},{"_id":"source/img/0014.png","path":"img/0014.png","modified":0,"renderable":0},{"_id":"source/img/0015.png","path":"img/0015.png","modified":0,"renderable":0},{"_id":"source/img/0016.png","path":"img/0016.png","modified":0,"renderable":0},{"_id":"source/img/0017.png","path":"img/0017.png","modified":0,"renderable":0},{"_id":"source/img/0019.png","path":"img/0019.png","modified":0,"renderable":0},{"_id":"source/img/0018.png","path":"img/0018.png","modified":0,"renderable":0},{"_id":"source/img/0020.png","path":"img/0020.png","modified":0,"renderable":0},{"_id":"source/img/0021.png","path":"img/0021.png","modified":0,"renderable":0},{"_id":"source/img/0022.png","path":"img/0022.png","modified":0,"renderable":0},{"_id":"source/img/0023.png","path":"img/0023.png","modified":0,"renderable":0},{"_id":"source/img/0024.png","path":"img/0024.png","modified":0,"renderable":0},{"_id":"source/img/0025.png","path":"img/0025.png","modified":0,"renderable":0},{"_id":"source/img/0026.png","path":"img/0026.png","modified":0,"renderable":0},{"_id":"source/img/0028.jpg","path":"img/0028.jpg","modified":0,"renderable":0},{"_id":"source/img/0027.png","path":"img/0027.png","modified":0,"renderable":0},{"_id":"source/img/0029.jpg","path":"img/0029.jpg","modified":0,"renderable":0},{"_id":"source/img/0030.jpg","path":"img/0030.jpg","modified":0,"renderable":0},{"_id":"source/img/0032.png","path":"img/0032.png","modified":0,"renderable":0},{"_id":"source/img/0031.jpg","path":"img/0031.jpg","modified":0,"renderable":0},{"_id":"source/img/0033.png","path":"img/0033.png","modified":0,"renderable":0},{"_id":"source/img/0034.png","path":"img/0034.png","modified":0,"renderable":0},{"_id":"source/img/0035.png","path":"img/0035.png","modified":0,"renderable":0},{"_id":"source/img/0037.png","path":"img/0037.png","modified":0,"renderable":0},{"_id":"source/img/0036.png","path":"img/0036.png","modified":0,"renderable":0},{"_id":"source/img/0038.png","path":"img/0038.png","modified":0,"renderable":0},{"_id":"source/img/0039.png","path":"img/0039.png","modified":0,"renderable":0},{"_id":"source/img/0042.png","path":"img/0042.png","modified":0,"renderable":0},{"_id":"source/img/0040.png","path":"img/0040.png","modified":0,"renderable":0},{"_id":"source/img/0041.png","path":"img/0041.png","modified":0,"renderable":0},{"_id":"source/img/0043.png","path":"img/0043.png","modified":0,"renderable":0},{"_id":"source/img/0044.png","path":"img/0044.png","modified":0,"renderable":0},{"_id":"source/img/0046.png","path":"img/0046.png","modified":0,"renderable":0},{"_id":"source/img/0047.png","path":"img/0047.png","modified":0,"renderable":0},{"_id":"source/img/0048.png","path":"img/0048.png","modified":0,"renderable":0},{"_id":"source/img/0049.png","path":"img/0049.png","modified":0,"renderable":0},{"_id":"source/img/0050.png","path":"img/0050.png","modified":0,"renderable":0},{"_id":"source/img/0051.png","path":"img/0051.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/dog.jpg","path":"img/dog.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/dog1.png","path":"img/dog1.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/girl.jfif","path":"img/girl.jfif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/1111.png","path":"img/1111.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2023-05-06-56.md","hash":"def297253e625389e1b264fe599ed382118ac19a","modified":1683383966274},{"_id":"source/_posts/2023-05-05-hahaha.md","hash":"71dab384d102f05c715528ad4afe5374ff9982db","modified":1684042881441},{"_id":"source/_posts/2023-05-06-Netty04-优化与源码.md","hash":"a85c9f5fda9bfd5f2c735d80ba0fe68c6093a06b","modified":1683379682746},{"_id":"source/_posts/2023-05-06-hello.md","hash":"a2eec44674a1d642a471c295180d57005cbbe8a0","modified":1683371084943},{"_id":"source/_posts/2023-05-06-redis应用问题解决.md","hash":"dd3a75901f1f606c3f45b8ee784261a1d3ee171e","modified":1683368990422},{"_id":"source/_posts/hello-world.md","hash":"63b9651d17aa34659fc47db2c45eb50a446bee15","modified":1683371124274},{"_id":"source/about/index.md","hash":"57e56b58b9fae63f0262484a552c32d5b43dc702","modified":1684165848382},{"_id":"source/categories/index.md","hash":"1be552089d7cd7085c717ff7130688bb29acd77c","modified":1683369645276},{"_id":"source/tags/index.md","hash":"248d282c6efe8ef0333c30f48ed1fb2b62ab4237","modified":1683280513472},{"_id":"source/img/0003.png","hash":"f88160bfdfa7d18b6ec581832048bd115b350978","modified":1576467757524},{"_id":"source/img/0002.png","hash":"76e8ec4a329305df75e686e1499a1fcfef28a48b","modified":1576465397802},{"_id":"source/img/0004.png","hash":"56e8063afd3100cd71d02e5d643275ebf6182224","modified":1576468444467},{"_id":"source/img/0006.png","hash":"2edeec19dca4f2c7e443f407f16b4eabe6c7cb1f","modified":1580547899096},{"_id":"source/img/0007.png","hash":"1bf830cd4d9266f17885a0015dc507182869b24b","modified":1580548532607},{"_id":"source/img/0008.png","hash":"d23ea1f639c13ceea108f5bc6d03dcee6ba3ef81","modified":1580600424891},{"_id":"source/img/0009.png","hash":"245587e00e32a3c8f254622c78da8768dc1ea0ae","modified":1580602751536},{"_id":"source/img/0010.png","hash":"154b0fe38f17b0a3a2274678c46d904c81992e3b","modified":1580611912643},{"_id":"source/img/0012.png","hash":"db9a6ffaa093d18056fa703b100e31e8805d81df","modified":1580690587254},{"_id":"source/img/0011.png","hash":"3df876cc1b2484ddaccfbbb23b4560f95ba395e2","modified":1580689327536},{"_id":"source/img/0013.png","hash":"3189592e9908d11b786f59b2f43931f909e8abe5","modified":1580782624517},{"_id":"source/img/0019.png","hash":"55ade7c8191b0ec5e14f71fc0dc0301e14347cb7","modified":1582773953627},{"_id":"source/img/0021.png","hash":"5efb2e98c80b9e86dd3031259710c3700c37d27b","modified":1582789544096},{"_id":"source/img/0022.png","hash":"ed862f95d75a8b992465ab88f055dc3bd0e58662","modified":1582789882657},{"_id":"source/img/0020.png","hash":"4674c073279b7888edae9ab0a394d59d2a539aa8","modified":1582774177522},{"_id":"source/img/0018.png","hash":"63d721d63500789ee8909cd0ee04adeb6c6b8974","modified":1582773856623},{"_id":"source/img/0026.png","hash":"92e1a42c25cab686d9015c192298bf76f6dd71cb","modified":1582939249814},{"_id":"source/img/0023.png","hash":"df92b9c5eea09bdd395912342c2f79661addb92c","modified":1582888604899},{"_id":"source/img/0025.png","hash":"13e61cd02557c8d157ab089dbe0a9ac308b3e06a","modified":1582938452076},{"_id":"source/img/0024.png","hash":"b22abaded76964b91b4a56b575c38adde7d29f01","modified":1582936752600},{"_id":"source/img/0027.png","hash":"933392922d2d7cc72a2af6f48e2cf98e68d18e4f","modified":1582939749190},{"_id":"source/img/0033.png","hash":"4356ac6e209098902474dcd055f77ef673f4ff85","modified":1588812634143},{"_id":"source/img/0034.png","hash":"cfc68a88844e120e29e31195accfea6daafcefae","modified":1588901119971},{"_id":"source/img/0037.png","hash":"6bfdffeccd1c2b2a2d7f4d1f2c5bcaaa70d9a021","modified":1588901161667},{"_id":"source/img/0035.png","hash":"feca8a338df0a24ce109bdc27c229f0becaa2f02","modified":1588901138282},{"_id":"source/img/0036.png","hash":"5718d91d2234e8ea26125e32a2c34c530f130884","modified":1588901149600},{"_id":"source/img/0038.png","hash":"11cd3ffc851b57396a3aed27d6b25d8f1c82199f","modified":1588901301427},{"_id":"source/img/0039.png","hash":"9f37a4dbd61027d9ee191bd2e5b7d0573776be42","modified":1588901314785},{"_id":"source/img/0042.png","hash":"b2c47cb1d4ea434e2aff96799d63792cec924d81","modified":1588932460871},{"_id":"source/img/0041.png","hash":"6002118331cbaa548ce8f5f9240444888c5bcbaa","modified":1588932341293},{"_id":"source/img/0044.png","hash":"c6a068d2680b3550e4e3151b18b268a66ddfc792","modified":1588984292594},{"_id":"source/img/0043.png","hash":"50a67207d7845537fde236023a90d956e0f23204","modified":1588982843314},{"_id":"source/img/0046.png","hash":"4f2149005076b1eecaaaee2fe094c3ba2e22ef9c","modified":1588984645182},{"_id":"source/img/0047.png","hash":"c55624f5976d3703e98704ff29c908891a670dcb","modified":1588985170541},{"_id":"source/img/0048.png","hash":"ff10d24f9841e21bed39cd9b0810e5fd3457c639","modified":1588985494471},{"_id":"source/img/0049.png","hash":"cc7052276940a81eafea9989611cae2e87f904de","modified":1589116988340},{"_id":"source/img/0050.png","hash":"29e833537e09cd6e3b4d58438fc7dbae72153b84","modified":1589117403386},{"_id":"source/_posts/2023-05-06-redis应用问题解决/1.png","hash":"67a0ba529d303261c378fc6e1b33bda2c10c8a04","modified":1683366298000},{"_id":"source/img/0051.png","hash":"0d1de02660bbc9cddb63790d4ce198eda785d2fe","modified":1589117633820},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存击穿方案.png","hash":"cccd5f058f98d3b30fccecda1cf441a69826ea70","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存击穿.png","hash":"db1d2a396722b20f362cc5eab778c3e1f660c39c","modified":1683366298000},{"_id":"source/_posts/2023-05-06-Netty03-进阶.md","hash":"fec76e5ed474469d84121d0b196d061e257e406c","modified":1683379958951},{"_id":"source/_posts/2023-05-06-Netty02-入门.md","hash":"5df10e22429ac1f947009e39a426f1df0e4d2af6","modified":1683379676452},{"_id":"source/_posts/2023-05-06-Netty01-nio.md","hash":"5953a5012840d56911a15cd7b0917e006c1e49bf","modified":1683379669808},{"_id":"source/images/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1622676726087},{"_id":"source/img/0001.png","hash":"4170ac5fdcb6c5cbedfbf924069256f1a737a744","modified":1577061603837},{"_id":"source/img/0005.png","hash":"765eaf6756aa86f2a2d4f5e475b7aba7670c9ab7","modified":1580543948670},{"_id":"source/img/0014.png","hash":"1e02282b73a7efbf3c412d7a9894b90aa8e32c92","modified":1582418030478},{"_id":"source/img/0016.png","hash":"33beede5cae9bb6b4ca1a7fc4771f6ace9b6c2c2","modified":1582464526224},{"_id":"source/img/0017.png","hash":"15de689308e6065a83f09677656b503f50aeccb7","modified":1582464850217},{"_id":"source/img/0015.png","hash":"f4ea37e94d14672d9218c1c8e136beb2c53731e9","modified":1582458640890},{"_id":"source/_posts/2023-05-06-redis应用问题解决/75fad2d93da642fcb6006e7d538cba88.jpg","hash":"552a9e900c63eb8dda135925e6303026169d2765","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/4cb065a31ddd414e8c45a4a08754c823.jpg","hash":"9da1c134f36064307e9c4c25e8ecfbebfc53bafe","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/a6179f036c6a428fa92a5a541482490c.jpg","hash":"7d7374d7307ce2091051a47c9e6a209b06319361","modified":1683366298000},{"_id":"source/_posts/2023-05-05-hahaha/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1622676726087},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存雪崩.png","hash":"d1f4aa9971741ce480b4a70135ab81b1120c4338","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/雪崩失效.png","hash":"9265f2dbab25bf3199d57bddffc65c482a46141a","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存穿透.png","hash":"5918159f51ffd4dbd6b8ca1d83ec3b4b014467ba","modified":1683366298000},{"_id":"source/img/0032.png","hash":"ef86fa62fa99a8ad37829611dc505131880c8229","modified":1587859741142},{"_id":"source/img/0031.jpg","hash":"0c26b8166787344ec72a9e038efcd250e989c167","modified":1586832370229},{"_id":"source/img/0028.jpg","hash":"db629619cb128f44e56c697b0a23ff9ec2380a2e","modified":1586827114643},{"_id":"source/img/0040.png","hash":"cb457d4f1d518f1517373177aacbcf42decbddcf","modified":1588918528647},{"_id":"source/img/0029.jpg","hash":"838454e5c0ec853e840f61bc64359bd40b1622c5","modified":1586827355229},{"_id":"source/img/0030.jpg","hash":"1eb9f9d7d086986e7a09e7a7ce2e3146e99d9d6c","modified":1586827952242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1683441870711},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1683441870661},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1683441870712},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1683441870712},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1683441870712},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1683441870712},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1683441870712},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1683441870712},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1683441870712},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1683441870721},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1683441870721},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1683441870721},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1683441870540},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1683441870540},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1683441870551},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1683441870552},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1683441870560},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1683441870592},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1683441870592},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1683441870601},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1683441870610},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1683441870611},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1683441870613},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1683441870613},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1683441870540},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1683441870552},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1683441870552},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1683441870592},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1683441870592},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1683441870601},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1683441870611},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1683441870613},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1683441870613},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1683441870632},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1683441870632},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1683441870632},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1683441870632},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1683441870661},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1683441870632},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1683441870631},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1683441870651},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1683441870650},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1683441870692},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1683441870692},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"80870d9e78722915978055c1604bfeb934180ac7","modified":1682165425065},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1683441870671},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1683441870671},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1683441870630},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1683441870632},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1683441870532},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1683441870652},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1683441870661},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1683441870712},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1683441870592},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1683441870601},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1683441870613},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1683441870552},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1683441870613},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1683441870552},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1683441870601},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1683441870540},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1683441870540},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1683441870592},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1683441870601},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1683441870601},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1683441870601},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1683441870552},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1683441870561},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1683441870601},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1683441870601},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1683441870613},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1683441870621},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1683441870613},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1683441870632},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1683441870632},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1683441870640},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1683441870632},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1683441870671},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1683441870681},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1683441870681},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1683441870671},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1683441870671},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1683441870681},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1683441870681},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1683441870692},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1683441870700},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1683441870681},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1683441870681},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1683441870681},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1683441870692},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1683441870661},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1683441870692},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1683441870691},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1683441870711},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1683441870681},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1683441870681},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1683441870671},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1683441870671},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1683441870692},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1683441870692},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1683441870692},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1683441870692},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1683441870710},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1683441870701},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1683441870712},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1683441870540},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1683441870641},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1683441870671},{"_id":"source/pdf/最新面试文档.pdf","hash":"f5008ef782e717080411d16ec75d136a46dfee05","modified":1680801277184},{"_id":"node_modules/hexo-theme-fluid/source/img/girl.jfif","hash":"c859a5c1b0483d20ee032eec0b0dda7d27b07129","modified":1683539263972},{"_id":"node_modules/hexo-theme-fluid/source/img/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1622676726087},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1683389363039},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1683389362859},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1683389362987},{"_id":"themes/fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1683389362985},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1683389363047},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1683389363047},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1683389363047},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1683389363047},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1683389363047},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1683389363047},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1683389363047},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1683389363056},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1683389363056},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1683389362867},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1683389362887},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1683389362898},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1683389362898},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1683389362909},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1683389362919},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1683389362926},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1683389362924},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1683389362927},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1683389362927},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1683389362940},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1683389362942},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1683389362890},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1683389362906},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1683389362919},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1683389362919},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1683389362937},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1683389362959},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1683389362959},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1683389362974},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1683389362978},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1683389362967},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1683389362978},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1683389362957},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1683389362959},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1683389362959},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1683389362959},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1683389362967},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1683389362978},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1683389362978},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1683389362978},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1683389362978},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1683389362985},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1683389362947},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1683389362947},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1683389362959},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1683389362967},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1683389362975},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1683389362975},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1683389362947},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1683389362977},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1683389362978},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1683389362978},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1683389362867},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1683389363018},{"_id":"themes/fluid/source/img/1111.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1683389362987},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1683389363025},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1683389363027},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1683389362998},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1683389362947},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1683389362947},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1683389362947},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1683389362998},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1683389362959},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1683389362959},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1683389363040},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1683389362967},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1683389362967},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1683389362985},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1683389362978},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1683389362919},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1683389362919},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1683389362942},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1683389362942},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1683389362898},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1683389362942},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1683389362938},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1683389362942},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1683389362890},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1683389362898},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1683389362890},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1683389362919},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1683389362898},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1683389362942},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1683389362909},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1683389362927},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1683389362938},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1683389362938},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1683389362942},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1683389362959},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1683389362947},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1683389362959},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1683389362959},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1683389362967},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1683389362967},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1683389362975},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1683389363009},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1683389363027},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1683389363009},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1683389363009},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1683389362998},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1683389362998},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1683389363009},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1683389363009},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1683389363009},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1683389363009},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1683389363009},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1683389363018},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1683389363024},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1683389363039},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1683389362998},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1683389362998},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1683389363009},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1683389363009},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1683389363018},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1683389363018},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1683389363018},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1683389363018},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1683389363027},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1683389363038},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1683389363038},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1683389363039},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1683389363040},{"_id":"themes/fluid/source/img/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1622676726087},{"_id":"themes/fluid/source/img/dog1.png","hash":"7f53bb2f4cd0a31fa804a8958dd197d43ec1cf9e","modified":1678687260652},{"_id":"themes/fluid/source/img/girl.jfif","hash":"c859a5c1b0483d20ee032eec0b0dda7d27b07129","modified":1683539263972},{"_id":"themes/fluid/source/img/avatar.png","hash":"80870d9e78722915978055c1604bfeb934180ac7","modified":1682165425065},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1683389362998},{"_id":"source/_posts/2023-05-10-dbRouter.md","hash":"2a6b93cbe76a74dbe2150791cd2353399432e8dd","modified":1684162120841},{"_id":"source/_posts/2023-05-10-dbRouter/01.png","hash":"04641793ea2d1dbfb72cbbf7bd7386eb8baadb0b","modified":1683726946659}],"Category":[{"name":"诗词","_id":"clher6xwc0004ocwe33vibxxm"},{"name":"Netty","_id":"clher6xwg000bocwe5lwyde4x"},{"name":"入门","_id":"clher6xwl000qocwe8netecm6"},{"name":"redis","_id":"clher6xwo0010ocwea1x20i1t"},{"name":"Java","_id":"clhhrqv420001s0we73iqe70s"},{"name":"数据库","parent":"clhhrqv420001s0we73iqe70s","_id":"clhhrqv460004s0weflgr9rbj"}],"Data":[],"Page":[{"layout":"about","_content":"\n<p align=\"center\">芝兰生于深谷，不以无人而不芳</p>\n<p align=\"center\">君子修身养德，不以穷困而改志</p>\n\n![](/images/dog.jpg)\n<!-- 以上是有效格式 -->\n# Me\n\nQQ:2290418832\n","source":"about/index.md","raw":"---\nlayout: about\n---\n\n<p align=\"center\">芝兰生于深谷，不以无人而不芳</p>\n<p align=\"center\">君子修身养德，不以穷困而改志</p>\n\n![](/images/dog.jpg)\n<!-- 以上是有效格式 -->\n# Me\n\nQQ:2290418832\n","date":"2023-05-15T15:55:33.329Z","updated":"2023-05-15T15:55:33.329Z","path":"about/index.html","_id":"clher6xw10000ocwec06ehqbq","title":"","comments":1,"content":"<p align=\"center\">芝兰生于深谷，不以无人而不芳</p>\n<p align=\"center\">君子修身养德，不以穷困而改志</p>\n\n<p><img src=\"/images/dog.jpg\"></p>\n<!-- 以上是有效格式 -->\n<h1 id=\"Me\"><a href=\"#Me\" class=\"headerlink\" title=\"Me\"></a>Me</h1><p>QQ:2290418832</p>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\">芝兰生于深谷，不以无人而不芳</p>\n<p align=\"center\">君子修身养德，不以穷困而改志</p>\n\n<p><img src=\"/images/dog.jpg\"></p>\n<!-- 以上是有效格式 -->\n<h1 id=\"Me\"><a href=\"#Me\" class=\"headerlink\" title=\"Me\"></a>Me</h1><p>QQ:2290418832</p>\n"},{"layout":"categories","_content":"","source":"categories/index.md","raw":"---\nlayout: categories\n---\n","date":"2023-05-06T10:40:45.276Z","updated":"2023-05-06T10:40:45.276Z","path":"categories/index.html","title":"","comments":1,"_id":"clher6xwa0002ocwe299ocph0","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","_content":"","source":"tags/index.md","raw":"---\nlayout: tags\n---\n","date":"2023-05-05T09:55:13.472Z","updated":"2023-05-05T09:55:13.472Z","path":"tags/index.html","title":"","comments":1,"_id":"clher6xwd0006ocweb3mq80e9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hahaha","date":"2023-05-05T15:51:04.000Z","_content":"\n衣带渐宽终不悔,为伊消得人憔悴\n\n<!-- more -->\n\n <!-- 有效格式1 -->\n![dog](/images/dog.jpg)\n","source":"_posts/2023-05-05-hahaha.md","raw":"---\ntitle: hahaha\ndate: 2023-05-05 23:51:04\ntags: 诗词\ncategories: 诗词\n---\n\n衣带渐宽终不悔,为伊消得人憔悴\n\n<!-- more -->\n\n <!-- 有效格式1 -->\n![dog](/images/dog.jpg)\n","slug":"hahaha","published":1,"updated":"2023-05-14T05:41:21.441Z","_id":"clher6xwa0003ocwe446pgvb3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>衣带渐宽终不悔,为伊消得人憔悴</p>\n<span id=\"more\"></span>\n\n <!-- 有效格式1 -->\n<p><img src=\"/images/dog.jpg\" alt=\"dog\"></p>\n","site":{"data":{}},"excerpt":"<p>衣带渐宽终不悔,为伊消得人憔悴</p>","more":"<!-- 有效格式1 -->\n<p><img src=\"/images/dog.jpg\" alt=\"dog\"></p>"},{"title":"Netty01-nio","date":"2023-05-06T13:15:53.000Z","_content":"\n该笔记是B站黑马的Netty视频的配套笔记1。\n<!-- more -->\n# 一. NIO 基础\n\nnon-blocking io 非阻塞 IO\n\n## 1. 三大组件\n\n### 1.1 Channel & Buffer\n\nchannel 有一点类似于 stream，它就是读写数据的**双向通道**，可以从 channel 将数据读入 buffer，也可以将 buffer 的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel 比 stream 更为底层\n\n```mermaid\ngraph LR\nchannel --> buffer\nbuffer --> channel\n```\n\n常见的 Channel 有\n\n* FileChannel\n* DatagramChannel\n* SocketChannel\n* ServerSocketChannel\n\n\n\nbuffer 则用来缓冲读写数据，常见的 buffer 有\n\n* ByteBuffer\n  * MappedByteBuffer\n  * DirectByteBuffer\n  * HeapByteBuffer\n* ShortBuffer\n* IntBuffer\n* LongBuffer\n* FloatBuffer\n* DoubleBuffer\n* CharBuffer\n\n\n\n### 1.2 Selector\n\nselector 单从字面意思不好理解，需要结合服务器的设计演化来理解它的用途\n\n#### 多线程版设计\n\n```mermaid\ngraph TD\nsubgraph 多线程版\nt1(thread) --> s1(socket1)\nt2(thread) --> s2(socket2)\nt3(thread) --> s3(socket3)\nend\n```\n#### ⚠️ 多线程版缺点\n\n* 内存占用高\n* 线程上下文切换成本高\n* 只适合连接数少的场景\n\n\n\n\n\n\n\n#### 线程池版设计\n\n```mermaid\ngraph TD\nsubgraph 线程池版\nt4(thread) --> s4(socket1)\nt5(thread) --> s5(socket2)\nt4(thread) -.-> s6(socket3)\nt5(thread) -.-> s7(socket4)\nend\n```\n#### ⚠️ 线程池版缺点\n\n* 阻塞模式下，线程仅能处理一个 socket 连接\n* 仅适合短连接场景\n\n\n\n\n\n\n\n\n\n#### selector 版设计\n\nselector 的作用就是配合一个线程来管理多个 channel，获取这些 channel 上发生的事件，这些 channel 工作在非阻塞模式下，不会让线程吊死在一个 channel 上。适合连接数特别多，但流量低的场景（low traffic）\n\n```mermaid\ngraph TD\nsubgraph selector 版\nthread --> selector\nselector --> c1(channel)\nselector --> c2(channel)\nselector --> c3(channel)\nend\n```\n\n\n\n调用 selector 的 select() 会阻塞直到 channel 发生了读写就绪事件，这些事件发生，select 方法就会返回这些事件交给 thread 来处理\n\n\n\n\n\n\n\n## 2. ByteBuffer\n\n有一普通文本文件 data.txt，内容为\n\n```\n1234567890abcd\n```\n\n使用 FileChannel 来读取文件内容\n\n```java\n@Slf4j\npublic class ChannelDemo1 {\n    public static void main(String[] args) {\n        try (RandomAccessFile file = new RandomAccessFile(\"helloword/data.txt\", \"rw\")) {\n            FileChannel channel = file.getChannel();\n            ByteBuffer buffer = ByteBuffer.allocate(10);\n            do {\n                // 向 buffer 写入\n                int len = channel.read(buffer);\n                log.debug(\"读到字节数：{}\", len);\n                if (len == -1) {\n                    break;\n                }\n                // 切换 buffer 读模式\n                buffer.flip();\n                while(buffer.hasRemaining()) {\n                    log.debug(\"{}\", (char)buffer.get());\n                }\n                // 切换 buffer 写模式\n                buffer.clear();\n            } while (true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n输出\n\n```\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：10\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 1\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 2\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 3\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 4\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 5\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 6\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 7\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 8\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 9\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 0\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：4\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - a\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - b\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - c\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - d\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：-1\n```\n\n\n\n### 2.1  ByteBuffer 正确使用姿势\n\n1. 向 buffer 写入数据，例如调用 channel.read(buffer)\n2. 调用 flip() 切换至**读模式**\n3. 从 buffer 读取数据，例如调用 buffer.get()\n4. 调用 clear() 或 compact() 切换至**写模式**\n5. 重复 1~4 步骤\n\n\n\n### 2.2 ByteBuffer 结构\n\nByteBuffer 有以下重要属性\n\n* capacity\n* position\n* limit\n\n一开始\n\n![](img/0021.png)\n\n写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态\n\n![](img/0018.png)\n\nflip 动作发生后，position 切换为读取位置，limit 切换为读取限制\n\n![](img/0019.png)\n\n读取 4 个字节后，状态\n\n![](img/0020.png)\n\nclear 动作发生后，状态\n\n![](img/0021.png)\n\ncompact 方法，是把未读完的部分向前压缩，然后切换至写模式\n\n![](img/0022.png)\n\n\n\n#### 💡 调试工具类\n\n```java\npublic class ByteBufferUtil {\n    private static final char[] BYTE2CHAR = new char[256];\n    private static final char[] HEXDUMP_TABLE = new char[256 * 4];\n    private static final String[] HEXPADDING = new String[16];\n    private static final String[] HEXDUMP_ROWPREFIXES = new String[65536 >>> 4];\n    private static final String[] BYTE2HEX = new String[256];\n    private static final String[] BYTEPADDING = new String[16];\n\n    static {\n        final char[] DIGITS = \"0123456789abcdef\".toCharArray();\n        for (int i = 0; i < 256; i++) {\n            HEXDUMP_TABLE[i << 1] = DIGITS[i >>> 4 & 0x0F];\n            HEXDUMP_TABLE[(i << 1) + 1] = DIGITS[i & 0x0F];\n        }\n\n        int i;\n\n        // Generate the lookup table for hex dump paddings\n        for (i = 0; i < HEXPADDING.length; i++) {\n            int padding = HEXPADDING.length - i;\n            StringBuilder buf = new StringBuilder(padding * 3);\n            for (int j = 0; j < padding; j++) {\n                buf.append(\"   \");\n            }\n            HEXPADDING[i] = buf.toString();\n        }\n\n        // Generate the lookup table for the start-offset header in each row (up to 64KiB).\n        for (i = 0; i < HEXDUMP_ROWPREFIXES.length; i++) {\n            StringBuilder buf = new StringBuilder(12);\n            buf.append(NEWLINE);\n            buf.append(Long.toHexString(i << 4 & 0xFFFFFFFFL | 0x100000000L));\n            buf.setCharAt(buf.length() - 9, '|');\n            buf.append('|');\n            HEXDUMP_ROWPREFIXES[i] = buf.toString();\n        }\n\n        // Generate the lookup table for byte-to-hex-dump conversion\n        for (i = 0; i < BYTE2HEX.length; i++) {\n            BYTE2HEX[i] = ' ' + StringUtil.byteToHexStringPadded(i);\n        }\n\n        // Generate the lookup table for byte dump paddings\n        for (i = 0; i < BYTEPADDING.length; i++) {\n            int padding = BYTEPADDING.length - i;\n            StringBuilder buf = new StringBuilder(padding);\n            for (int j = 0; j < padding; j++) {\n                buf.append(' ');\n            }\n            BYTEPADDING[i] = buf.toString();\n        }\n\n        // Generate the lookup table for byte-to-char conversion\n        for (i = 0; i < BYTE2CHAR.length; i++) {\n            if (i <= 0x1f || i >= 0x7f) {\n                BYTE2CHAR[i] = '.';\n            } else {\n                BYTE2CHAR[i] = (char) i;\n            }\n        }\n    }\n\n    /**\n     * 打印所有内容\n     * @param buffer\n     */\n    public static void debugAll(ByteBuffer buffer) {\n        int oldlimit = buffer.limit();\n        buffer.limit(buffer.capacity());\n        StringBuilder origin = new StringBuilder(256);\n        appendPrettyHexDump(origin, buffer, 0, buffer.capacity());\n        System.out.println(\"+--------+-------------------- all ------------------------+----------------+\");\n        System.out.printf(\"position: [%d], limit: [%d]\\n\", buffer.position(), oldlimit);\n        System.out.println(origin);\n        buffer.limit(oldlimit);\n    }\n\n    /**\n     * 打印可读取内容\n     * @param buffer\n     */\n    public static void debugRead(ByteBuffer buffer) {\n        StringBuilder builder = new StringBuilder(256);\n        appendPrettyHexDump(builder, buffer, buffer.position(), buffer.limit() - buffer.position());\n        System.out.println(\"+--------+-------------------- read -----------------------+----------------+\");\n        System.out.printf(\"position: [%d], limit: [%d]\\n\", buffer.position(), buffer.limit());\n        System.out.println(builder);\n    }\n\n    private static void appendPrettyHexDump(StringBuilder dump, ByteBuffer buf, int offset, int length) {\n        if (isOutOfBounds(offset, length, buf.capacity())) {\n            throw new IndexOutOfBoundsException(\n                    \"expected: \" + \"0 <= offset(\" + offset + \") <= offset + length(\" + length\n                            + \") <= \" + \"buf.capacity(\" + buf.capacity() + ')');\n        }\n        if (length == 0) {\n            return;\n        }\n        dump.append(\n                \"         +-------------------------------------------------+\" +\n                        NEWLINE + \"         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\" +\n                        NEWLINE + \"+--------+-------------------------------------------------+----------------+\");\n\n        final int startIndex = offset;\n        final int fullRows = length >>> 4;\n        final int remainder = length & 0xF;\n\n        // Dump the rows which have 16 bytes.\n        for (int row = 0; row < fullRows; row++) {\n            int rowStartIndex = (row << 4) + startIndex;\n\n            // Per-row prefix.\n            appendHexDumpRowPrefix(dump, row, rowStartIndex);\n\n            // Hex dump\n            int rowEndIndex = rowStartIndex + 16;\n            for (int j = rowStartIndex; j < rowEndIndex; j++) {\n                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);\n            }\n            dump.append(\" |\");\n\n            // ASCII dump\n            for (int j = rowStartIndex; j < rowEndIndex; j++) {\n                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);\n            }\n            dump.append('|');\n        }\n\n        // Dump the last row which has less than 16 bytes.\n        if (remainder != 0) {\n            int rowStartIndex = (fullRows << 4) + startIndex;\n            appendHexDumpRowPrefix(dump, fullRows, rowStartIndex);\n\n            // Hex dump\n            int rowEndIndex = rowStartIndex + remainder;\n            for (int j = rowStartIndex; j < rowEndIndex; j++) {\n                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);\n            }\n            dump.append(HEXPADDING[remainder]);\n            dump.append(\" |\");\n\n            // Ascii dump\n            for (int j = rowStartIndex; j < rowEndIndex; j++) {\n                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);\n            }\n            dump.append(BYTEPADDING[remainder]);\n            dump.append('|');\n        }\n\n        dump.append(NEWLINE +\n                \"+--------+-------------------------------------------------+----------------+\");\n    }\n\n    private static void appendHexDumpRowPrefix(StringBuilder dump, int row, int rowStartIndex) {\n        if (row < HEXDUMP_ROWPREFIXES.length) {\n            dump.append(HEXDUMP_ROWPREFIXES[row]);\n        } else {\n            dump.append(NEWLINE);\n            dump.append(Long.toHexString(rowStartIndex & 0xFFFFFFFFL | 0x100000000L));\n            dump.setCharAt(dump.length() - 9, '|');\n            dump.append('|');\n        }\n    }\n\n    public static short getUnsignedByte(ByteBuffer buffer, int index) {\n        return (short) (buffer.get(index) & 0xFF);\n    }\n}\n```\n\n\n\n### 2.3 ByteBuffer 常见方法\n\n#### 分配空间\n\n可以使用 allocate 方法为 ByteBuffer 分配空间，其它 buffer 类也有该方法\n\n```java\nBytebuffer buf = ByteBuffer.allocate(16);\n```\n\n\n\n#### 向 buffer 写入数据\n\n有两种办法\n\n* 调用 channel 的 read 方法\n* 调用 buffer 自己的 put 方法\n\n```java\nint readBytes = channel.read(buf);\n```\n\n和\n\n```java\nbuf.put((byte)127);\n```\n\n\n\n#### 从 buffer 读取数据\n\n同样有两种办法\n\n* 调用 channel 的 write 方法\n* 调用 buffer 自己的 get 方法\n\n```java\nint writeBytes = channel.write(buf);\n```\n\n和\n\n```java\nbyte b = buf.get();\n```\n\nget 方法会让 position 读指针向后走，如果想重复读取数据\n\n* 可以调用 rewind 方法将 position 重新置为 0\n* 或者调用 get(int i) 方法获取索引 i 的内容，它不会移动读指针\n\n\n\n#### mark 和 reset\n\nmark 是在读取时，做一个标记，即使 position 改变，只要调用 reset 就能回到 mark 的位置\n\n> **注意**\n>\n> rewind 和 flip 都会清除 mark 位置\n\n\n\n#### 字符串与 ByteBuffer 互转\n\n```java\nByteBuffer buffer1 = StandardCharsets.UTF_8.encode(\"你好\");\nByteBuffer buffer2 = Charset.forName(\"utf-8\").encode(\"你好\");\n\ndebug(buffer1);\ndebug(buffer2);\n\nCharBuffer buffer3 = StandardCharsets.UTF_8.decode(buffer1);\nSystem.out.println(buffer3.getClass());\nSystem.out.println(buffer3.toString());\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| e4 bd a0 e5 a5 bd                               |......          |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| e4 bd a0 e5 a5 bd                               |......          |\n+--------+-------------------------------------------------+----------------+\nclass java.nio.HeapCharBuffer\n你好\n```\n\n\n\n#### ⚠️ Buffer 的线程安全\n\n> Buffer 是**非线程安全的**\n\n\n\n### 2.4 Scattering Reads\n\n分散读取，有一个文本文件 3parts.txt\n\n```\nonetwothree\n```\n\n使用如下方式读取，可以将数据填充至多个 buffer\n\n```java\ntry (RandomAccessFile file = new RandomAccessFile(\"helloword/3parts.txt\", \"rw\")) {\n    FileChannel channel = file.getChannel();\n    ByteBuffer a = ByteBuffer.allocate(3);\n    ByteBuffer b = ByteBuffer.allocate(3);\n    ByteBuffer c = ByteBuffer.allocate(5);\n    channel.read(new ByteBuffer[]{a, b, c});\n    a.flip();\n    b.flip();\n    c.flip();\n    debug(a);\n    debug(b);\n    debug(c);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n结果\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6f 6e 65                                        |one             |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 74 77 6f                                        |two             |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 74 68 72 65 65                                  |three           |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n### 2.5 Gathering Writes\n\n使用如下方式写入，可以将多个 buffer 的数据填充至 channel\n\n```java\ntry (RandomAccessFile file = new RandomAccessFile(\"helloword/3parts.txt\", \"rw\")) {\n    FileChannel channel = file.getChannel();\n    ByteBuffer d = ByteBuffer.allocate(4);\n    ByteBuffer e = ByteBuffer.allocate(4);\n    channel.position(11);\n\n    d.put(new byte[]{'f', 'o', 'u', 'r'});\n    e.put(new byte[]{'f', 'i', 'v', 'e'});\n    d.flip();\n    e.flip();\n    debug(d);\n    debug(e);\n    channel.write(new ByteBuffer[]{d, e});\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 6f 75 72                                     |four            |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 69 76 65                                     |five            |\n+--------+-------------------------------------------------+----------------+\n```\n\n文件内容\n\n```\nonetwothreefourfive\n```\n\n\n\n### 2.6 练习\n\n网络上有多条数据发送给服务端，数据之间使用 \\n 进行分隔\n但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为\n\n* Hello,world\\n\n* I'm zhangsan\\n\n* How are you?\\n\n\n变成了下面的两个 byteBuffer (黏包，半包)\n\n* Hello,world\\nI'm zhangsan\\nHo\n* w are you?\\n\n\n现在要求你编写程序，将错乱的数据恢复成原始的按 \\n 分隔的数据\n\n```java\npublic static void main(String[] args) {\n    ByteBuffer source = ByteBuffer.allocate(32);\n    //                     11            24\n    source.put(\"Hello,world\\nI'm zhangsan\\nHo\".getBytes());\n    split(source);\n\n    source.put(\"w are you?\\nhaha!\\n\".getBytes());\n    split(source);\n}\n\nprivate static void split(ByteBuffer source) {\n    source.flip();\n    int oldLimit = source.limit();\n    for (int i = 0; i < oldLimit; i++) {\n        if (source.get(i) == '\\n') {\n            System.out.println(i);\n            ByteBuffer target = ByteBuffer.allocate(i + 1 - source.position());\n            // 0 ~ limit\n            source.limit(i + 1);\n            target.put(source); // 从source 读，向 target 写\n            debugAll(target);\n            source.limit(oldLimit);\n        }\n    }\n    source.compact();\n}\n```\n\n\n\n## 3. 文件编程\n\n### 3.1 FileChannel\n\n#### ⚠️ FileChannel 工作模式\n\n> FileChannel 只能工作在阻塞模式下\n\n\n\n#### 获取\n\n不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法\n\n* 通过 FileInputStream 获取的 channel 只能读\n* 通过 FileOutputStream 获取的 channel 只能写\n* 通过 RandomAccessFile 是否能读写根据构造 RandomAccessFile 时的读写模式决定\n\n\n\n#### 读取\n\n会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾\n\n```java\nint readBytes = channel.read(buffer);\n```\n\n\n\n#### 写入\n\n写入的正确姿势如下， SocketChannel\n\n```java\nByteBuffer buffer = ...;\nbuffer.put(...); // 存入数据\nbuffer.flip();   // 切换读模式\n\nwhile(buffer.hasRemaining()) {\n    channel.write(buffer);\n}\n```\n\n在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel\n\n\n\n#### 关闭\n\nchannel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法\n\n\n\n#### 位置\n\n获取当前位置\n\n```java\nlong pos = channel.position();\n```\n\n设置当前位置\n\n```java\nlong newPos = ...;\nchannel.position(newPos);\n```\n\n设置当前位置时，如果设置为文件的末尾\n\n* 这时读取会返回 -1 \n* 这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）\n\n\n\n#### 大小\n\n使用 size 方法获取文件的大小\n\n\n\n#### 强制写入\n\n操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘。可以调用 force(true)  方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘\n\n\n\n### 3.2 两个 Channel 传输数据\n\n```java\nString FROM = \"helloword/data.txt\";\nString TO = \"helloword/to.txt\";\nlong start = System.nanoTime();\ntry (FileChannel from = new FileInputStream(FROM).getChannel();\n     FileChannel to = new FileOutputStream(TO).getChannel();\n    ) {\n    from.transferTo(0, from.size(), to);\n} catch (IOException e) {\n    e.printStackTrace();\n}\nlong end = System.nanoTime();\nSystem.out.println(\"transferTo 用时：\" + (end - start) / 1000_000.0);\n```\n\n输出\n\n```\ntransferTo 用时：8.2011\n```\n\n\n\n超过 2g 大小的文件传输\n\n```java\npublic class TestFileChannelTransferTo {\n    public static void main(String[] args) {\n        try (\n                FileChannel from = new FileInputStream(\"data.txt\").getChannel();\n                FileChannel to = new FileOutputStream(\"to.txt\").getChannel();\n        ) {\n            // 效率高，底层会利用操作系统的零拷贝进行优化\n            long size = from.size();\n            // left 变量代表还剩余多少字节\n            for (long left = size; left > 0; ) {\n                System.out.println(\"position:\" + (size - left) + \" left:\" + left);\n                left -= from.transferTo((size - left), left, to);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n实际传输一个超大文件\n\n```\nposition:0 left:7769948160\nposition:2147483647 left:5622464513\nposition:4294967294 left:3474980866\nposition:6442450941 left:1327497219\n```\n\n\n\n### 3.3 Path\n\njdk7 引入了 Path 和 Paths 类\n\n* Path 用来表示文件路径\n* Paths 是工具类，用来获取 Path 实例\n\n```java\nPath source = Paths.get(\"1.txt\"); // 相对路径 使用 user.dir 环境变量来定位 1.txt\n\nPath source = Paths.get(\"d:\\\\1.txt\"); // 绝对路径 代表了  d:\\1.txt\n\nPath source = Paths.get(\"d:/1.txt\"); // 绝对路径 同样代表了  d:\\1.txt\n\nPath projects = Paths.get(\"d:\\\\data\", \"projects\"); // 代表了  d:\\data\\projects\n```\n\n* `.` 代表了当前路径\n* `..` 代表了上一级路径\n\n例如目录结构如下\n\n```\nd:\n\t|- data\n\t\t|- projects\n\t\t\t|- a\n\t\t\t|- b\n```\n\n代码\n\n```java\nPath path = Paths.get(\"d:\\\\data\\\\projects\\\\a\\\\..\\\\b\");\nSystem.out.println(path);\nSystem.out.println(path.normalize()); // 正常化路径\n```\n\n会输出\n\n```\nd:\\data\\projects\\a\\..\\b\nd:\\data\\projects\\b\n```\n\n\n\n### 3.4 Files\n\n检查文件是否存在\n\n```java\nPath path = Paths.get(\"helloword/data.txt\");\nSystem.out.println(Files.exists(path));\n```\n\n\n\n创建一级目录\n\n```java\nPath path = Paths.get(\"helloword/d1\");\nFiles.createDirectory(path);\n```\n\n* 如果目录已存在，会抛异常 FileAlreadyExistsException\n* 不能一次创建多级目录，否则会抛异常 NoSuchFileException\n\n\n\n创建多级目录用\n\n```java\nPath path = Paths.get(\"helloword/d1/d2\");\nFiles.createDirectories(path);\n```\n\n\n\n拷贝文件\n\n```java\nPath source = Paths.get(\"helloword/data.txt\");\nPath target = Paths.get(\"helloword/target.txt\");\n\nFiles.copy(source, target);\n```\n\n* 如果文件已存在，会抛异常 FileAlreadyExistsException\n\n如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制\n\n```java\nFiles.copy(source, target, StandardCopyOption.REPLACE_EXISTING);\n```\n\n\n\n移动文件\n\n```java\nPath source = Paths.get(\"helloword/data.txt\");\nPath target = Paths.get(\"helloword/data.txt\");\n\nFiles.move(source, target, StandardCopyOption.ATOMIC_MOVE);\n```\n\n* StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性\n\n\n\n删除文件\n\n```java\nPath target = Paths.get(\"helloword/target.txt\");\n\nFiles.delete(target);\n```\n\n* 如果文件不存在，会抛异常 NoSuchFileException\n\n\n\n删除目录\n\n```java\nPath target = Paths.get(\"helloword/d1\");\n\nFiles.delete(target);\n```\n\n* 如果目录还有内容，会抛异常 DirectoryNotEmptyException\n\n\n\n遍历目录文件\n\n```java\npublic static void main(String[] args) throws IOException {\n    Path path = Paths.get(\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91\");\n    AtomicInteger dirCount = new AtomicInteger();\n    AtomicInteger fileCount = new AtomicInteger();\n    Files.walkFileTree(path, new SimpleFileVisitor<Path>(){\n        @Override\n        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) \n            throws IOException {\n            System.out.println(dir);\n            dirCount.incrementAndGet();\n            return super.preVisitDirectory(dir, attrs);\n        }\n\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) \n            throws IOException {\n            System.out.println(file);\n            fileCount.incrementAndGet();\n            return super.visitFile(file, attrs);\n        }\n    });\n    System.out.println(dirCount); // 133\n    System.out.println(fileCount); // 1479\n}\n```\n\n\n\n统计 jar 的数目\n\n```java\nPath path = Paths.get(\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91\");\nAtomicInteger fileCount = new AtomicInteger();\nFiles.walkFileTree(path, new SimpleFileVisitor<Path>(){\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) \n        throws IOException {\n        if (file.toFile().getName().endsWith(\".jar\")) {\n            fileCount.incrementAndGet();\n        }\n        return super.visitFile(file, attrs);\n    }\n});\nSystem.out.println(fileCount); // 724\n```\n\n\n\n删除多级目录\n\n```java\nPath path = Paths.get(\"d:\\\\a\");\nFiles.walkFileTree(path, new SimpleFileVisitor<Path>(){\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) \n        throws IOException {\n        Files.delete(file);\n        return super.visitFile(file, attrs);\n    }\n\n    @Override\n    public FileVisitResult postVisitDirectory(Path dir, IOException exc) \n        throws IOException {\n        Files.delete(dir);\n        return super.postVisitDirectory(dir, exc);\n    }\n});\n```\n\n\n\n#### ⚠️ 删除很危险\n\n> 删除是危险操作，确保要递归删除的文件夹没有重要内容\n\n\n\n拷贝多级目录\n\n```java\nlong start = System.currentTimeMillis();\nString source = \"D:\\\\Snipaste-1.16.2-x64\";\nString target = \"D:\\\\Snipaste-1.16.2-x64aaa\";\n\nFiles.walk(Paths.get(source)).forEach(path -> {\n    try {\n        String targetName = path.toString().replace(source, target);\n        // 是目录\n        if (Files.isDirectory(path)) {\n            Files.createDirectory(Paths.get(targetName));\n        }\n        // 是普通文件\n        else if (Files.isRegularFile(path)) {\n            Files.copy(path, Paths.get(targetName));\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n});\nlong end = System.currentTimeMillis();\nSystem.out.println(end - start);\n```\n\n\n\n\n\n## 4. 网络编程\n\n### 4.1 非阻塞 vs 阻塞\n\n#### 阻塞\n\n* 阻塞模式下，相关方法都会导致线程暂停\n  * ServerSocketChannel.accept 会在没有连接建立时让线程暂停\n  * SocketChannel.read 会在没有数据可读时让线程暂停\n  * 阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置\n* 单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持\n* 但多线程下，有新的问题，体现在以下方面\n  * 32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低\n  * 可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接\n\n\n\n服务器端\n\n```java\n// 使用 nio 来理解阻塞模式, 单线程\n// 0. ByteBuffer\nByteBuffer buffer = ByteBuffer.allocate(16);\n// 1. 创建了服务器\nServerSocketChannel ssc = ServerSocketChannel.open();\n\n// 2. 绑定监听端口\nssc.bind(new InetSocketAddress(8080));\n\n// 3. 连接集合\nList<SocketChannel> channels = new ArrayList<>();\nwhile (true) {\n    // 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信\n    log.debug(\"connecting...\");\n    SocketChannel sc = ssc.accept(); // 阻塞方法，线程停止运行\n    log.debug(\"connected... {}\", sc);\n    channels.add(sc);\n    for (SocketChannel channel : channels) {\n        // 5. 接收客户端发送的数据\n        log.debug(\"before read... {}\", channel);\n        channel.read(buffer); // 阻塞方法，线程停止运行\n        buffer.flip();\n        debugRead(buffer);\n        buffer.clear();\n        log.debug(\"after read...{}\", channel);\n    }\n}\n```\n\n客户端\n\n```java\nSocketChannel sc = SocketChannel.open();\nsc.connect(new InetSocketAddress(\"localhost\", 8080));\nSystem.out.println(\"waiting...\");\n```\n\n\n\n#### 非阻塞\n\n* 非阻塞模式下，相关方法都会不会让线程暂停\n  * 在 ServerSocketChannel.accept 在没有连接建立时，会返回 null，继续运行\n  * SocketChannel.read 在没有数据可读时，会返回 0，但线程不必阻塞，可以去执行其它 SocketChannel 的 read 或是去执行 ServerSocketChannel.accept \n  * 写数据时，线程只是等待数据写入 Channel 即可，无需等 Channel 通过网络把数据发送出去\n* 但非阻塞模式下，即使没有连接建立，和可读数据，线程仍然在不断运行，白白浪费了 cpu\n* 数据复制过程中，线程实际还是阻塞的（AIO 改进的地方）\n\n\n\n服务器端，客户端代码不变\n\n```java\n// 使用 nio 来理解非阻塞模式, 单线程\n// 0. ByteBuffer\nByteBuffer buffer = ByteBuffer.allocate(16);\n// 1. 创建了服务器\nServerSocketChannel ssc = ServerSocketChannel.open();\nssc.configureBlocking(false); // 非阻塞模式\n// 2. 绑定监听端口\nssc.bind(new InetSocketAddress(8080));\n// 3. 连接集合\nList<SocketChannel> channels = new ArrayList<>();\nwhile (true) {\n    // 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信\n    SocketChannel sc = ssc.accept(); // 非阻塞，线程还会继续运行，如果没有连接建立，但sc是null\n    if (sc != null) {\n        log.debug(\"connected... {}\", sc);\n        sc.configureBlocking(false); // 非阻塞模式\n        channels.add(sc);\n    }\n    for (SocketChannel channel : channels) {\n        // 5. 接收客户端发送的数据\n        int read = channel.read(buffer);// 非阻塞，线程仍然会继续运行，如果没有读到数据，read 返回 0\n        if (read > 0) {\n            buffer.flip();\n            debugRead(buffer);\n            buffer.clear();\n            log.debug(\"after read...{}\", channel);\n        }\n    }\n}\n```\n\n\n\n#### 多路复用\n\n单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用\n\n* 多路复用仅针对网络 IO、普通文件 IO 没法利用多路复用\n* 如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证\n  * 有可连接事件时才去连接\n  * 有可读事件才去读取\n  * 有可写事件才去写入\n    * 限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件\n\n\n\n### 4.2 Selector\n\n```mermaid\ngraph TD\nsubgraph selector 版\nthread --> selector\nselector --> c1(channel)\nselector --> c2(channel)\nselector --> c3(channel)\nend\n```\n\n\n\n好处\n\n* 一个线程配合 selector 就可以监控多个 channel 的事件，事件发生线程才去处理。避免非阻塞模式下所做无用功\n* 让这个线程能够被充分利用\n* 节约了线程的数量\n* 减少了线程上下文切换\n\n\n\n#### 创建\n\n```java\nSelector selector = Selector.open();\n```\n\n\n\n#### 绑定 Channel 事件\n\n也称之为注册事件，绑定的事件 selector 才会关心 \n\n```java\nchannel.configureBlocking(false);\nSelectionKey key = channel.register(selector, 绑定事件);\n```\n\n* channel 必须工作在非阻塞模式\n* FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用\n* 绑定的事件类型可以有\n  * connect - 客户端连接成功时触发\n  * accept - 服务器端成功接受连接时触发\n  * read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况\n  * write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况\n\n\n\n#### 监听 Channel 事件\n\n可以通过下面三种方法来监听是否有事件发生，方法的返回值代表有多少 channel 发生了事件\n\n方法1，阻塞直到绑定事件发生\n\n```java\nint count = selector.select();\n```\n\n\n\n方法2，阻塞直到绑定事件发生，或是超时（时间单位为 ms）\n\n```java\nint count = selector.select(long timeout);\n```\n\n\n\n方法3，不会阻塞，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件\n\n```java\nint count = selector.selectNow();\n```\n\n\n\n#### 💡 select 何时不阻塞\n\n> * 事件发生时\n>   * 客户端发起连接请求，会触发 accept 事件\n>   * 客户端发送数据过来，客户端正常、异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件\n>   * channel 可写，会触发 write 事件\n>   * 在 linux 下 nio bug 发生时\n> * 调用 selector.wakeup()\n> * 调用 selector.close()\n> * selector 所在线程 interrupt\n\n\n\n### 4.3 处理 accept 事件\n\n客户端代码为\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        try (Socket socket = new Socket(\"localhost\", 8080)) {\n            System.out.println(socket);\n            socket.getOutputStream().write(\"world\".getBytes());\n            System.in.read();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n服务器端代码为\n\n```java\n@Slf4j\npublic class ChannelDemo6 {\n    public static void main(String[] args) {\n        try (ServerSocketChannel channel = ServerSocketChannel.open()) {\n            channel.bind(new InetSocketAddress(8080));\n            System.out.println(channel);\n            Selector selector = Selector.open();\n            channel.configureBlocking(false);\n            channel.register(selector, SelectionKey.OP_ACCEPT);\n\n            while (true) {\n                int count = selector.select();\n//                int count = selector.selectNow();\n                log.debug(\"select count: {}\", count);\n//                if(count <= 0) {\n//                    continue;\n//                }\n\n                // 获取所有事件\n                Set<SelectionKey> keys = selector.selectedKeys();\n\n                // 遍历所有事件，逐一处理\n                Iterator<SelectionKey> iter = keys.iterator();\n                while (iter.hasNext()) {\n                    SelectionKey key = iter.next();\n                    // 判断事件类型\n                    if (key.isAcceptable()) {\n                        ServerSocketChannel c = (ServerSocketChannel) key.channel();\n                        // 必须处理\n                        SocketChannel sc = c.accept();\n                        log.debug(\"{}\", sc);\n                    }\n                    // 处理完毕，必须将事件移除\n                    iter.remove();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n#### 💡 事件发生后能否不处理\n\n> 事件发生后，要么处理，要么取消（cancel），不能什么都不做，否则下次该事件仍会触发，这是因为 nio 底层使用的是水平触发\n\n\n\n### 4.4 处理 read 事件\n\n```java\n@Slf4j\npublic class ChannelDemo6 {\n    public static void main(String[] args) {\n        try (ServerSocketChannel channel = ServerSocketChannel.open()) {\n            channel.bind(new InetSocketAddress(8080));\n            System.out.println(channel);\n            Selector selector = Selector.open();\n            channel.configureBlocking(false);\n            channel.register(selector, SelectionKey.OP_ACCEPT);\n\n            while (true) {\n                int count = selector.select();\n//                int count = selector.selectNow();\n                log.debug(\"select count: {}\", count);\n//                if(count <= 0) {\n//                    continue;\n//                }\n\n                // 获取所有事件\n                Set<SelectionKey> keys = selector.selectedKeys();\n\n                // 遍历所有事件，逐一处理\n                Iterator<SelectionKey> iter = keys.iterator();\n                while (iter.hasNext()) {\n                    SelectionKey key = iter.next();\n                    // 判断事件类型\n                    if (key.isAcceptable()) {\n                        ServerSocketChannel c = (ServerSocketChannel) key.channel();\n                        // 必须处理\n                        SocketChannel sc = c.accept();\n                        sc.configureBlocking(false);\n                        sc.register(selector, SelectionKey.OP_READ);\n                        log.debug(\"连接已建立: {}\", sc);\n                    } else if (key.isReadable()) {\n                        SocketChannel sc = (SocketChannel) key.channel();\n                        ByteBuffer buffer = ByteBuffer.allocate(128);\n                        int read = sc.read(buffer);\n                        if(read == -1) {\n                            key.cancel();\n                            sc.close();\n                        } else {\n                            buffer.flip();\n                            debug(buffer);\n                        }\n                    }\n                    // 处理完毕，必须将事件移除\n                    iter.remove();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n开启两个客户端，修改一下发送文字，输出\n\n```\nsun.nio.ch.ServerSocketChannelImpl[/0:0:0:0:0:0:0:0:8080]\n21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1\n21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60367]\n21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 65 6c 6c 6f                                  |hello           |\n+--------+-------------------------------------------------+----------------+\n21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1\n21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60378]\n21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 6f 72 6c 64                                  |world           |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 💡 为何要 iter.remove()\n\n> 因为 select 在事件发生后，就会将相关的 key 放入 selectedKeys 集合，但不会在处理完后从 selectedKeys 集合中移除，需要我们自己编码删除。例如\n>\n> * 第一次触发了 ssckey 上的 accept 事件，没有移除 ssckey \n> * 第二次触发了 sckey 上的 read 事件，但这时 selectedKeys 中还有上次的 ssckey ，在处理时因为没有真正的 serverSocket 连上了，就会导致空指针异常\n\n\n\n#### 💡 cancel 的作用\n\n> cancel 会取消注册在 selector 上的 channel，并从 keys 集合中删除 key 后续不会再监听事件\n\n\n\n#### ⚠️  不处理边界的问题\n\n以前有同学写过这样的代码，思考注释中两个问题，以 bio 为例，其实 nio 道理是一样的\n\n```java\npublic class Server {\n    public static void main(String[] args) throws IOException {\n        ServerSocket ss=new ServerSocket(9000);\n        while (true) {\n            Socket s = ss.accept();\n            InputStream in = s.getInputStream();\n            // 这里这么写，有没有问题\n            byte[] arr = new byte[4];\n            while(true) {\n                int read = in.read(arr);\n                // 这里这么写，有没有问题\n                if(read == -1) {\n                    break;\n                }\n                System.out.println(new String(arr, 0, read));\n            }\n        }\n    }\n}\n```\n\n客户端\n\n```java\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        Socket max = new Socket(\"localhost\", 9000);\n        OutputStream out = max.getOutputStream();\n        out.write(\"hello\".getBytes());\n        out.write(\"world\".getBytes());\n        out.write(\"你好\".getBytes());\n        max.close();\n    }\n}\n```\n\n输出\n\n```\nhell\nowor\nld�\n�好\n\n```\n\n为什么？\n\n\n\n#### 处理消息的边界\n\n![](img/0023.png)\n\n* 一种思路是固定消息长度，数据包大小一样，服务器按预定长度读取，缺点是浪费带宽\n* 另一种思路是按分隔符拆分，缺点是效率低\n* TLV 格式，即 Type 类型、Length 长度、Value 数据，类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量\n  * Http 1.1 是 TLV 格式\n  * Http 2.0 是 LTV 格式\n\n\n\n```mermaid\nsequenceDiagram \nparticipant c1 as 客户端1\nparticipant s as 服务器\nparticipant b1 as ByteBuffer1\nparticipant b2 as ByteBuffer2\nc1 ->> s: 发送 01234567890abcdef3333\\r\ns ->> b1: 第一次 read 存入 01234567890abcdef\ns ->> b2: 扩容\nb1 ->> b2: 拷贝 01234567890abcdef\ns ->> b2: 第二次 read 存入 3333\\r\nb2 ->> b2: 01234567890abcdef3333\\r\n```\n\n服务器端\n\n```java\nprivate static void split(ByteBuffer source) {\n    source.flip();\n    for (int i = 0; i < source.limit(); i++) {\n        // 找到一条完整消息\n        if (source.get(i) == '\\n') {\n            int length = i + 1 - source.position();\n            // 把这条完整消息存入新的 ByteBuffer\n            ByteBuffer target = ByteBuffer.allocate(length);\n            // 从 source 读，向 target 写\n            for (int j = 0; j < length; j++) {\n                target.put(source.get());\n            }\n            debugAll(target);\n        }\n    }\n    source.compact(); // 0123456789abcdef  position 16 limit 16\n}\n\npublic static void main(String[] args) throws IOException {\n    // 1. 创建 selector, 管理多个 channel\n    Selector selector = Selector.open();\n    ServerSocketChannel ssc = ServerSocketChannel.open();\n    ssc.configureBlocking(false);\n    // 2. 建立 selector 和 channel 的联系（注册）\n    // SelectionKey 就是将来事件发生后，通过它可以知道事件和哪个channel的事件\n    SelectionKey sscKey = ssc.register(selector, 0, null);\n    // key 只关注 accept 事件\n    sscKey.interestOps(SelectionKey.OP_ACCEPT);\n    log.debug(\"sscKey:{}\", sscKey);\n    ssc.bind(new InetSocketAddress(8080));\n    while (true) {\n        // 3. select 方法, 没有事件发生，线程阻塞，有事件，线程才会恢复运行\n        // select 在事件未处理时，它不会阻塞, 事件发生后要么处理，要么取消，不能置之不理\n        selector.select();\n        // 4. 处理事件, selectedKeys 内部包含了所有发生的事件\n        Iterator<SelectionKey> iter = selector.selectedKeys().iterator(); // accept, read\n        while (iter.hasNext()) {\n            SelectionKey key = iter.next();\n            // 处理key 时，要从 selectedKeys 集合中删除，否则下次处理就会有问题\n            iter.remove();\n            log.debug(\"key: {}\", key);\n            // 5. 区分事件类型\n            if (key.isAcceptable()) { // 如果是 accept\n                ServerSocketChannel channel = (ServerSocketChannel) key.channel();\n                SocketChannel sc = channel.accept();\n                sc.configureBlocking(false);\n                ByteBuffer buffer = ByteBuffer.allocate(16); // attachment\n                // 将一个 byteBuffer 作为附件关联到 selectionKey 上\n                SelectionKey scKey = sc.register(selector, 0, buffer);\n                scKey.interestOps(SelectionKey.OP_READ);\n                log.debug(\"{}\", sc);\n                log.debug(\"scKey:{}\", scKey);\n            } else if (key.isReadable()) { // 如果是 read\n                try {\n                    SocketChannel channel = (SocketChannel) key.channel(); // 拿到触发事件的channel\n                    // 获取 selectionKey 上关联的附件\n                    ByteBuffer buffer = (ByteBuffer) key.attachment();\n                    int read = channel.read(buffer); // 如果是正常断开，read 的方法的返回值是 -1\n                    if(read == -1) {\n                        key.cancel();\n                    } else {\n                        split(buffer);\n                        // 需要扩容\n                        if (buffer.position() == buffer.limit()) {\n                            ByteBuffer newBuffer = ByteBuffer.allocate(buffer.capacity() * 2);\n                            buffer.flip();\n                            newBuffer.put(buffer); // 0123456789abcdef3333\\n\n                            key.attach(newBuffer);\n                        }\n                    }\n\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    key.cancel();  // 因为客户端断开了,因此需要将 key 取消（从 selector 的 keys 集合中真正删除 key）\n                }\n            }\n        }\n    }\n}\n```\n\n客户端\n\n```java\nSocketChannel sc = SocketChannel.open();\nsc.connect(new InetSocketAddress(\"localhost\", 8080));\nSocketAddress address = sc.getLocalAddress();\n// sc.write(Charset.defaultCharset().encode(\"hello\\nworld\\n\"));\nsc.write(Charset.defaultCharset().encode(\"0123\\n456789abcdef\"));\nsc.write(Charset.defaultCharset().encode(\"0123456789abcdef3333\\n\"));\nSystem.in.read();\n```\n\n\n\n\n\n#### ByteBuffer 大小分配\n\n* 每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer\n* ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer\n  * 一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 [http://tutorials.jenkov.com/java-performance/resizable-array.html](http://tutorials.jenkov.com/java-performance/resizable-array.html)\n  * 另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗\n\n\n\n\n\n### 4.5 处理 write 事件\n\n\n\n#### 一次无法写完例子\n\n* 非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）\n* 用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略\n  * 当消息处理器第一次写入消息时，才将 channel 注册到 selector 上\n  * selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册\n  * 如果不取消，会每次可写均会触发 write 事件\n\n\n\n```java\npublic class WriteServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocketChannel ssc = ServerSocketChannel.open();\n        ssc.configureBlocking(false);\n        ssc.bind(new InetSocketAddress(8080));\n\n        Selector selector = Selector.open();\n        ssc.register(selector, SelectionKey.OP_ACCEPT);\n\n        while(true) {\n            selector.select();\n\n            Iterator<SelectionKey> iter = selector.selectedKeys().iterator();\n            while (iter.hasNext()) {\n                SelectionKey key = iter.next();\n                iter.remove();\n                if (key.isAcceptable()) {\n                    SocketChannel sc = ssc.accept();\n                    sc.configureBlocking(false);\n                    SelectionKey sckey = sc.register(selector, SelectionKey.OP_READ);\n                    // 1. 向客户端发送内容\n                    StringBuilder sb = new StringBuilder();\n                    for (int i = 0; i < 3000000; i++) {\n                        sb.append(\"a\");\n                    }\n                    ByteBuffer buffer = Charset.defaultCharset().encode(sb.toString());\n                    int write = sc.write(buffer);\n                    // 3. write 表示实际写了多少字节\n                    System.out.println(\"实际写入字节:\" + write);\n                    // 4. 如果有剩余未读字节，才需要关注写事件\n                    if (buffer.hasRemaining()) {\n                        // read 1  write 4\n                        // 在原有关注事件的基础上，多关注 写事件\n                        sckey.interestOps(sckey.interestOps() + SelectionKey.OP_WRITE);\n                        // 把 buffer 作为附件加入 sckey\n                        sckey.attach(buffer);\n                    }\n                } else if (key.isWritable()) {\n                    ByteBuffer buffer = (ByteBuffer) key.attachment();\n                    SocketChannel sc = (SocketChannel) key.channel();\n                    int write = sc.write(buffer);\n                    System.out.println(\"实际写入字节:\" + write);\n                    if (!buffer.hasRemaining()) { // 写完了\n                        key.interestOps(key.interestOps() - SelectionKey.OP_WRITE);\n                        key.attach(null);\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n客户端\n\n```java\npublic class WriteClient {\n    public static void main(String[] args) throws IOException {\n        Selector selector = Selector.open();\n        SocketChannel sc = SocketChannel.open();\n        sc.configureBlocking(false);\n        sc.register(selector, SelectionKey.OP_CONNECT | SelectionKey.OP_READ);\n        sc.connect(new InetSocketAddress(\"localhost\", 8080));\n        int count = 0;\n        while (true) {\n            selector.select();\n            Iterator<SelectionKey> iter = selector.selectedKeys().iterator();\n            while (iter.hasNext()) {\n                SelectionKey key = iter.next();\n                iter.remove();\n                if (key.isConnectable()) {\n                    System.out.println(sc.finishConnect());\n                } else if (key.isReadable()) {\n                    ByteBuffer buffer = ByteBuffer.allocate(1024 * 1024);\n                    count += sc.read(buffer);\n                    buffer.clear();\n                    System.out.println(count);\n                }\n            }\n        }\n    }\n}\n```\n\n\n\n#### 💡 write 为何要取消\n\n只要向 channel 发送数据时，socket 缓冲可写，这个事件会频繁触发，因此应当只在 socket 缓冲区写不下时再关注可写事件，数据写完之后再取消关注\n\n\n\n\n\n\n\n\n\n\n\n### 4.6 更进一步\n\n\n\n#### 💡 利用多线程优化\n\n> 现在都是多核 cpu，设计时要充分考虑别让 cpu 的力量被白白浪费\n\n\n\n前面的代码只有一个选择器，没有充分利用多核 cpu，如何改进呢？\n\n分两组选择器\n\n* 单线程配一个选择器，专门处理 accept 事件\n* 创建 cpu 核心数的线程，每个线程配一个选择器，轮流处理 read 事件\n\n\n\n```java\npublic class ChannelDemo7 {\n    public static void main(String[] args) throws IOException {\n        new BossEventLoop().register();\n    }\n\n\n    @Slf4j\n    static class BossEventLoop implements Runnable {\n        private Selector boss;\n        private WorkerEventLoop[] workers;\n        private volatile boolean start = false;\n        AtomicInteger index = new AtomicInteger();\n\n        public void register() throws IOException {\n            if (!start) {\n                ServerSocketChannel ssc = ServerSocketChannel.open();\n                ssc.bind(new InetSocketAddress(8080));\n                ssc.configureBlocking(false);\n                boss = Selector.open();\n                SelectionKey ssckey = ssc.register(boss, 0, null);\n                ssckey.interestOps(SelectionKey.OP_ACCEPT);\n                workers = initEventLoops();\n                new Thread(this, \"boss\").start();\n                log.debug(\"boss start...\");\n                start = true;\n            }\n        }\n\n        public WorkerEventLoop[] initEventLoops() {\n//        EventLoop[] eventLoops = new EventLoop[Runtime.getRuntime().availableProcessors()];\n            WorkerEventLoop[] workerEventLoops = new WorkerEventLoop[2];\n            for (int i = 0; i < workerEventLoops.length; i++) {\n                workerEventLoops[i] = new WorkerEventLoop(i);\n            }\n            return workerEventLoops;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    boss.select();\n                    Iterator<SelectionKey> iter = boss.selectedKeys().iterator();\n                    while (iter.hasNext()) {\n                        SelectionKey key = iter.next();\n                        iter.remove();\n                        if (key.isAcceptable()) {\n                            ServerSocketChannel c = (ServerSocketChannel) key.channel();\n                            SocketChannel sc = c.accept();\n                            sc.configureBlocking(false);\n                            log.debug(\"{} connected\", sc.getRemoteAddress());\n                            workers[index.getAndIncrement() % workers.length].register(sc);\n                        }\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    @Slf4j\n    static class WorkerEventLoop implements Runnable {\n        private Selector worker;\n        private volatile boolean start = false;\n        private int index;\n\n        private final ConcurrentLinkedQueue<Runnable> tasks = new ConcurrentLinkedQueue<>();\n\n        public WorkerEventLoop(int index) {\n            this.index = index;\n        }\n\n        public void register(SocketChannel sc) throws IOException {\n            if (!start) {\n                worker = Selector.open();\n                new Thread(this, \"worker-\" + index).start();\n                start = true;\n            }\n            tasks.add(() -> {\n                try {\n                    SelectionKey sckey = sc.register(worker, 0, null);\n                    sckey.interestOps(SelectionKey.OP_READ);\n                    worker.selectNow();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            worker.wakeup();\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    worker.select();\n                    Runnable task = tasks.poll();\n                    if (task != null) {\n                        task.run();\n                    }\n                    Set<SelectionKey> keys = worker.selectedKeys();\n                    Iterator<SelectionKey> iter = keys.iterator();\n                    while (iter.hasNext()) {\n                        SelectionKey key = iter.next();\n                        if (key.isReadable()) {\n                            SocketChannel sc = (SocketChannel) key.channel();\n                            ByteBuffer buffer = ByteBuffer.allocate(128);\n                            try {\n                                int read = sc.read(buffer);\n                                if (read == -1) {\n                                    key.cancel();\n                                    sc.close();\n                                } else {\n                                    buffer.flip();\n                                    log.debug(\"{} message:\", sc.getRemoteAddress());\n                                    debugAll(buffer);\n                                }\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                                key.cancel();\n                                sc.close();\n                            }\n                        }\n                        iter.remove();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```\n\n\n\n#### 💡 如何拿到 cpu 个数\n\n> * Runtime.getRuntime().availableProcessors() 如果工作在 docker 容器下，因为容器不是物理隔离的，会拿到物理 cpu 个数，而不是容器申请时的个数\n> * 这个问题直到 jdk 10 才修复，使用 jvm 参数 UseContainerSupport 配置， 默认开启\n\n\n\n### 4.7 UDP\n\n* UDP 是无连接的，client 发送数据不会管 server 是否开启\n* server 这边的 receive 方法会将接收到的数据存入 byte buffer，但如果数据报文超过 buffer 大小，多出来的数据会被默默抛弃\n\n首先启动服务器端\n\n```java\npublic class UdpServer {\n    public static void main(String[] args) {\n        try (DatagramChannel channel = DatagramChannel.open()) {\n            channel.socket().bind(new InetSocketAddress(9999));\n            System.out.println(\"waiting...\");\n            ByteBuffer buffer = ByteBuffer.allocate(32);\n            channel.receive(buffer);\n            buffer.flip();\n            debug(buffer);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n输出\n\n```\nwaiting...\n```\n\n\n\n运行客户端\n\n```java\npublic class UdpClient {\n    public static void main(String[] args) {\n        try (DatagramChannel channel = DatagramChannel.open()) {\n            ByteBuffer buffer = StandardCharsets.UTF_8.encode(\"hello\");\n            InetSocketAddress address = new InetSocketAddress(\"localhost\", 9999);\n            channel.send(buffer, address);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n接下来服务器端输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 65 6c 6c 6f                                  |hello           |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n\n\n## 5. NIO vs BIO\n\n### 5.1 stream vs channel\n\n* stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）\n* stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，网络 channel 可配合 selector 实现多路复用\n* 二者均为全双工，即读写可以同时进行\n\n\n\n### 5.2 IO 模型\n\n同步阻塞、同步非阻塞、同步多路复用、异步阻塞（没有此情况）、异步非阻塞\n\n* 同步：线程自己去获取结果（一个线程）\n* 异步：线程自己不去获取结果，而是由其它线程送结果（至少两个线程）\n\n\n\n当调用一次 channel.read 或 stream.read 后，会切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：\n\n* 等待数据阶段\n* 复制数据阶段\n\n![](img/0033.png)\n\n* 阻塞 IO\n\n  ![](img/0039.png)\n\n* 非阻塞  IO\n\n  ![](img/0035.png)\n\n* 多路复用\n\n  ![](img/0038.png)\n\n* 信号驱动\n\n* 异步 IO\n\n  ![](img/0037.png)\n\n* 阻塞 IO vs 多路复用\n\n  ![](img/0034.png)\n\n  ![](img/0036.png)\n\n#### 🔖 参考\n\nUNIX 网络编程 - 卷 I\n\n\n\n### 5.3 零拷贝\n\n#### 传统 IO 问题\n\n传统的 IO 将一个文件通过 socket 写出\n\n```java\nFile f = new File(\"helloword/data.txt\");\nRandomAccessFile file = new RandomAccessFile(file, \"r\");\n\nbyte[] buf = new byte[(int)f.length()];\nfile.read(buf);\n\nSocket socket = ...;\nsocket.getOutputStream().write(buf);\n```\n\n内部工作流程是这样的：\n\n![](img/0024.png)\n\n1. java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的**用户态**切换至**内核态**，去调用操作系统（Kernel）的读能力，将数据读入**内核缓冲区**。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu\n\n   > DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO\n\n2. 从**内核态**切换回**用户态**，将数据从**内核缓冲区**读入**用户缓冲区**（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA\n\n3. 调用 write 方法，这时将数据从**用户缓冲区**（byte[] buf）写入 **socket 缓冲区**，cpu 会参与拷贝\n\n4. 接下来要向网卡写数据，这项能力 java 又不具备，因此又得从**用户态**切换至**内核态**，调用操作系统的写能力，使用 DMA 将 **socket 缓冲区**的数据写入网卡，不会使用 cpu\n\n\n\n可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的\n\n* 用户态与内核态的切换发生了 3 次，这个操作比较重量级\n* 数据拷贝了共 4 次\n\n\n\n#### NIO 优化\n\n通过 DirectByteBuf \n\n* ByteBuffer.allocate(10)  HeapByteBuffer 使用的还是 java 内存\n* ByteBuffer.allocateDirect(10)  DirectByteBuffer 使用的是操作系统内存\n\n![](img/0025.png)\n\n大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用\n\n* 这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写\n* java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步\n  * DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列\n  * 通过专门线程访问引用队列，根据虚引用释放堆外内存\n* 减少了一次数据拷贝，用户态与内核态的切换次数没有减少\n\n\n\n进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo/transferFrom 方法拷贝数据\n\n![](img/0026.png)\n\n1. java 调用 transferTo 方法后，要从 java 程序的**用户态**切换至**内核态**，使用 DMA将数据读入**内核缓冲区**，不会使用 cpu\n2. 数据从**内核缓冲区**传输到 **socket 缓冲区**，cpu 会参与拷贝\n3. 最后使用 DMA 将 **socket 缓冲区**的数据写入网卡，不会使用 cpu\n\n可以看到\n\n* 只发生了一次用户态与内核态的切换\n* 数据拷贝了 3 次\n\n\n\n进一步优化（linux 2.4）\n\n![](img/0027.png)\n\n1. java 调用 transferTo 方法后，要从 java 程序的**用户态**切换至**内核态**，使用 DMA将数据读入**内核缓冲区**，不会使用 cpu\n2. 只会将一些 offset 和 length 信息拷入 **socket 缓冲区**，几乎无消耗\n3. 使用 DMA 将 **内核缓冲区**的数据写入网卡，不会使用 cpu\n\n整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有\n\n* 更少的用户态与内核态的切换\n* 不利用 cpu 计算，减少 cpu 缓存伪共享\n* 零拷贝适合小文件传输\n\n\n\n### 5.3 AIO\n\nAIO 用来解决数据复制阶段的阻塞问题\n\n* 同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置\n* 异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果\n\n> 异步模型需要底层操作系统（Kernel）提供支持\n>\n> * Windows 系统通过 IOCP 实现了真正的异步 IO\n> * Linux 系统异步 IO 在 2.6 版本引入，但其底层实现还是用多路复用模拟了异步 IO，性能没有优势\n\n\n\n#### 文件 AIO\n\n先来看看 AsynchronousFileChannel\n\n```java\n@Slf4j\npublic class AioDemo1 {\n    public static void main(String[] args) throws IOException {\n        try{\n            AsynchronousFileChannel s = \n                AsynchronousFileChannel.open(\n                \tPaths.get(\"1.txt\"), StandardOpenOption.READ);\n            ByteBuffer buffer = ByteBuffer.allocate(2);\n            log.debug(\"begin...\");\n            s.read(buffer, 0, null, new CompletionHandler<Integer, ByteBuffer>() {\n                @Override\n                public void completed(Integer result, ByteBuffer attachment) {\n                    log.debug(\"read completed...{}\", result);\n                    buffer.flip();\n                    debug(buffer);\n                }\n\n                @Override\n                public void failed(Throwable exc, ByteBuffer attachment) {\n                    log.debug(\"read failed...\");\n                }\n            });\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        log.debug(\"do other things...\");\n        System.in.read();\n    }\n}\n```\n\n输出\n\n```\n13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - begin...\n13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - do other things...\n13:44:56 [DEBUG] [Thread-5] c.i.aio.AioDemo1 - read completed...2\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 0d                                           |a.              |\n+--------+-------------------------------------------------+----------------+\n```\n\n可以看到\n\n* 响应文件读取成功的是另一个线程 Thread-5\n* 主线程并没有 IO 操作阻塞\n\n\n\n#### 💡 守护线程\n\n默认文件 AIO 使用的线程都是守护线程，所以最后要执行 `System.in.read()` 以避免守护线程意外结束\n\n\n\n#### 网络 AIO\n\n```java\npublic class AioServer {\n    public static void main(String[] args) throws IOException {\n        AsynchronousServerSocketChannel ssc = AsynchronousServerSocketChannel.open();\n        ssc.bind(new InetSocketAddress(8080));\n        ssc.accept(null, new AcceptHandler(ssc));\n        System.in.read();\n    }\n\n    private static void closeChannel(AsynchronousSocketChannel sc) {\n        try {\n            System.out.printf(\"[%s] %s close\\n\", Thread.currentThread().getName(), sc.getRemoteAddress());\n            sc.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static class ReadHandler implements CompletionHandler<Integer, ByteBuffer> {\n        private final AsynchronousSocketChannel sc;\n\n        public ReadHandler(AsynchronousSocketChannel sc) {\n            this.sc = sc;\n        }\n\n        @Override\n        public void completed(Integer result, ByteBuffer attachment) {\n            try {\n                if (result == -1) {\n                    closeChannel(sc);\n                    return;\n                }\n                System.out.printf(\"[%s] %s read\\n\", Thread.currentThread().getName(), sc.getRemoteAddress());\n                attachment.flip();\n                System.out.println(Charset.defaultCharset().decode(attachment));\n                attachment.clear();\n                // 处理完第一个 read 时，需要再次调用 read 方法来处理下一个 read 事件\n                sc.read(attachment, attachment, this);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void failed(Throwable exc, ByteBuffer attachment) {\n            closeChannel(sc);\n            exc.printStackTrace();\n        }\n    }\n\n    private static class WriteHandler implements CompletionHandler<Integer, ByteBuffer> {\n        private final AsynchronousSocketChannel sc;\n\n        private WriteHandler(AsynchronousSocketChannel sc) {\n            this.sc = sc;\n        }\n\n        @Override\n        public void completed(Integer result, ByteBuffer attachment) {\n            // 如果作为附件的 buffer 还有内容，需要再次 write 写出剩余内容\n            if (attachment.hasRemaining()) {\n                sc.write(attachment);\n            }\n        }\n\n        @Override\n        public void failed(Throwable exc, ByteBuffer attachment) {\n            exc.printStackTrace();\n            closeChannel(sc);\n        }\n    }\n\n    private static class AcceptHandler implements CompletionHandler<AsynchronousSocketChannel, Object> {\n        private final AsynchronousServerSocketChannel ssc;\n\n        public AcceptHandler(AsynchronousServerSocketChannel ssc) {\n            this.ssc = ssc;\n        }\n\n        @Override\n        public void completed(AsynchronousSocketChannel sc, Object attachment) {\n            try {\n                System.out.printf(\"[%s] %s connected\\n\", Thread.currentThread().getName(), sc.getRemoteAddress());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            ByteBuffer buffer = ByteBuffer.allocate(16);\n            // 读事件由 ReadHandler 处理\n            sc.read(buffer, buffer, new ReadHandler(sc));\n            // 写事件由 WriteHandler 处理\n            sc.write(Charset.defaultCharset().encode(\"server hello!\"), ByteBuffer.allocate(16), new WriteHandler(sc));\n            // 处理完第一个 accpet 时，需要再次调用 accept 方法来处理下一个 accept 事件\n            ssc.accept(null, this);\n        }\n\n        @Override\n        public void failed(Throwable exc, Object attachment) {\n            exc.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n\n\n\n","source":"_posts/2023-05-06-Netty01-nio.md","raw":"---\ntitle: Netty01-nio\ndate: 2023-05-06 21:15:53\ntags: \n- Netty\n- programing\n- Java\ncategories: Netty\n---\n\n该笔记是B站黑马的Netty视频的配套笔记1。\n<!-- more -->\n# 一. NIO 基础\n\nnon-blocking io 非阻塞 IO\n\n## 1. 三大组件\n\n### 1.1 Channel & Buffer\n\nchannel 有一点类似于 stream，它就是读写数据的**双向通道**，可以从 channel 将数据读入 buffer，也可以将 buffer 的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel 比 stream 更为底层\n\n```mermaid\ngraph LR\nchannel --> buffer\nbuffer --> channel\n```\n\n常见的 Channel 有\n\n* FileChannel\n* DatagramChannel\n* SocketChannel\n* ServerSocketChannel\n\n\n\nbuffer 则用来缓冲读写数据，常见的 buffer 有\n\n* ByteBuffer\n  * MappedByteBuffer\n  * DirectByteBuffer\n  * HeapByteBuffer\n* ShortBuffer\n* IntBuffer\n* LongBuffer\n* FloatBuffer\n* DoubleBuffer\n* CharBuffer\n\n\n\n### 1.2 Selector\n\nselector 单从字面意思不好理解，需要结合服务器的设计演化来理解它的用途\n\n#### 多线程版设计\n\n```mermaid\ngraph TD\nsubgraph 多线程版\nt1(thread) --> s1(socket1)\nt2(thread) --> s2(socket2)\nt3(thread) --> s3(socket3)\nend\n```\n#### ⚠️ 多线程版缺点\n\n* 内存占用高\n* 线程上下文切换成本高\n* 只适合连接数少的场景\n\n\n\n\n\n\n\n#### 线程池版设计\n\n```mermaid\ngraph TD\nsubgraph 线程池版\nt4(thread) --> s4(socket1)\nt5(thread) --> s5(socket2)\nt4(thread) -.-> s6(socket3)\nt5(thread) -.-> s7(socket4)\nend\n```\n#### ⚠️ 线程池版缺点\n\n* 阻塞模式下，线程仅能处理一个 socket 连接\n* 仅适合短连接场景\n\n\n\n\n\n\n\n\n\n#### selector 版设计\n\nselector 的作用就是配合一个线程来管理多个 channel，获取这些 channel 上发生的事件，这些 channel 工作在非阻塞模式下，不会让线程吊死在一个 channel 上。适合连接数特别多，但流量低的场景（low traffic）\n\n```mermaid\ngraph TD\nsubgraph selector 版\nthread --> selector\nselector --> c1(channel)\nselector --> c2(channel)\nselector --> c3(channel)\nend\n```\n\n\n\n调用 selector 的 select() 会阻塞直到 channel 发生了读写就绪事件，这些事件发生，select 方法就会返回这些事件交给 thread 来处理\n\n\n\n\n\n\n\n## 2. ByteBuffer\n\n有一普通文本文件 data.txt，内容为\n\n```\n1234567890abcd\n```\n\n使用 FileChannel 来读取文件内容\n\n```java\n@Slf4j\npublic class ChannelDemo1 {\n    public static void main(String[] args) {\n        try (RandomAccessFile file = new RandomAccessFile(\"helloword/data.txt\", \"rw\")) {\n            FileChannel channel = file.getChannel();\n            ByteBuffer buffer = ByteBuffer.allocate(10);\n            do {\n                // 向 buffer 写入\n                int len = channel.read(buffer);\n                log.debug(\"读到字节数：{}\", len);\n                if (len == -1) {\n                    break;\n                }\n                // 切换 buffer 读模式\n                buffer.flip();\n                while(buffer.hasRemaining()) {\n                    log.debug(\"{}\", (char)buffer.get());\n                }\n                // 切换 buffer 写模式\n                buffer.clear();\n            } while (true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n输出\n\n```\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：10\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 1\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 2\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 3\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 4\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 5\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 6\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 7\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 8\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 9\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 0\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：4\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - a\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - b\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - c\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - d\n10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：-1\n```\n\n\n\n### 2.1  ByteBuffer 正确使用姿势\n\n1. 向 buffer 写入数据，例如调用 channel.read(buffer)\n2. 调用 flip() 切换至**读模式**\n3. 从 buffer 读取数据，例如调用 buffer.get()\n4. 调用 clear() 或 compact() 切换至**写模式**\n5. 重复 1~4 步骤\n\n\n\n### 2.2 ByteBuffer 结构\n\nByteBuffer 有以下重要属性\n\n* capacity\n* position\n* limit\n\n一开始\n\n![](img/0021.png)\n\n写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态\n\n![](img/0018.png)\n\nflip 动作发生后，position 切换为读取位置，limit 切换为读取限制\n\n![](img/0019.png)\n\n读取 4 个字节后，状态\n\n![](img/0020.png)\n\nclear 动作发生后，状态\n\n![](img/0021.png)\n\ncompact 方法，是把未读完的部分向前压缩，然后切换至写模式\n\n![](img/0022.png)\n\n\n\n#### 💡 调试工具类\n\n```java\npublic class ByteBufferUtil {\n    private static final char[] BYTE2CHAR = new char[256];\n    private static final char[] HEXDUMP_TABLE = new char[256 * 4];\n    private static final String[] HEXPADDING = new String[16];\n    private static final String[] HEXDUMP_ROWPREFIXES = new String[65536 >>> 4];\n    private static final String[] BYTE2HEX = new String[256];\n    private static final String[] BYTEPADDING = new String[16];\n\n    static {\n        final char[] DIGITS = \"0123456789abcdef\".toCharArray();\n        for (int i = 0; i < 256; i++) {\n            HEXDUMP_TABLE[i << 1] = DIGITS[i >>> 4 & 0x0F];\n            HEXDUMP_TABLE[(i << 1) + 1] = DIGITS[i & 0x0F];\n        }\n\n        int i;\n\n        // Generate the lookup table for hex dump paddings\n        for (i = 0; i < HEXPADDING.length; i++) {\n            int padding = HEXPADDING.length - i;\n            StringBuilder buf = new StringBuilder(padding * 3);\n            for (int j = 0; j < padding; j++) {\n                buf.append(\"   \");\n            }\n            HEXPADDING[i] = buf.toString();\n        }\n\n        // Generate the lookup table for the start-offset header in each row (up to 64KiB).\n        for (i = 0; i < HEXDUMP_ROWPREFIXES.length; i++) {\n            StringBuilder buf = new StringBuilder(12);\n            buf.append(NEWLINE);\n            buf.append(Long.toHexString(i << 4 & 0xFFFFFFFFL | 0x100000000L));\n            buf.setCharAt(buf.length() - 9, '|');\n            buf.append('|');\n            HEXDUMP_ROWPREFIXES[i] = buf.toString();\n        }\n\n        // Generate the lookup table for byte-to-hex-dump conversion\n        for (i = 0; i < BYTE2HEX.length; i++) {\n            BYTE2HEX[i] = ' ' + StringUtil.byteToHexStringPadded(i);\n        }\n\n        // Generate the lookup table for byte dump paddings\n        for (i = 0; i < BYTEPADDING.length; i++) {\n            int padding = BYTEPADDING.length - i;\n            StringBuilder buf = new StringBuilder(padding);\n            for (int j = 0; j < padding; j++) {\n                buf.append(' ');\n            }\n            BYTEPADDING[i] = buf.toString();\n        }\n\n        // Generate the lookup table for byte-to-char conversion\n        for (i = 0; i < BYTE2CHAR.length; i++) {\n            if (i <= 0x1f || i >= 0x7f) {\n                BYTE2CHAR[i] = '.';\n            } else {\n                BYTE2CHAR[i] = (char) i;\n            }\n        }\n    }\n\n    /**\n     * 打印所有内容\n     * @param buffer\n     */\n    public static void debugAll(ByteBuffer buffer) {\n        int oldlimit = buffer.limit();\n        buffer.limit(buffer.capacity());\n        StringBuilder origin = new StringBuilder(256);\n        appendPrettyHexDump(origin, buffer, 0, buffer.capacity());\n        System.out.println(\"+--------+-------------------- all ------------------------+----------------+\");\n        System.out.printf(\"position: [%d], limit: [%d]\\n\", buffer.position(), oldlimit);\n        System.out.println(origin);\n        buffer.limit(oldlimit);\n    }\n\n    /**\n     * 打印可读取内容\n     * @param buffer\n     */\n    public static void debugRead(ByteBuffer buffer) {\n        StringBuilder builder = new StringBuilder(256);\n        appendPrettyHexDump(builder, buffer, buffer.position(), buffer.limit() - buffer.position());\n        System.out.println(\"+--------+-------------------- read -----------------------+----------------+\");\n        System.out.printf(\"position: [%d], limit: [%d]\\n\", buffer.position(), buffer.limit());\n        System.out.println(builder);\n    }\n\n    private static void appendPrettyHexDump(StringBuilder dump, ByteBuffer buf, int offset, int length) {\n        if (isOutOfBounds(offset, length, buf.capacity())) {\n            throw new IndexOutOfBoundsException(\n                    \"expected: \" + \"0 <= offset(\" + offset + \") <= offset + length(\" + length\n                            + \") <= \" + \"buf.capacity(\" + buf.capacity() + ')');\n        }\n        if (length == 0) {\n            return;\n        }\n        dump.append(\n                \"         +-------------------------------------------------+\" +\n                        NEWLINE + \"         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\" +\n                        NEWLINE + \"+--------+-------------------------------------------------+----------------+\");\n\n        final int startIndex = offset;\n        final int fullRows = length >>> 4;\n        final int remainder = length & 0xF;\n\n        // Dump the rows which have 16 bytes.\n        for (int row = 0; row < fullRows; row++) {\n            int rowStartIndex = (row << 4) + startIndex;\n\n            // Per-row prefix.\n            appendHexDumpRowPrefix(dump, row, rowStartIndex);\n\n            // Hex dump\n            int rowEndIndex = rowStartIndex + 16;\n            for (int j = rowStartIndex; j < rowEndIndex; j++) {\n                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);\n            }\n            dump.append(\" |\");\n\n            // ASCII dump\n            for (int j = rowStartIndex; j < rowEndIndex; j++) {\n                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);\n            }\n            dump.append('|');\n        }\n\n        // Dump the last row which has less than 16 bytes.\n        if (remainder != 0) {\n            int rowStartIndex = (fullRows << 4) + startIndex;\n            appendHexDumpRowPrefix(dump, fullRows, rowStartIndex);\n\n            // Hex dump\n            int rowEndIndex = rowStartIndex + remainder;\n            for (int j = rowStartIndex; j < rowEndIndex; j++) {\n                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);\n            }\n            dump.append(HEXPADDING[remainder]);\n            dump.append(\" |\");\n\n            // Ascii dump\n            for (int j = rowStartIndex; j < rowEndIndex; j++) {\n                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);\n            }\n            dump.append(BYTEPADDING[remainder]);\n            dump.append('|');\n        }\n\n        dump.append(NEWLINE +\n                \"+--------+-------------------------------------------------+----------------+\");\n    }\n\n    private static void appendHexDumpRowPrefix(StringBuilder dump, int row, int rowStartIndex) {\n        if (row < HEXDUMP_ROWPREFIXES.length) {\n            dump.append(HEXDUMP_ROWPREFIXES[row]);\n        } else {\n            dump.append(NEWLINE);\n            dump.append(Long.toHexString(rowStartIndex & 0xFFFFFFFFL | 0x100000000L));\n            dump.setCharAt(dump.length() - 9, '|');\n            dump.append('|');\n        }\n    }\n\n    public static short getUnsignedByte(ByteBuffer buffer, int index) {\n        return (short) (buffer.get(index) & 0xFF);\n    }\n}\n```\n\n\n\n### 2.3 ByteBuffer 常见方法\n\n#### 分配空间\n\n可以使用 allocate 方法为 ByteBuffer 分配空间，其它 buffer 类也有该方法\n\n```java\nBytebuffer buf = ByteBuffer.allocate(16);\n```\n\n\n\n#### 向 buffer 写入数据\n\n有两种办法\n\n* 调用 channel 的 read 方法\n* 调用 buffer 自己的 put 方法\n\n```java\nint readBytes = channel.read(buf);\n```\n\n和\n\n```java\nbuf.put((byte)127);\n```\n\n\n\n#### 从 buffer 读取数据\n\n同样有两种办法\n\n* 调用 channel 的 write 方法\n* 调用 buffer 自己的 get 方法\n\n```java\nint writeBytes = channel.write(buf);\n```\n\n和\n\n```java\nbyte b = buf.get();\n```\n\nget 方法会让 position 读指针向后走，如果想重复读取数据\n\n* 可以调用 rewind 方法将 position 重新置为 0\n* 或者调用 get(int i) 方法获取索引 i 的内容，它不会移动读指针\n\n\n\n#### mark 和 reset\n\nmark 是在读取时，做一个标记，即使 position 改变，只要调用 reset 就能回到 mark 的位置\n\n> **注意**\n>\n> rewind 和 flip 都会清除 mark 位置\n\n\n\n#### 字符串与 ByteBuffer 互转\n\n```java\nByteBuffer buffer1 = StandardCharsets.UTF_8.encode(\"你好\");\nByteBuffer buffer2 = Charset.forName(\"utf-8\").encode(\"你好\");\n\ndebug(buffer1);\ndebug(buffer2);\n\nCharBuffer buffer3 = StandardCharsets.UTF_8.decode(buffer1);\nSystem.out.println(buffer3.getClass());\nSystem.out.println(buffer3.toString());\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| e4 bd a0 e5 a5 bd                               |......          |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| e4 bd a0 e5 a5 bd                               |......          |\n+--------+-------------------------------------------------+----------------+\nclass java.nio.HeapCharBuffer\n你好\n```\n\n\n\n#### ⚠️ Buffer 的线程安全\n\n> Buffer 是**非线程安全的**\n\n\n\n### 2.4 Scattering Reads\n\n分散读取，有一个文本文件 3parts.txt\n\n```\nonetwothree\n```\n\n使用如下方式读取，可以将数据填充至多个 buffer\n\n```java\ntry (RandomAccessFile file = new RandomAccessFile(\"helloword/3parts.txt\", \"rw\")) {\n    FileChannel channel = file.getChannel();\n    ByteBuffer a = ByteBuffer.allocate(3);\n    ByteBuffer b = ByteBuffer.allocate(3);\n    ByteBuffer c = ByteBuffer.allocate(5);\n    channel.read(new ByteBuffer[]{a, b, c});\n    a.flip();\n    b.flip();\n    c.flip();\n    debug(a);\n    debug(b);\n    debug(c);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n结果\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6f 6e 65                                        |one             |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 74 77 6f                                        |two             |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 74 68 72 65 65                                  |three           |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n### 2.5 Gathering Writes\n\n使用如下方式写入，可以将多个 buffer 的数据填充至 channel\n\n```java\ntry (RandomAccessFile file = new RandomAccessFile(\"helloword/3parts.txt\", \"rw\")) {\n    FileChannel channel = file.getChannel();\n    ByteBuffer d = ByteBuffer.allocate(4);\n    ByteBuffer e = ByteBuffer.allocate(4);\n    channel.position(11);\n\n    d.put(new byte[]{'f', 'o', 'u', 'r'});\n    e.put(new byte[]{'f', 'i', 'v', 'e'});\n    d.flip();\n    e.flip();\n    debug(d);\n    debug(e);\n    channel.write(new ByteBuffer[]{d, e});\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 6f 75 72                                     |four            |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 69 76 65                                     |five            |\n+--------+-------------------------------------------------+----------------+\n```\n\n文件内容\n\n```\nonetwothreefourfive\n```\n\n\n\n### 2.6 练习\n\n网络上有多条数据发送给服务端，数据之间使用 \\n 进行分隔\n但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为\n\n* Hello,world\\n\n* I'm zhangsan\\n\n* How are you?\\n\n\n变成了下面的两个 byteBuffer (黏包，半包)\n\n* Hello,world\\nI'm zhangsan\\nHo\n* w are you?\\n\n\n现在要求你编写程序，将错乱的数据恢复成原始的按 \\n 分隔的数据\n\n```java\npublic static void main(String[] args) {\n    ByteBuffer source = ByteBuffer.allocate(32);\n    //                     11            24\n    source.put(\"Hello,world\\nI'm zhangsan\\nHo\".getBytes());\n    split(source);\n\n    source.put(\"w are you?\\nhaha!\\n\".getBytes());\n    split(source);\n}\n\nprivate static void split(ByteBuffer source) {\n    source.flip();\n    int oldLimit = source.limit();\n    for (int i = 0; i < oldLimit; i++) {\n        if (source.get(i) == '\\n') {\n            System.out.println(i);\n            ByteBuffer target = ByteBuffer.allocate(i + 1 - source.position());\n            // 0 ~ limit\n            source.limit(i + 1);\n            target.put(source); // 从source 读，向 target 写\n            debugAll(target);\n            source.limit(oldLimit);\n        }\n    }\n    source.compact();\n}\n```\n\n\n\n## 3. 文件编程\n\n### 3.1 FileChannel\n\n#### ⚠️ FileChannel 工作模式\n\n> FileChannel 只能工作在阻塞模式下\n\n\n\n#### 获取\n\n不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法\n\n* 通过 FileInputStream 获取的 channel 只能读\n* 通过 FileOutputStream 获取的 channel 只能写\n* 通过 RandomAccessFile 是否能读写根据构造 RandomAccessFile 时的读写模式决定\n\n\n\n#### 读取\n\n会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾\n\n```java\nint readBytes = channel.read(buffer);\n```\n\n\n\n#### 写入\n\n写入的正确姿势如下， SocketChannel\n\n```java\nByteBuffer buffer = ...;\nbuffer.put(...); // 存入数据\nbuffer.flip();   // 切换读模式\n\nwhile(buffer.hasRemaining()) {\n    channel.write(buffer);\n}\n```\n\n在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel\n\n\n\n#### 关闭\n\nchannel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法\n\n\n\n#### 位置\n\n获取当前位置\n\n```java\nlong pos = channel.position();\n```\n\n设置当前位置\n\n```java\nlong newPos = ...;\nchannel.position(newPos);\n```\n\n设置当前位置时，如果设置为文件的末尾\n\n* 这时读取会返回 -1 \n* 这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）\n\n\n\n#### 大小\n\n使用 size 方法获取文件的大小\n\n\n\n#### 强制写入\n\n操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘。可以调用 force(true)  方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘\n\n\n\n### 3.2 两个 Channel 传输数据\n\n```java\nString FROM = \"helloword/data.txt\";\nString TO = \"helloword/to.txt\";\nlong start = System.nanoTime();\ntry (FileChannel from = new FileInputStream(FROM).getChannel();\n     FileChannel to = new FileOutputStream(TO).getChannel();\n    ) {\n    from.transferTo(0, from.size(), to);\n} catch (IOException e) {\n    e.printStackTrace();\n}\nlong end = System.nanoTime();\nSystem.out.println(\"transferTo 用时：\" + (end - start) / 1000_000.0);\n```\n\n输出\n\n```\ntransferTo 用时：8.2011\n```\n\n\n\n超过 2g 大小的文件传输\n\n```java\npublic class TestFileChannelTransferTo {\n    public static void main(String[] args) {\n        try (\n                FileChannel from = new FileInputStream(\"data.txt\").getChannel();\n                FileChannel to = new FileOutputStream(\"to.txt\").getChannel();\n        ) {\n            // 效率高，底层会利用操作系统的零拷贝进行优化\n            long size = from.size();\n            // left 变量代表还剩余多少字节\n            for (long left = size; left > 0; ) {\n                System.out.println(\"position:\" + (size - left) + \" left:\" + left);\n                left -= from.transferTo((size - left), left, to);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n实际传输一个超大文件\n\n```\nposition:0 left:7769948160\nposition:2147483647 left:5622464513\nposition:4294967294 left:3474980866\nposition:6442450941 left:1327497219\n```\n\n\n\n### 3.3 Path\n\njdk7 引入了 Path 和 Paths 类\n\n* Path 用来表示文件路径\n* Paths 是工具类，用来获取 Path 实例\n\n```java\nPath source = Paths.get(\"1.txt\"); // 相对路径 使用 user.dir 环境变量来定位 1.txt\n\nPath source = Paths.get(\"d:\\\\1.txt\"); // 绝对路径 代表了  d:\\1.txt\n\nPath source = Paths.get(\"d:/1.txt\"); // 绝对路径 同样代表了  d:\\1.txt\n\nPath projects = Paths.get(\"d:\\\\data\", \"projects\"); // 代表了  d:\\data\\projects\n```\n\n* `.` 代表了当前路径\n* `..` 代表了上一级路径\n\n例如目录结构如下\n\n```\nd:\n\t|- data\n\t\t|- projects\n\t\t\t|- a\n\t\t\t|- b\n```\n\n代码\n\n```java\nPath path = Paths.get(\"d:\\\\data\\\\projects\\\\a\\\\..\\\\b\");\nSystem.out.println(path);\nSystem.out.println(path.normalize()); // 正常化路径\n```\n\n会输出\n\n```\nd:\\data\\projects\\a\\..\\b\nd:\\data\\projects\\b\n```\n\n\n\n### 3.4 Files\n\n检查文件是否存在\n\n```java\nPath path = Paths.get(\"helloword/data.txt\");\nSystem.out.println(Files.exists(path));\n```\n\n\n\n创建一级目录\n\n```java\nPath path = Paths.get(\"helloword/d1\");\nFiles.createDirectory(path);\n```\n\n* 如果目录已存在，会抛异常 FileAlreadyExistsException\n* 不能一次创建多级目录，否则会抛异常 NoSuchFileException\n\n\n\n创建多级目录用\n\n```java\nPath path = Paths.get(\"helloword/d1/d2\");\nFiles.createDirectories(path);\n```\n\n\n\n拷贝文件\n\n```java\nPath source = Paths.get(\"helloword/data.txt\");\nPath target = Paths.get(\"helloword/target.txt\");\n\nFiles.copy(source, target);\n```\n\n* 如果文件已存在，会抛异常 FileAlreadyExistsException\n\n如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制\n\n```java\nFiles.copy(source, target, StandardCopyOption.REPLACE_EXISTING);\n```\n\n\n\n移动文件\n\n```java\nPath source = Paths.get(\"helloword/data.txt\");\nPath target = Paths.get(\"helloword/data.txt\");\n\nFiles.move(source, target, StandardCopyOption.ATOMIC_MOVE);\n```\n\n* StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性\n\n\n\n删除文件\n\n```java\nPath target = Paths.get(\"helloword/target.txt\");\n\nFiles.delete(target);\n```\n\n* 如果文件不存在，会抛异常 NoSuchFileException\n\n\n\n删除目录\n\n```java\nPath target = Paths.get(\"helloword/d1\");\n\nFiles.delete(target);\n```\n\n* 如果目录还有内容，会抛异常 DirectoryNotEmptyException\n\n\n\n遍历目录文件\n\n```java\npublic static void main(String[] args) throws IOException {\n    Path path = Paths.get(\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91\");\n    AtomicInteger dirCount = new AtomicInteger();\n    AtomicInteger fileCount = new AtomicInteger();\n    Files.walkFileTree(path, new SimpleFileVisitor<Path>(){\n        @Override\n        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) \n            throws IOException {\n            System.out.println(dir);\n            dirCount.incrementAndGet();\n            return super.preVisitDirectory(dir, attrs);\n        }\n\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) \n            throws IOException {\n            System.out.println(file);\n            fileCount.incrementAndGet();\n            return super.visitFile(file, attrs);\n        }\n    });\n    System.out.println(dirCount); // 133\n    System.out.println(fileCount); // 1479\n}\n```\n\n\n\n统计 jar 的数目\n\n```java\nPath path = Paths.get(\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91\");\nAtomicInteger fileCount = new AtomicInteger();\nFiles.walkFileTree(path, new SimpleFileVisitor<Path>(){\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) \n        throws IOException {\n        if (file.toFile().getName().endsWith(\".jar\")) {\n            fileCount.incrementAndGet();\n        }\n        return super.visitFile(file, attrs);\n    }\n});\nSystem.out.println(fileCount); // 724\n```\n\n\n\n删除多级目录\n\n```java\nPath path = Paths.get(\"d:\\\\a\");\nFiles.walkFileTree(path, new SimpleFileVisitor<Path>(){\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) \n        throws IOException {\n        Files.delete(file);\n        return super.visitFile(file, attrs);\n    }\n\n    @Override\n    public FileVisitResult postVisitDirectory(Path dir, IOException exc) \n        throws IOException {\n        Files.delete(dir);\n        return super.postVisitDirectory(dir, exc);\n    }\n});\n```\n\n\n\n#### ⚠️ 删除很危险\n\n> 删除是危险操作，确保要递归删除的文件夹没有重要内容\n\n\n\n拷贝多级目录\n\n```java\nlong start = System.currentTimeMillis();\nString source = \"D:\\\\Snipaste-1.16.2-x64\";\nString target = \"D:\\\\Snipaste-1.16.2-x64aaa\";\n\nFiles.walk(Paths.get(source)).forEach(path -> {\n    try {\n        String targetName = path.toString().replace(source, target);\n        // 是目录\n        if (Files.isDirectory(path)) {\n            Files.createDirectory(Paths.get(targetName));\n        }\n        // 是普通文件\n        else if (Files.isRegularFile(path)) {\n            Files.copy(path, Paths.get(targetName));\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n});\nlong end = System.currentTimeMillis();\nSystem.out.println(end - start);\n```\n\n\n\n\n\n## 4. 网络编程\n\n### 4.1 非阻塞 vs 阻塞\n\n#### 阻塞\n\n* 阻塞模式下，相关方法都会导致线程暂停\n  * ServerSocketChannel.accept 会在没有连接建立时让线程暂停\n  * SocketChannel.read 会在没有数据可读时让线程暂停\n  * 阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置\n* 单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持\n* 但多线程下，有新的问题，体现在以下方面\n  * 32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低\n  * 可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接\n\n\n\n服务器端\n\n```java\n// 使用 nio 来理解阻塞模式, 单线程\n// 0. ByteBuffer\nByteBuffer buffer = ByteBuffer.allocate(16);\n// 1. 创建了服务器\nServerSocketChannel ssc = ServerSocketChannel.open();\n\n// 2. 绑定监听端口\nssc.bind(new InetSocketAddress(8080));\n\n// 3. 连接集合\nList<SocketChannel> channels = new ArrayList<>();\nwhile (true) {\n    // 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信\n    log.debug(\"connecting...\");\n    SocketChannel sc = ssc.accept(); // 阻塞方法，线程停止运行\n    log.debug(\"connected... {}\", sc);\n    channels.add(sc);\n    for (SocketChannel channel : channels) {\n        // 5. 接收客户端发送的数据\n        log.debug(\"before read... {}\", channel);\n        channel.read(buffer); // 阻塞方法，线程停止运行\n        buffer.flip();\n        debugRead(buffer);\n        buffer.clear();\n        log.debug(\"after read...{}\", channel);\n    }\n}\n```\n\n客户端\n\n```java\nSocketChannel sc = SocketChannel.open();\nsc.connect(new InetSocketAddress(\"localhost\", 8080));\nSystem.out.println(\"waiting...\");\n```\n\n\n\n#### 非阻塞\n\n* 非阻塞模式下，相关方法都会不会让线程暂停\n  * 在 ServerSocketChannel.accept 在没有连接建立时，会返回 null，继续运行\n  * SocketChannel.read 在没有数据可读时，会返回 0，但线程不必阻塞，可以去执行其它 SocketChannel 的 read 或是去执行 ServerSocketChannel.accept \n  * 写数据时，线程只是等待数据写入 Channel 即可，无需等 Channel 通过网络把数据发送出去\n* 但非阻塞模式下，即使没有连接建立，和可读数据，线程仍然在不断运行，白白浪费了 cpu\n* 数据复制过程中，线程实际还是阻塞的（AIO 改进的地方）\n\n\n\n服务器端，客户端代码不变\n\n```java\n// 使用 nio 来理解非阻塞模式, 单线程\n// 0. ByteBuffer\nByteBuffer buffer = ByteBuffer.allocate(16);\n// 1. 创建了服务器\nServerSocketChannel ssc = ServerSocketChannel.open();\nssc.configureBlocking(false); // 非阻塞模式\n// 2. 绑定监听端口\nssc.bind(new InetSocketAddress(8080));\n// 3. 连接集合\nList<SocketChannel> channels = new ArrayList<>();\nwhile (true) {\n    // 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信\n    SocketChannel sc = ssc.accept(); // 非阻塞，线程还会继续运行，如果没有连接建立，但sc是null\n    if (sc != null) {\n        log.debug(\"connected... {}\", sc);\n        sc.configureBlocking(false); // 非阻塞模式\n        channels.add(sc);\n    }\n    for (SocketChannel channel : channels) {\n        // 5. 接收客户端发送的数据\n        int read = channel.read(buffer);// 非阻塞，线程仍然会继续运行，如果没有读到数据，read 返回 0\n        if (read > 0) {\n            buffer.flip();\n            debugRead(buffer);\n            buffer.clear();\n            log.debug(\"after read...{}\", channel);\n        }\n    }\n}\n```\n\n\n\n#### 多路复用\n\n单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用\n\n* 多路复用仅针对网络 IO、普通文件 IO 没法利用多路复用\n* 如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证\n  * 有可连接事件时才去连接\n  * 有可读事件才去读取\n  * 有可写事件才去写入\n    * 限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件\n\n\n\n### 4.2 Selector\n\n```mermaid\ngraph TD\nsubgraph selector 版\nthread --> selector\nselector --> c1(channel)\nselector --> c2(channel)\nselector --> c3(channel)\nend\n```\n\n\n\n好处\n\n* 一个线程配合 selector 就可以监控多个 channel 的事件，事件发生线程才去处理。避免非阻塞模式下所做无用功\n* 让这个线程能够被充分利用\n* 节约了线程的数量\n* 减少了线程上下文切换\n\n\n\n#### 创建\n\n```java\nSelector selector = Selector.open();\n```\n\n\n\n#### 绑定 Channel 事件\n\n也称之为注册事件，绑定的事件 selector 才会关心 \n\n```java\nchannel.configureBlocking(false);\nSelectionKey key = channel.register(selector, 绑定事件);\n```\n\n* channel 必须工作在非阻塞模式\n* FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用\n* 绑定的事件类型可以有\n  * connect - 客户端连接成功时触发\n  * accept - 服务器端成功接受连接时触发\n  * read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况\n  * write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况\n\n\n\n#### 监听 Channel 事件\n\n可以通过下面三种方法来监听是否有事件发生，方法的返回值代表有多少 channel 发生了事件\n\n方法1，阻塞直到绑定事件发生\n\n```java\nint count = selector.select();\n```\n\n\n\n方法2，阻塞直到绑定事件发生，或是超时（时间单位为 ms）\n\n```java\nint count = selector.select(long timeout);\n```\n\n\n\n方法3，不会阻塞，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件\n\n```java\nint count = selector.selectNow();\n```\n\n\n\n#### 💡 select 何时不阻塞\n\n> * 事件发生时\n>   * 客户端发起连接请求，会触发 accept 事件\n>   * 客户端发送数据过来，客户端正常、异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件\n>   * channel 可写，会触发 write 事件\n>   * 在 linux 下 nio bug 发生时\n> * 调用 selector.wakeup()\n> * 调用 selector.close()\n> * selector 所在线程 interrupt\n\n\n\n### 4.3 处理 accept 事件\n\n客户端代码为\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        try (Socket socket = new Socket(\"localhost\", 8080)) {\n            System.out.println(socket);\n            socket.getOutputStream().write(\"world\".getBytes());\n            System.in.read();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n服务器端代码为\n\n```java\n@Slf4j\npublic class ChannelDemo6 {\n    public static void main(String[] args) {\n        try (ServerSocketChannel channel = ServerSocketChannel.open()) {\n            channel.bind(new InetSocketAddress(8080));\n            System.out.println(channel);\n            Selector selector = Selector.open();\n            channel.configureBlocking(false);\n            channel.register(selector, SelectionKey.OP_ACCEPT);\n\n            while (true) {\n                int count = selector.select();\n//                int count = selector.selectNow();\n                log.debug(\"select count: {}\", count);\n//                if(count <= 0) {\n//                    continue;\n//                }\n\n                // 获取所有事件\n                Set<SelectionKey> keys = selector.selectedKeys();\n\n                // 遍历所有事件，逐一处理\n                Iterator<SelectionKey> iter = keys.iterator();\n                while (iter.hasNext()) {\n                    SelectionKey key = iter.next();\n                    // 判断事件类型\n                    if (key.isAcceptable()) {\n                        ServerSocketChannel c = (ServerSocketChannel) key.channel();\n                        // 必须处理\n                        SocketChannel sc = c.accept();\n                        log.debug(\"{}\", sc);\n                    }\n                    // 处理完毕，必须将事件移除\n                    iter.remove();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n#### 💡 事件发生后能否不处理\n\n> 事件发生后，要么处理，要么取消（cancel），不能什么都不做，否则下次该事件仍会触发，这是因为 nio 底层使用的是水平触发\n\n\n\n### 4.4 处理 read 事件\n\n```java\n@Slf4j\npublic class ChannelDemo6 {\n    public static void main(String[] args) {\n        try (ServerSocketChannel channel = ServerSocketChannel.open()) {\n            channel.bind(new InetSocketAddress(8080));\n            System.out.println(channel);\n            Selector selector = Selector.open();\n            channel.configureBlocking(false);\n            channel.register(selector, SelectionKey.OP_ACCEPT);\n\n            while (true) {\n                int count = selector.select();\n//                int count = selector.selectNow();\n                log.debug(\"select count: {}\", count);\n//                if(count <= 0) {\n//                    continue;\n//                }\n\n                // 获取所有事件\n                Set<SelectionKey> keys = selector.selectedKeys();\n\n                // 遍历所有事件，逐一处理\n                Iterator<SelectionKey> iter = keys.iterator();\n                while (iter.hasNext()) {\n                    SelectionKey key = iter.next();\n                    // 判断事件类型\n                    if (key.isAcceptable()) {\n                        ServerSocketChannel c = (ServerSocketChannel) key.channel();\n                        // 必须处理\n                        SocketChannel sc = c.accept();\n                        sc.configureBlocking(false);\n                        sc.register(selector, SelectionKey.OP_READ);\n                        log.debug(\"连接已建立: {}\", sc);\n                    } else if (key.isReadable()) {\n                        SocketChannel sc = (SocketChannel) key.channel();\n                        ByteBuffer buffer = ByteBuffer.allocate(128);\n                        int read = sc.read(buffer);\n                        if(read == -1) {\n                            key.cancel();\n                            sc.close();\n                        } else {\n                            buffer.flip();\n                            debug(buffer);\n                        }\n                    }\n                    // 处理完毕，必须将事件移除\n                    iter.remove();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n开启两个客户端，修改一下发送文字，输出\n\n```\nsun.nio.ch.ServerSocketChannelImpl[/0:0:0:0:0:0:0:0:8080]\n21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1\n21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60367]\n21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 65 6c 6c 6f                                  |hello           |\n+--------+-------------------------------------------------+----------------+\n21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1\n21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60378]\n21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 6f 72 6c 64                                  |world           |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 💡 为何要 iter.remove()\n\n> 因为 select 在事件发生后，就会将相关的 key 放入 selectedKeys 集合，但不会在处理完后从 selectedKeys 集合中移除，需要我们自己编码删除。例如\n>\n> * 第一次触发了 ssckey 上的 accept 事件，没有移除 ssckey \n> * 第二次触发了 sckey 上的 read 事件，但这时 selectedKeys 中还有上次的 ssckey ，在处理时因为没有真正的 serverSocket 连上了，就会导致空指针异常\n\n\n\n#### 💡 cancel 的作用\n\n> cancel 会取消注册在 selector 上的 channel，并从 keys 集合中删除 key 后续不会再监听事件\n\n\n\n#### ⚠️  不处理边界的问题\n\n以前有同学写过这样的代码，思考注释中两个问题，以 bio 为例，其实 nio 道理是一样的\n\n```java\npublic class Server {\n    public static void main(String[] args) throws IOException {\n        ServerSocket ss=new ServerSocket(9000);\n        while (true) {\n            Socket s = ss.accept();\n            InputStream in = s.getInputStream();\n            // 这里这么写，有没有问题\n            byte[] arr = new byte[4];\n            while(true) {\n                int read = in.read(arr);\n                // 这里这么写，有没有问题\n                if(read == -1) {\n                    break;\n                }\n                System.out.println(new String(arr, 0, read));\n            }\n        }\n    }\n}\n```\n\n客户端\n\n```java\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        Socket max = new Socket(\"localhost\", 9000);\n        OutputStream out = max.getOutputStream();\n        out.write(\"hello\".getBytes());\n        out.write(\"world\".getBytes());\n        out.write(\"你好\".getBytes());\n        max.close();\n    }\n}\n```\n\n输出\n\n```\nhell\nowor\nld�\n�好\n\n```\n\n为什么？\n\n\n\n#### 处理消息的边界\n\n![](img/0023.png)\n\n* 一种思路是固定消息长度，数据包大小一样，服务器按预定长度读取，缺点是浪费带宽\n* 另一种思路是按分隔符拆分，缺点是效率低\n* TLV 格式，即 Type 类型、Length 长度、Value 数据，类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量\n  * Http 1.1 是 TLV 格式\n  * Http 2.0 是 LTV 格式\n\n\n\n```mermaid\nsequenceDiagram \nparticipant c1 as 客户端1\nparticipant s as 服务器\nparticipant b1 as ByteBuffer1\nparticipant b2 as ByteBuffer2\nc1 ->> s: 发送 01234567890abcdef3333\\r\ns ->> b1: 第一次 read 存入 01234567890abcdef\ns ->> b2: 扩容\nb1 ->> b2: 拷贝 01234567890abcdef\ns ->> b2: 第二次 read 存入 3333\\r\nb2 ->> b2: 01234567890abcdef3333\\r\n```\n\n服务器端\n\n```java\nprivate static void split(ByteBuffer source) {\n    source.flip();\n    for (int i = 0; i < source.limit(); i++) {\n        // 找到一条完整消息\n        if (source.get(i) == '\\n') {\n            int length = i + 1 - source.position();\n            // 把这条完整消息存入新的 ByteBuffer\n            ByteBuffer target = ByteBuffer.allocate(length);\n            // 从 source 读，向 target 写\n            for (int j = 0; j < length; j++) {\n                target.put(source.get());\n            }\n            debugAll(target);\n        }\n    }\n    source.compact(); // 0123456789abcdef  position 16 limit 16\n}\n\npublic static void main(String[] args) throws IOException {\n    // 1. 创建 selector, 管理多个 channel\n    Selector selector = Selector.open();\n    ServerSocketChannel ssc = ServerSocketChannel.open();\n    ssc.configureBlocking(false);\n    // 2. 建立 selector 和 channel 的联系（注册）\n    // SelectionKey 就是将来事件发生后，通过它可以知道事件和哪个channel的事件\n    SelectionKey sscKey = ssc.register(selector, 0, null);\n    // key 只关注 accept 事件\n    sscKey.interestOps(SelectionKey.OP_ACCEPT);\n    log.debug(\"sscKey:{}\", sscKey);\n    ssc.bind(new InetSocketAddress(8080));\n    while (true) {\n        // 3. select 方法, 没有事件发生，线程阻塞，有事件，线程才会恢复运行\n        // select 在事件未处理时，它不会阻塞, 事件发生后要么处理，要么取消，不能置之不理\n        selector.select();\n        // 4. 处理事件, selectedKeys 内部包含了所有发生的事件\n        Iterator<SelectionKey> iter = selector.selectedKeys().iterator(); // accept, read\n        while (iter.hasNext()) {\n            SelectionKey key = iter.next();\n            // 处理key 时，要从 selectedKeys 集合中删除，否则下次处理就会有问题\n            iter.remove();\n            log.debug(\"key: {}\", key);\n            // 5. 区分事件类型\n            if (key.isAcceptable()) { // 如果是 accept\n                ServerSocketChannel channel = (ServerSocketChannel) key.channel();\n                SocketChannel sc = channel.accept();\n                sc.configureBlocking(false);\n                ByteBuffer buffer = ByteBuffer.allocate(16); // attachment\n                // 将一个 byteBuffer 作为附件关联到 selectionKey 上\n                SelectionKey scKey = sc.register(selector, 0, buffer);\n                scKey.interestOps(SelectionKey.OP_READ);\n                log.debug(\"{}\", sc);\n                log.debug(\"scKey:{}\", scKey);\n            } else if (key.isReadable()) { // 如果是 read\n                try {\n                    SocketChannel channel = (SocketChannel) key.channel(); // 拿到触发事件的channel\n                    // 获取 selectionKey 上关联的附件\n                    ByteBuffer buffer = (ByteBuffer) key.attachment();\n                    int read = channel.read(buffer); // 如果是正常断开，read 的方法的返回值是 -1\n                    if(read == -1) {\n                        key.cancel();\n                    } else {\n                        split(buffer);\n                        // 需要扩容\n                        if (buffer.position() == buffer.limit()) {\n                            ByteBuffer newBuffer = ByteBuffer.allocate(buffer.capacity() * 2);\n                            buffer.flip();\n                            newBuffer.put(buffer); // 0123456789abcdef3333\\n\n                            key.attach(newBuffer);\n                        }\n                    }\n\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    key.cancel();  // 因为客户端断开了,因此需要将 key 取消（从 selector 的 keys 集合中真正删除 key）\n                }\n            }\n        }\n    }\n}\n```\n\n客户端\n\n```java\nSocketChannel sc = SocketChannel.open();\nsc.connect(new InetSocketAddress(\"localhost\", 8080));\nSocketAddress address = sc.getLocalAddress();\n// sc.write(Charset.defaultCharset().encode(\"hello\\nworld\\n\"));\nsc.write(Charset.defaultCharset().encode(\"0123\\n456789abcdef\"));\nsc.write(Charset.defaultCharset().encode(\"0123456789abcdef3333\\n\"));\nSystem.in.read();\n```\n\n\n\n\n\n#### ByteBuffer 大小分配\n\n* 每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer\n* ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer\n  * 一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 [http://tutorials.jenkov.com/java-performance/resizable-array.html](http://tutorials.jenkov.com/java-performance/resizable-array.html)\n  * 另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗\n\n\n\n\n\n### 4.5 处理 write 事件\n\n\n\n#### 一次无法写完例子\n\n* 非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）\n* 用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略\n  * 当消息处理器第一次写入消息时，才将 channel 注册到 selector 上\n  * selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册\n  * 如果不取消，会每次可写均会触发 write 事件\n\n\n\n```java\npublic class WriteServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocketChannel ssc = ServerSocketChannel.open();\n        ssc.configureBlocking(false);\n        ssc.bind(new InetSocketAddress(8080));\n\n        Selector selector = Selector.open();\n        ssc.register(selector, SelectionKey.OP_ACCEPT);\n\n        while(true) {\n            selector.select();\n\n            Iterator<SelectionKey> iter = selector.selectedKeys().iterator();\n            while (iter.hasNext()) {\n                SelectionKey key = iter.next();\n                iter.remove();\n                if (key.isAcceptable()) {\n                    SocketChannel sc = ssc.accept();\n                    sc.configureBlocking(false);\n                    SelectionKey sckey = sc.register(selector, SelectionKey.OP_READ);\n                    // 1. 向客户端发送内容\n                    StringBuilder sb = new StringBuilder();\n                    for (int i = 0; i < 3000000; i++) {\n                        sb.append(\"a\");\n                    }\n                    ByteBuffer buffer = Charset.defaultCharset().encode(sb.toString());\n                    int write = sc.write(buffer);\n                    // 3. write 表示实际写了多少字节\n                    System.out.println(\"实际写入字节:\" + write);\n                    // 4. 如果有剩余未读字节，才需要关注写事件\n                    if (buffer.hasRemaining()) {\n                        // read 1  write 4\n                        // 在原有关注事件的基础上，多关注 写事件\n                        sckey.interestOps(sckey.interestOps() + SelectionKey.OP_WRITE);\n                        // 把 buffer 作为附件加入 sckey\n                        sckey.attach(buffer);\n                    }\n                } else if (key.isWritable()) {\n                    ByteBuffer buffer = (ByteBuffer) key.attachment();\n                    SocketChannel sc = (SocketChannel) key.channel();\n                    int write = sc.write(buffer);\n                    System.out.println(\"实际写入字节:\" + write);\n                    if (!buffer.hasRemaining()) { // 写完了\n                        key.interestOps(key.interestOps() - SelectionKey.OP_WRITE);\n                        key.attach(null);\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n客户端\n\n```java\npublic class WriteClient {\n    public static void main(String[] args) throws IOException {\n        Selector selector = Selector.open();\n        SocketChannel sc = SocketChannel.open();\n        sc.configureBlocking(false);\n        sc.register(selector, SelectionKey.OP_CONNECT | SelectionKey.OP_READ);\n        sc.connect(new InetSocketAddress(\"localhost\", 8080));\n        int count = 0;\n        while (true) {\n            selector.select();\n            Iterator<SelectionKey> iter = selector.selectedKeys().iterator();\n            while (iter.hasNext()) {\n                SelectionKey key = iter.next();\n                iter.remove();\n                if (key.isConnectable()) {\n                    System.out.println(sc.finishConnect());\n                } else if (key.isReadable()) {\n                    ByteBuffer buffer = ByteBuffer.allocate(1024 * 1024);\n                    count += sc.read(buffer);\n                    buffer.clear();\n                    System.out.println(count);\n                }\n            }\n        }\n    }\n}\n```\n\n\n\n#### 💡 write 为何要取消\n\n只要向 channel 发送数据时，socket 缓冲可写，这个事件会频繁触发，因此应当只在 socket 缓冲区写不下时再关注可写事件，数据写完之后再取消关注\n\n\n\n\n\n\n\n\n\n\n\n### 4.6 更进一步\n\n\n\n#### 💡 利用多线程优化\n\n> 现在都是多核 cpu，设计时要充分考虑别让 cpu 的力量被白白浪费\n\n\n\n前面的代码只有一个选择器，没有充分利用多核 cpu，如何改进呢？\n\n分两组选择器\n\n* 单线程配一个选择器，专门处理 accept 事件\n* 创建 cpu 核心数的线程，每个线程配一个选择器，轮流处理 read 事件\n\n\n\n```java\npublic class ChannelDemo7 {\n    public static void main(String[] args) throws IOException {\n        new BossEventLoop().register();\n    }\n\n\n    @Slf4j\n    static class BossEventLoop implements Runnable {\n        private Selector boss;\n        private WorkerEventLoop[] workers;\n        private volatile boolean start = false;\n        AtomicInteger index = new AtomicInteger();\n\n        public void register() throws IOException {\n            if (!start) {\n                ServerSocketChannel ssc = ServerSocketChannel.open();\n                ssc.bind(new InetSocketAddress(8080));\n                ssc.configureBlocking(false);\n                boss = Selector.open();\n                SelectionKey ssckey = ssc.register(boss, 0, null);\n                ssckey.interestOps(SelectionKey.OP_ACCEPT);\n                workers = initEventLoops();\n                new Thread(this, \"boss\").start();\n                log.debug(\"boss start...\");\n                start = true;\n            }\n        }\n\n        public WorkerEventLoop[] initEventLoops() {\n//        EventLoop[] eventLoops = new EventLoop[Runtime.getRuntime().availableProcessors()];\n            WorkerEventLoop[] workerEventLoops = new WorkerEventLoop[2];\n            for (int i = 0; i < workerEventLoops.length; i++) {\n                workerEventLoops[i] = new WorkerEventLoop(i);\n            }\n            return workerEventLoops;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    boss.select();\n                    Iterator<SelectionKey> iter = boss.selectedKeys().iterator();\n                    while (iter.hasNext()) {\n                        SelectionKey key = iter.next();\n                        iter.remove();\n                        if (key.isAcceptable()) {\n                            ServerSocketChannel c = (ServerSocketChannel) key.channel();\n                            SocketChannel sc = c.accept();\n                            sc.configureBlocking(false);\n                            log.debug(\"{} connected\", sc.getRemoteAddress());\n                            workers[index.getAndIncrement() % workers.length].register(sc);\n                        }\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    @Slf4j\n    static class WorkerEventLoop implements Runnable {\n        private Selector worker;\n        private volatile boolean start = false;\n        private int index;\n\n        private final ConcurrentLinkedQueue<Runnable> tasks = new ConcurrentLinkedQueue<>();\n\n        public WorkerEventLoop(int index) {\n            this.index = index;\n        }\n\n        public void register(SocketChannel sc) throws IOException {\n            if (!start) {\n                worker = Selector.open();\n                new Thread(this, \"worker-\" + index).start();\n                start = true;\n            }\n            tasks.add(() -> {\n                try {\n                    SelectionKey sckey = sc.register(worker, 0, null);\n                    sckey.interestOps(SelectionKey.OP_READ);\n                    worker.selectNow();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            worker.wakeup();\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    worker.select();\n                    Runnable task = tasks.poll();\n                    if (task != null) {\n                        task.run();\n                    }\n                    Set<SelectionKey> keys = worker.selectedKeys();\n                    Iterator<SelectionKey> iter = keys.iterator();\n                    while (iter.hasNext()) {\n                        SelectionKey key = iter.next();\n                        if (key.isReadable()) {\n                            SocketChannel sc = (SocketChannel) key.channel();\n                            ByteBuffer buffer = ByteBuffer.allocate(128);\n                            try {\n                                int read = sc.read(buffer);\n                                if (read == -1) {\n                                    key.cancel();\n                                    sc.close();\n                                } else {\n                                    buffer.flip();\n                                    log.debug(\"{} message:\", sc.getRemoteAddress());\n                                    debugAll(buffer);\n                                }\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                                key.cancel();\n                                sc.close();\n                            }\n                        }\n                        iter.remove();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```\n\n\n\n#### 💡 如何拿到 cpu 个数\n\n> * Runtime.getRuntime().availableProcessors() 如果工作在 docker 容器下，因为容器不是物理隔离的，会拿到物理 cpu 个数，而不是容器申请时的个数\n> * 这个问题直到 jdk 10 才修复，使用 jvm 参数 UseContainerSupport 配置， 默认开启\n\n\n\n### 4.7 UDP\n\n* UDP 是无连接的，client 发送数据不会管 server 是否开启\n* server 这边的 receive 方法会将接收到的数据存入 byte buffer，但如果数据报文超过 buffer 大小，多出来的数据会被默默抛弃\n\n首先启动服务器端\n\n```java\npublic class UdpServer {\n    public static void main(String[] args) {\n        try (DatagramChannel channel = DatagramChannel.open()) {\n            channel.socket().bind(new InetSocketAddress(9999));\n            System.out.println(\"waiting...\");\n            ByteBuffer buffer = ByteBuffer.allocate(32);\n            channel.receive(buffer);\n            buffer.flip();\n            debug(buffer);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n输出\n\n```\nwaiting...\n```\n\n\n\n运行客户端\n\n```java\npublic class UdpClient {\n    public static void main(String[] args) {\n        try (DatagramChannel channel = DatagramChannel.open()) {\n            ByteBuffer buffer = StandardCharsets.UTF_8.encode(\"hello\");\n            InetSocketAddress address = new InetSocketAddress(\"localhost\", 9999);\n            channel.send(buffer, address);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n接下来服务器端输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 65 6c 6c 6f                                  |hello           |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n\n\n## 5. NIO vs BIO\n\n### 5.1 stream vs channel\n\n* stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）\n* stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，网络 channel 可配合 selector 实现多路复用\n* 二者均为全双工，即读写可以同时进行\n\n\n\n### 5.2 IO 模型\n\n同步阻塞、同步非阻塞、同步多路复用、异步阻塞（没有此情况）、异步非阻塞\n\n* 同步：线程自己去获取结果（一个线程）\n* 异步：线程自己不去获取结果，而是由其它线程送结果（至少两个线程）\n\n\n\n当调用一次 channel.read 或 stream.read 后，会切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：\n\n* 等待数据阶段\n* 复制数据阶段\n\n![](img/0033.png)\n\n* 阻塞 IO\n\n  ![](img/0039.png)\n\n* 非阻塞  IO\n\n  ![](img/0035.png)\n\n* 多路复用\n\n  ![](img/0038.png)\n\n* 信号驱动\n\n* 异步 IO\n\n  ![](img/0037.png)\n\n* 阻塞 IO vs 多路复用\n\n  ![](img/0034.png)\n\n  ![](img/0036.png)\n\n#### 🔖 参考\n\nUNIX 网络编程 - 卷 I\n\n\n\n### 5.3 零拷贝\n\n#### 传统 IO 问题\n\n传统的 IO 将一个文件通过 socket 写出\n\n```java\nFile f = new File(\"helloword/data.txt\");\nRandomAccessFile file = new RandomAccessFile(file, \"r\");\n\nbyte[] buf = new byte[(int)f.length()];\nfile.read(buf);\n\nSocket socket = ...;\nsocket.getOutputStream().write(buf);\n```\n\n内部工作流程是这样的：\n\n![](img/0024.png)\n\n1. java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的**用户态**切换至**内核态**，去调用操作系统（Kernel）的读能力，将数据读入**内核缓冲区**。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu\n\n   > DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO\n\n2. 从**内核态**切换回**用户态**，将数据从**内核缓冲区**读入**用户缓冲区**（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA\n\n3. 调用 write 方法，这时将数据从**用户缓冲区**（byte[] buf）写入 **socket 缓冲区**，cpu 会参与拷贝\n\n4. 接下来要向网卡写数据，这项能力 java 又不具备，因此又得从**用户态**切换至**内核态**，调用操作系统的写能力，使用 DMA 将 **socket 缓冲区**的数据写入网卡，不会使用 cpu\n\n\n\n可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的\n\n* 用户态与内核态的切换发生了 3 次，这个操作比较重量级\n* 数据拷贝了共 4 次\n\n\n\n#### NIO 优化\n\n通过 DirectByteBuf \n\n* ByteBuffer.allocate(10)  HeapByteBuffer 使用的还是 java 内存\n* ByteBuffer.allocateDirect(10)  DirectByteBuffer 使用的是操作系统内存\n\n![](img/0025.png)\n\n大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用\n\n* 这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写\n* java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步\n  * DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列\n  * 通过专门线程访问引用队列，根据虚引用释放堆外内存\n* 减少了一次数据拷贝，用户态与内核态的切换次数没有减少\n\n\n\n进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo/transferFrom 方法拷贝数据\n\n![](img/0026.png)\n\n1. java 调用 transferTo 方法后，要从 java 程序的**用户态**切换至**内核态**，使用 DMA将数据读入**内核缓冲区**，不会使用 cpu\n2. 数据从**内核缓冲区**传输到 **socket 缓冲区**，cpu 会参与拷贝\n3. 最后使用 DMA 将 **socket 缓冲区**的数据写入网卡，不会使用 cpu\n\n可以看到\n\n* 只发生了一次用户态与内核态的切换\n* 数据拷贝了 3 次\n\n\n\n进一步优化（linux 2.4）\n\n![](img/0027.png)\n\n1. java 调用 transferTo 方法后，要从 java 程序的**用户态**切换至**内核态**，使用 DMA将数据读入**内核缓冲区**，不会使用 cpu\n2. 只会将一些 offset 和 length 信息拷入 **socket 缓冲区**，几乎无消耗\n3. 使用 DMA 将 **内核缓冲区**的数据写入网卡，不会使用 cpu\n\n整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有\n\n* 更少的用户态与内核态的切换\n* 不利用 cpu 计算，减少 cpu 缓存伪共享\n* 零拷贝适合小文件传输\n\n\n\n### 5.3 AIO\n\nAIO 用来解决数据复制阶段的阻塞问题\n\n* 同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置\n* 异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果\n\n> 异步模型需要底层操作系统（Kernel）提供支持\n>\n> * Windows 系统通过 IOCP 实现了真正的异步 IO\n> * Linux 系统异步 IO 在 2.6 版本引入，但其底层实现还是用多路复用模拟了异步 IO，性能没有优势\n\n\n\n#### 文件 AIO\n\n先来看看 AsynchronousFileChannel\n\n```java\n@Slf4j\npublic class AioDemo1 {\n    public static void main(String[] args) throws IOException {\n        try{\n            AsynchronousFileChannel s = \n                AsynchronousFileChannel.open(\n                \tPaths.get(\"1.txt\"), StandardOpenOption.READ);\n            ByteBuffer buffer = ByteBuffer.allocate(2);\n            log.debug(\"begin...\");\n            s.read(buffer, 0, null, new CompletionHandler<Integer, ByteBuffer>() {\n                @Override\n                public void completed(Integer result, ByteBuffer attachment) {\n                    log.debug(\"read completed...{}\", result);\n                    buffer.flip();\n                    debug(buffer);\n                }\n\n                @Override\n                public void failed(Throwable exc, ByteBuffer attachment) {\n                    log.debug(\"read failed...\");\n                }\n            });\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        log.debug(\"do other things...\");\n        System.in.read();\n    }\n}\n```\n\n输出\n\n```\n13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - begin...\n13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - do other things...\n13:44:56 [DEBUG] [Thread-5] c.i.aio.AioDemo1 - read completed...2\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 0d                                           |a.              |\n+--------+-------------------------------------------------+----------------+\n```\n\n可以看到\n\n* 响应文件读取成功的是另一个线程 Thread-5\n* 主线程并没有 IO 操作阻塞\n\n\n\n#### 💡 守护线程\n\n默认文件 AIO 使用的线程都是守护线程，所以最后要执行 `System.in.read()` 以避免守护线程意外结束\n\n\n\n#### 网络 AIO\n\n```java\npublic class AioServer {\n    public static void main(String[] args) throws IOException {\n        AsynchronousServerSocketChannel ssc = AsynchronousServerSocketChannel.open();\n        ssc.bind(new InetSocketAddress(8080));\n        ssc.accept(null, new AcceptHandler(ssc));\n        System.in.read();\n    }\n\n    private static void closeChannel(AsynchronousSocketChannel sc) {\n        try {\n            System.out.printf(\"[%s] %s close\\n\", Thread.currentThread().getName(), sc.getRemoteAddress());\n            sc.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static class ReadHandler implements CompletionHandler<Integer, ByteBuffer> {\n        private final AsynchronousSocketChannel sc;\n\n        public ReadHandler(AsynchronousSocketChannel sc) {\n            this.sc = sc;\n        }\n\n        @Override\n        public void completed(Integer result, ByteBuffer attachment) {\n            try {\n                if (result == -1) {\n                    closeChannel(sc);\n                    return;\n                }\n                System.out.printf(\"[%s] %s read\\n\", Thread.currentThread().getName(), sc.getRemoteAddress());\n                attachment.flip();\n                System.out.println(Charset.defaultCharset().decode(attachment));\n                attachment.clear();\n                // 处理完第一个 read 时，需要再次调用 read 方法来处理下一个 read 事件\n                sc.read(attachment, attachment, this);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void failed(Throwable exc, ByteBuffer attachment) {\n            closeChannel(sc);\n            exc.printStackTrace();\n        }\n    }\n\n    private static class WriteHandler implements CompletionHandler<Integer, ByteBuffer> {\n        private final AsynchronousSocketChannel sc;\n\n        private WriteHandler(AsynchronousSocketChannel sc) {\n            this.sc = sc;\n        }\n\n        @Override\n        public void completed(Integer result, ByteBuffer attachment) {\n            // 如果作为附件的 buffer 还有内容，需要再次 write 写出剩余内容\n            if (attachment.hasRemaining()) {\n                sc.write(attachment);\n            }\n        }\n\n        @Override\n        public void failed(Throwable exc, ByteBuffer attachment) {\n            exc.printStackTrace();\n            closeChannel(sc);\n        }\n    }\n\n    private static class AcceptHandler implements CompletionHandler<AsynchronousSocketChannel, Object> {\n        private final AsynchronousServerSocketChannel ssc;\n\n        public AcceptHandler(AsynchronousServerSocketChannel ssc) {\n            this.ssc = ssc;\n        }\n\n        @Override\n        public void completed(AsynchronousSocketChannel sc, Object attachment) {\n            try {\n                System.out.printf(\"[%s] %s connected\\n\", Thread.currentThread().getName(), sc.getRemoteAddress());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            ByteBuffer buffer = ByteBuffer.allocate(16);\n            // 读事件由 ReadHandler 处理\n            sc.read(buffer, buffer, new ReadHandler(sc));\n            // 写事件由 WriteHandler 处理\n            sc.write(Charset.defaultCharset().encode(\"server hello!\"), ByteBuffer.allocate(16), new WriteHandler(sc));\n            // 处理完第一个 accpet 时，需要再次调用 accept 方法来处理下一个 accept 事件\n            ssc.accept(null, this);\n        }\n\n        @Override\n        public void failed(Throwable exc, Object attachment) {\n            exc.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n\n\n\n","slug":"Netty01-nio","published":1,"updated":"2023-05-06T13:27:49.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clher6xwe0007ocwe4zklgupz","content":"<p>该笔记是B站黑马的Netty视频的配套笔记1。</p>\n<span id=\"more\"></span>\n<h1 id=\"一-NIO-基础\"><a href=\"#一-NIO-基础\" class=\"headerlink\" title=\"一. NIO 基础\"></a>一. NIO 基础</h1><p>non-blocking io 非阻塞 IO</p>\n<h2 id=\"1-三大组件\"><a href=\"#1-三大组件\" class=\"headerlink\" title=\"1. 三大组件\"></a>1. 三大组件</h2><h3 id=\"1-1-Channel-amp-Buffer\"><a href=\"#1-1-Channel-amp-Buffer\" class=\"headerlink\" title=\"1.1 Channel &amp; Buffer\"></a>1.1 Channel &amp; Buffer</h3><p>channel 有一点类似于 stream，它就是读写数据的<strong>双向通道</strong>，可以从 channel 将数据读入 buffer，也可以将 buffer 的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel 比 stream 更为底层</p>\n<pre><code class=\" mermaid\">graph LR\nchannel --&gt; buffer\nbuffer --&gt; channel\n</code></pre>\n\n<p>常见的 Channel 有</p>\n<ul>\n<li>FileChannel</li>\n<li>DatagramChannel</li>\n<li>SocketChannel</li>\n<li>ServerSocketChannel</li>\n</ul>\n<p>buffer 则用来缓冲读写数据，常见的 buffer 有</p>\n<ul>\n<li>ByteBuffer<ul>\n<li>MappedByteBuffer</li>\n<li>DirectByteBuffer</li>\n<li>HeapByteBuffer</li>\n</ul>\n</li>\n<li>ShortBuffer</li>\n<li>IntBuffer</li>\n<li>LongBuffer</li>\n<li>FloatBuffer</li>\n<li>DoubleBuffer</li>\n<li>CharBuffer</li>\n</ul>\n<h3 id=\"1-2-Selector\"><a href=\"#1-2-Selector\" class=\"headerlink\" title=\"1.2 Selector\"></a>1.2 Selector</h3><p>selector 单从字面意思不好理解，需要结合服务器的设计演化来理解它的用途</p>\n<h4 id=\"多线程版设计\"><a href=\"#多线程版设计\" class=\"headerlink\" title=\"多线程版设计\"></a>多线程版设计</h4><pre><code class=\" mermaid\">graph TD\nsubgraph 多线程版\nt1(thread) --&gt; s1(socket1)\nt2(thread) --&gt; s2(socket2)\nt3(thread) --&gt; s3(socket3)\nend\n</code></pre>\n<h4 id=\"⚠️-多线程版缺点\"><a href=\"#⚠️-多线程版缺点\" class=\"headerlink\" title=\"⚠️ 多线程版缺点\"></a>⚠️ 多线程版缺点</h4><ul>\n<li>内存占用高</li>\n<li>线程上下文切换成本高</li>\n<li>只适合连接数少的场景</li>\n</ul>\n<h4 id=\"线程池版设计\"><a href=\"#线程池版设计\" class=\"headerlink\" title=\"线程池版设计\"></a>线程池版设计</h4><pre><code class=\" mermaid\">graph TD\nsubgraph 线程池版\nt4(thread) --&gt; s4(socket1)\nt5(thread) --&gt; s5(socket2)\nt4(thread) -.-&gt; s6(socket3)\nt5(thread) -.-&gt; s7(socket4)\nend\n</code></pre>\n<h4 id=\"⚠️-线程池版缺点\"><a href=\"#⚠️-线程池版缺点\" class=\"headerlink\" title=\"⚠️ 线程池版缺点\"></a>⚠️ 线程池版缺点</h4><ul>\n<li>阻塞模式下，线程仅能处理一个 socket 连接</li>\n<li>仅适合短连接场景</li>\n</ul>\n<h4 id=\"selector-版设计\"><a href=\"#selector-版设计\" class=\"headerlink\" title=\"selector 版设计\"></a>selector 版设计</h4><p>selector 的作用就是配合一个线程来管理多个 channel，获取这些 channel 上发生的事件，这些 channel 工作在非阻塞模式下，不会让线程吊死在一个 channel 上。适合连接数特别多，但流量低的场景（low traffic）</p>\n<pre><code class=\" mermaid\">graph TD\nsubgraph selector 版\nthread --&gt; selector\nselector --&gt; c1(channel)\nselector --&gt; c2(channel)\nselector --&gt; c3(channel)\nend\n</code></pre>\n\n\n\n<p>调用 selector 的 select() 会阻塞直到 channel 发生了读写就绪事件，这些事件发生，select 方法就会返回这些事件交给 thread 来处理</p>\n<h2 id=\"2-ByteBuffer\"><a href=\"#2-ByteBuffer\" class=\"headerlink\" title=\"2. ByteBuffer\"></a>2. ByteBuffer</h2><p>有一普通文本文件 data.txt，内容为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">1234567890abcd<br></code></pre></td></tr></table></figure>\n\n<p>使用 FileChannel 来读取文件内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChannelDemo1</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>)) &#123;<br>            <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> file.getChannel();<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">10</span>);<br>            <span class=\"hljs-keyword\">do</span> &#123;<br>                <span class=\"hljs-comment\">// 向 buffer 写入</span><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> channel.read(buffer);<br>                log.debug(<span class=\"hljs-string\">&quot;读到字节数：&#123;&#125;&quot;</span>, len);<br>                <span class=\"hljs-keyword\">if</span> (len == -<span class=\"hljs-number\">1</span>) &#123;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>                <span class=\"hljs-comment\">// 切换 buffer 读模式</span><br>                buffer.flip();<br>                <span class=\"hljs-keyword\">while</span>(buffer.hasRemaining()) &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, (<span class=\"hljs-type\">char</span>)buffer.get());<br>                &#125;<br>                <span class=\"hljs-comment\">// 切换 buffer 写模式</span><br>                buffer.clear();<br>            &#125; <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - 读到字节数：<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">9</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - 读到字节数：<span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-selector-tag\">a</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-selector-tag\">b</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - c<br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - d<br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - 读到字节数：-<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-1-ByteBuffer-正确使用姿势\"><a href=\"#2-1-ByteBuffer-正确使用姿势\" class=\"headerlink\" title=\"2.1  ByteBuffer 正确使用姿势\"></a>2.1  ByteBuffer 正确使用姿势</h3><ol>\n<li>向 buffer 写入数据，例如调用 channel.read(buffer)</li>\n<li>调用 flip() 切换至<strong>读模式</strong></li>\n<li>从 buffer 读取数据，例如调用 buffer.get()</li>\n<li>调用 clear() 或 compact() 切换至<strong>写模式</strong></li>\n<li>重复 1~4 步骤</li>\n</ol>\n<h3 id=\"2-2-ByteBuffer-结构\"><a href=\"#2-2-ByteBuffer-结构\" class=\"headerlink\" title=\"2.2 ByteBuffer 结构\"></a>2.2 ByteBuffer 结构</h3><p>ByteBuffer 有以下重要属性</p>\n<ul>\n<li>capacity</li>\n<li>position</li>\n<li>limit</li>\n</ul>\n<p>一开始</p>\n<p><img src=\"/img/0021.png\"></p>\n<p>写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态</p>\n<p><img src=\"/img/0018.png\"></p>\n<p>flip 动作发生后，position 切换为读取位置，limit 切换为读取限制</p>\n<p><img src=\"/img/0019.png\"></p>\n<p>读取 4 个字节后，状态</p>\n<p><img src=\"/img/0020.png\"></p>\n<p>clear 动作发生后，状态</p>\n<p><img src=\"/img/0021.png\"></p>\n<p>compact 方法，是把未读完的部分向前压缩，然后切换至写模式</p>\n<p><img src=\"/img/0022.png\"></p>\n<h4 id=\"💡-调试工具类\"><a href=\"#💡-调试工具类\" class=\"headerlink\" title=\"💡 调试工具类\"></a>💡 调试工具类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ByteBufferUtil</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] BYTE2CHAR = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">char</span>[<span class=\"hljs-number\">256</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] HEXDUMP_TABLE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">char</span>[<span class=\"hljs-number\">256</span> * <span class=\"hljs-number\">4</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] HEXPADDING = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">16</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] HEXDUMP_ROWPREFIXES = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">65536</span> &gt;&gt;&gt; <span class=\"hljs-number\">4</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] BYTE2HEX = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">256</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] BYTEPADDING = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">16</span>];<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] DIGITS = <span class=\"hljs-string\">&quot;0123456789abcdef&quot;</span>.toCharArray();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">256</span>; i++) &#123;<br>            HEXDUMP_TABLE[i &lt;&lt; <span class=\"hljs-number\">1</span>] = DIGITS[i &gt;&gt;&gt; <span class=\"hljs-number\">4</span> &amp; <span class=\"hljs-number\">0x0F</span>];<br>            HEXDUMP_TABLE[(i &lt;&lt; <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>] = DIGITS[i &amp; <span class=\"hljs-number\">0x0F</span>];<br>        &#125;<br><br>        <span class=\"hljs-type\">int</span> i;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for hex dump paddings</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; HEXPADDING.length; i++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">padding</span> <span class=\"hljs-operator\">=</span> HEXPADDING.length - i;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(padding * <span class=\"hljs-number\">3</span>);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; padding; j++) &#123;<br>                buf.append(<span class=\"hljs-string\">&quot;   &quot;</span>);<br>            &#125;<br>            HEXPADDING[i] = buf.toString();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for the start-offset header in each row (up to 64KiB).</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; HEXDUMP_ROWPREFIXES.length; i++) &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(<span class=\"hljs-number\">12</span>);<br>            buf.append(NEWLINE);<br>            buf.append(Long.toHexString(i &lt;&lt; <span class=\"hljs-number\">4</span> &amp; <span class=\"hljs-number\">0xFFFFFFFFL</span> | <span class=\"hljs-number\">0x100000000L</span>));<br>            buf.setCharAt(buf.length() - <span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>            buf.append(<span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>            HEXDUMP_ROWPREFIXES[i] = buf.toString();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for byte-to-hex-dump conversion</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; BYTE2HEX.length; i++) &#123;<br>            BYTE2HEX[i] = <span class=\"hljs-string\">&#x27; &#x27;</span> + StringUtil.byteToHexStringPadded(i);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for byte dump paddings</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; BYTEPADDING.length; i++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">padding</span> <span class=\"hljs-operator\">=</span> BYTEPADDING.length - i;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(padding);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; padding; j++) &#123;<br>                buf.append(<span class=\"hljs-string\">&#x27; &#x27;</span>);<br>            &#125;<br>            BYTEPADDING[i] = buf.toString();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for byte-to-char conversion</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; BYTE2CHAR.length; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i &lt;= <span class=\"hljs-number\">0x1f</span> || i &gt;= <span class=\"hljs-number\">0x7f</span>) &#123;<br>                BYTE2CHAR[i] = <span class=\"hljs-string\">&#x27;.&#x27;</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                BYTE2CHAR[i] = (<span class=\"hljs-type\">char</span>) i;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 打印所有内容</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> buffer</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">debugAll</span><span class=\"hljs-params\">(ByteBuffer buffer)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldlimit</span> <span class=\"hljs-operator\">=</span> buffer.limit();<br>        buffer.limit(buffer.capacity());<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">origin</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(<span class=\"hljs-number\">256</span>);<br>        appendPrettyHexDump(origin, buffer, <span class=\"hljs-number\">0</span>, buffer.capacity());<br>        System.out.println(<span class=\"hljs-string\">&quot;+--------+-------------------- all ------------------------+----------------+&quot;</span>);<br>        System.out.printf(<span class=\"hljs-string\">&quot;position: [%d], limit: [%d]\\n&quot;</span>, buffer.position(), oldlimit);<br>        System.out.println(origin);<br>        buffer.limit(oldlimit);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 打印可读取内容</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> buffer</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">debugRead</span><span class=\"hljs-params\">(ByteBuffer buffer)</span> &#123;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(<span class=\"hljs-number\">256</span>);<br>        appendPrettyHexDump(builder, buffer, buffer.position(), buffer.limit() - buffer.position());<br>        System.out.println(<span class=\"hljs-string\">&quot;+--------+-------------------- read -----------------------+----------------+&quot;</span>);<br>        System.out.printf(<span class=\"hljs-string\">&quot;position: [%d], limit: [%d]\\n&quot;</span>, buffer.position(), buffer.limit());<br>        System.out.println(builder);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">appendPrettyHexDump</span><span class=\"hljs-params\">(StringBuilder dump, ByteBuffer buf, <span class=\"hljs-type\">int</span> offset, <span class=\"hljs-type\">int</span> length)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (isOutOfBounds(offset, length, buf.capacity())) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexOutOfBoundsException</span>(<br>                    <span class=\"hljs-string\">&quot;expected: &quot;</span> + <span class=\"hljs-string\">&quot;0 &lt;= offset(&quot;</span> + offset + <span class=\"hljs-string\">&quot;) &lt;= offset + length(&quot;</span> + length<br>                            + <span class=\"hljs-string\">&quot;) &lt;= &quot;</span> + <span class=\"hljs-string\">&quot;buf.capacity(&quot;</span> + buf.capacity() + <span class=\"hljs-string\">&#x27;)&#x27;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (length == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        dump.append(<br>                <span class=\"hljs-string\">&quot;         +-------------------------------------------------+&quot;</span> +<br>                        NEWLINE + <span class=\"hljs-string\">&quot;         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |&quot;</span> +<br>                        NEWLINE + <span class=\"hljs-string\">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);<br><br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">startIndex</span> <span class=\"hljs-operator\">=</span> offset;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fullRows</span> <span class=\"hljs-operator\">=</span> length &gt;&gt;&gt; <span class=\"hljs-number\">4</span>;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">remainder</span> <span class=\"hljs-operator\">=</span> length &amp; <span class=\"hljs-number\">0xF</span>;<br><br>        <span class=\"hljs-comment\">// Dump the rows which have 16 bytes.</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; row &lt; fullRows; row++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowStartIndex</span> <span class=\"hljs-operator\">=</span> (row &lt;&lt; <span class=\"hljs-number\">4</span>) + startIndex;<br><br>            <span class=\"hljs-comment\">// Per-row prefix.</span><br>            appendHexDumpRowPrefix(dump, row, rowStartIndex);<br><br>            <span class=\"hljs-comment\">// Hex dump</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowEndIndex</span> <span class=\"hljs-operator\">=</span> rowStartIndex + <span class=\"hljs-number\">16</span>;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(<span class=\"hljs-string\">&quot; |&quot;</span>);<br><br>            <span class=\"hljs-comment\">// ASCII dump</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(<span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Dump the last row which has less than 16 bytes.</span><br>        <span class=\"hljs-keyword\">if</span> (remainder != <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowStartIndex</span> <span class=\"hljs-operator\">=</span> (fullRows &lt;&lt; <span class=\"hljs-number\">4</span>) + startIndex;<br>            appendHexDumpRowPrefix(dump, fullRows, rowStartIndex);<br><br>            <span class=\"hljs-comment\">// Hex dump</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowEndIndex</span> <span class=\"hljs-operator\">=</span> rowStartIndex + remainder;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(HEXPADDING[remainder]);<br>            dump.append(<span class=\"hljs-string\">&quot; |&quot;</span>);<br><br>            <span class=\"hljs-comment\">// Ascii dump</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(BYTEPADDING[remainder]);<br>            dump.append(<span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>        &#125;<br><br>        dump.append(NEWLINE +<br>                <span class=\"hljs-string\">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">appendHexDumpRowPrefix</span><span class=\"hljs-params\">(StringBuilder dump, <span class=\"hljs-type\">int</span> row, <span class=\"hljs-type\">int</span> rowStartIndex)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (row &lt; HEXDUMP_ROWPREFIXES.length) &#123;<br>            dump.append(HEXDUMP_ROWPREFIXES[row]);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            dump.append(NEWLINE);<br>            dump.append(Long.toHexString(rowStartIndex &amp; <span class=\"hljs-number\">0xFFFFFFFFL</span> | <span class=\"hljs-number\">0x100000000L</span>));<br>            dump.setCharAt(dump.length() - <span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>            dump.append(<span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">short</span> <span class=\"hljs-title function_\">getUnsignedByte</span><span class=\"hljs-params\">(ByteBuffer buffer, <span class=\"hljs-type\">int</span> index)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">short</span>) (buffer.get(index) &amp; <span class=\"hljs-number\">0xFF</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-ByteBuffer-常见方法\"><a href=\"#2-3-ByteBuffer-常见方法\" class=\"headerlink\" title=\"2.3 ByteBuffer 常见方法\"></a>2.3 ByteBuffer 常见方法</h3><h4 id=\"分配空间\"><a href=\"#分配空间\" class=\"headerlink\" title=\"分配空间\"></a>分配空间</h4><p>可以使用 allocate 方法为 ByteBuffer 分配空间，其它 buffer 类也有该方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Bytebuffer</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"向-buffer-写入数据\"><a href=\"#向-buffer-写入数据\" class=\"headerlink\" title=\"向 buffer 写入数据\"></a>向 buffer 写入数据</h4><p>有两种办法</p>\n<ul>\n<li>调用 channel 的 read 方法</li>\n<li>调用 buffer 自己的 put 方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readBytes</span> <span class=\"hljs-operator\">=</span> channel.read(buf);<br></code></pre></td></tr></table></figure>\n\n<p>和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buf.put((<span class=\"hljs-type\">byte</span>)<span class=\"hljs-number\">127</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"从-buffer-读取数据\"><a href=\"#从-buffer-读取数据\" class=\"headerlink\" title=\"从 buffer 读取数据\"></a>从 buffer 读取数据</h4><p>同样有两种办法</p>\n<ul>\n<li>调用 channel 的 write 方法</li>\n<li>调用 buffer 自己的 get 方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">writeBytes</span> <span class=\"hljs-operator\">=</span> channel.write(buf);<br></code></pre></td></tr></table></figure>\n\n<p>和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> buf.get();<br></code></pre></td></tr></table></figure>\n\n<p>get 方法会让 position 读指针向后走，如果想重复读取数据</p>\n<ul>\n<li>可以调用 rewind 方法将 position 重新置为 0</li>\n<li>或者调用 get(int i) 方法获取索引 i 的内容，它不会移动读指针</li>\n</ul>\n<h4 id=\"mark-和-reset\"><a href=\"#mark-和-reset\" class=\"headerlink\" title=\"mark 和 reset\"></a>mark 和 reset</h4><p>mark 是在读取时，做一个标记，即使 position 改变，只要调用 reset 就能回到 mark 的位置</p>\n<blockquote>\n<p><strong>注意</strong></p>\n<p>rewind 和 flip 都会清除 mark 位置</p>\n</blockquote>\n<h4 id=\"字符串与-ByteBuffer-互转\"><a href=\"#字符串与-ByteBuffer-互转\" class=\"headerlink\" title=\"字符串与 ByteBuffer 互转\"></a>字符串与 ByteBuffer 互转</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer1</span> <span class=\"hljs-operator\">=</span> StandardCharsets.UTF_8.encode(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer2</span> <span class=\"hljs-operator\">=</span> Charset.forName(<span class=\"hljs-string\">&quot;utf-8&quot;</span>).encode(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br><br>debug(buffer1);<br>debug(buffer2);<br><br><span class=\"hljs-type\">CharBuffer</span> <span class=\"hljs-variable\">buffer3</span> <span class=\"hljs-operator\">=</span> StandardCharsets.UTF_8.decode(buffer1);<br>System.out.println(buffer3.getClass());<br>System.out.println(buffer3.toString());<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| e4 bd a0 e5 a5 bd                               |......          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| e4 bd a0 e5 a5 bd                               |......          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>class java.nio.HeapCharBuffer<br>你好<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"⚠️-Buffer-的线程安全\"><a href=\"#⚠️-Buffer-的线程安全\" class=\"headerlink\" title=\"⚠️ Buffer 的线程安全\"></a>⚠️ Buffer 的线程安全</h4><blockquote>\n<p>Buffer 是<strong>非线程安全的</strong></p>\n</blockquote>\n<h3 id=\"2-4-Scattering-Reads\"><a href=\"#2-4-Scattering-Reads\" class=\"headerlink\" title=\"2.4 Scattering Reads\"></a>2.4 Scattering Reads</h3><p>分散读取，有一个文本文件 3parts.txt</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">onetwothree</span><br></code></pre></td></tr></table></figure>\n\n<p>使用如下方式读取，可以将数据填充至多个 buffer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;helloword/3parts.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>)) &#123;<br>    <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> file.getChannel();<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">5</span>);<br>    channel.read(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteBuffer</span>[]&#123;a, b, c&#125;);<br>    a.flip();<br>    b.flip();<br>    c.flip();<br>    debug(a);<br>    debug(b);<br>    debug(c);<br>&#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6f 6e 65                                        |one             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 74 77 6f                                        |two             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 74 68 72 65 65                                  |three           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-5-Gathering-Writes\"><a href=\"#2-5-Gathering-Writes\" class=\"headerlink\" title=\"2.5 Gathering Writes\"></a>2.5 Gathering Writes</h3><p>使用如下方式写入，可以将多个 buffer 的数据填充至 channel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;helloword/3parts.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>)) &#123;<br>    <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> file.getChannel();<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">4</span>);<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">4</span>);<br>    channel.position(<span class=\"hljs-number\">11</span>);<br><br>    d.put(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;o&#x27;</span>, <span class=\"hljs-string\">&#x27;u&#x27;</span>, <span class=\"hljs-string\">&#x27;r&#x27;</span>&#125;);<br>    e.put(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;v&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>&#125;);<br>    d.flip();<br>    e.flip();<br>    debug(d);<br>    debug(e);<br>    channel.write(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteBuffer</span>[]&#123;d, e&#125;);<br>&#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 6f 75 72                                     |four            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 69 76 65                                     |five            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>文件内容</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">onetwothreefourfive</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-6-练习\"><a href=\"#2-6-练习\" class=\"headerlink\" title=\"2.6 练习\"></a>2.6 练习</h3><p>网络上有多条数据发送给服务端，数据之间使用 \\n 进行分隔<br>但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</p>\n<ul>\n<li>Hello,world\\n</li>\n<li>I’m zhangsan\\n</li>\n<li>How are you?\\n</li>\n</ul>\n<p>变成了下面的两个 byteBuffer (黏包，半包)</p>\n<ul>\n<li>Hello,world\\nI’m zhangsan\\nHo</li>\n<li>w are you?\\n</li>\n</ul>\n<p>现在要求你编写程序，将错乱的数据恢复成原始的按 \\n 分隔的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">32</span>);<br>    <span class=\"hljs-comment\">//                     11            24</span><br>    source.put(<span class=\"hljs-string\">&quot;Hello,world\\nI&#x27;m zhangsan\\nHo&quot;</span>.getBytes());<br>    split(source);<br><br>    source.put(<span class=\"hljs-string\">&quot;w are you?\\nhaha!\\n&quot;</span>.getBytes());<br>    split(source);<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">split</span><span class=\"hljs-params\">(ByteBuffer source)</span> &#123;<br>    source.flip();<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldLimit</span> <span class=\"hljs-operator\">=</span> source.limit();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; oldLimit; i++) &#123;<br>        <span class=\"hljs-keyword\">if</span> (source.get(i) == <span class=\"hljs-string\">&#x27;\\n&#x27;</span>) &#123;<br>            System.out.println(i);<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(i + <span class=\"hljs-number\">1</span> - source.position());<br>            <span class=\"hljs-comment\">// 0 ~ limit</span><br>            source.limit(i + <span class=\"hljs-number\">1</span>);<br>            target.put(source); <span class=\"hljs-comment\">// 从source 读，向 target 写</span><br>            debugAll(target);<br>            source.limit(oldLimit);<br>        &#125;<br>    &#125;<br>    source.compact();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-文件编程\"><a href=\"#3-文件编程\" class=\"headerlink\" title=\"3. 文件编程\"></a>3. 文件编程</h2><h3 id=\"3-1-FileChannel\"><a href=\"#3-1-FileChannel\" class=\"headerlink\" title=\"3.1 FileChannel\"></a>3.1 FileChannel</h3><h4 id=\"⚠️-FileChannel-工作模式\"><a href=\"#⚠️-FileChannel-工作模式\" class=\"headerlink\" title=\"⚠️ FileChannel 工作模式\"></a>⚠️ FileChannel 工作模式</h4><blockquote>\n<p>FileChannel 只能工作在阻塞模式下</p>\n</blockquote>\n<h4 id=\"获取\"><a href=\"#获取\" class=\"headerlink\" title=\"获取\"></a>获取</h4><p>不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法</p>\n<ul>\n<li>通过 FileInputStream 获取的 channel 只能读</li>\n<li>通过 FileOutputStream 获取的 channel 只能写</li>\n<li>通过 RandomAccessFile 是否能读写根据构造 RandomAccessFile 时的读写模式决定</li>\n</ul>\n<h4 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h4><p>会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readBytes</span> <span class=\"hljs-operator\">=</span> channel.read(buffer);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"写入\"><a href=\"#写入\" class=\"headerlink\" title=\"写入\"></a>写入</h4><p>写入的正确姿势如下， SocketChannel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ...;<br>buffer.put(...); <span class=\"hljs-comment\">// 存入数据</span><br>buffer.flip();   <span class=\"hljs-comment\">// 切换读模式</span><br><br><span class=\"hljs-keyword\">while</span>(buffer.hasRemaining()) &#123;<br>    channel.write(buffer);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel</p>\n<h4 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h4><p>channel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法</p>\n<h4 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h4><p>获取当前位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">pos</span> <span class=\"hljs-operator\">=</span> channel.position();<br></code></pre></td></tr></table></figure>\n\n<p>设置当前位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">newPos</span> <span class=\"hljs-operator\">=</span> ...;<br>channel.position(newPos);<br></code></pre></td></tr></table></figure>\n\n<p>设置当前位置时，如果设置为文件的末尾</p>\n<ul>\n<li>这时读取会返回 -1 </li>\n<li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）</li>\n</ul>\n<h4 id=\"大小\"><a href=\"#大小\" class=\"headerlink\" title=\"大小\"></a>大小</h4><p>使用 size 方法获取文件的大小</p>\n<h4 id=\"强制写入\"><a href=\"#强制写入\" class=\"headerlink\" title=\"强制写入\"></a>强制写入</h4><p>操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘。可以调用 force(true)  方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘</p>\n<h3 id=\"3-2-两个-Channel-传输数据\"><a href=\"#3-2-两个-Channel-传输数据\" class=\"headerlink\" title=\"3.2 两个 Channel 传输数据\"></a>3.2 两个 Channel 传输数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">FROM</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">TO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;helloword/to.txt&quot;</span>;<br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">from</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(FROM).getChannel();<br>     <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">to</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(TO).getChannel();<br>    ) &#123;<br>    from.transferTo(<span class=\"hljs-number\">0</span>, from.size(), to);<br>&#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>System.out.println(<span class=\"hljs-string\">&quot;transferTo 用时：&quot;</span> + (end - start) / <span class=\"hljs-number\">1000_000.0</span>);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">transferTo</span> 用时：<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">2011</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>超过 2g 大小的文件传输</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestFileChannelTransferTo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<br>                <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">from</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;data.txt&quot;</span>).getChannel();<br>                <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">to</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;to.txt&quot;</span>).getChannel();<br>        ) &#123;<br>            <span class=\"hljs-comment\">// 效率高，底层会利用操作系统的零拷贝进行优化</span><br>            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> from.size();<br>            <span class=\"hljs-comment\">// left 变量代表还剩余多少字节</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> size; left &gt; <span class=\"hljs-number\">0</span>; ) &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;position:&quot;</span> + (size - left) + <span class=\"hljs-string\">&quot; left:&quot;</span> + left);<br>                left -= from.transferTo((size - left), left, to);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>实际传输一个超大文件</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">position</span>:<span class=\"hljs-number\">0</span> left:<span class=\"hljs-number\">7769948160</span><br><span class=\"hljs-attribute\">position</span>:<span class=\"hljs-number\">2147483647</span> left:<span class=\"hljs-number\">5622464513</span><br><span class=\"hljs-attribute\">position</span>:<span class=\"hljs-number\">4294967294</span> left:<span class=\"hljs-number\">3474980866</span><br><span class=\"hljs-attribute\">position</span>:<span class=\"hljs-number\">6442450941</span> left:<span class=\"hljs-number\">1327497219</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-Path\"><a href=\"#3-3-Path\" class=\"headerlink\" title=\"3.3 Path\"></a>3.3 Path</h3><p>jdk7 引入了 Path 和 Paths 类</p>\n<ul>\n<li>Path 用来表示文件路径</li>\n<li>Paths 是工具类，用来获取 Path 实例</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;1.txt&quot;</span>); <span class=\"hljs-comment\">// 相对路径 使用 user.dir 环境变量来定位 1.txt</span><br><br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\1.txt&quot;</span>); <span class=\"hljs-comment\">// 绝对路径 代表了  d:\\1.txt</span><br><br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:/1.txt&quot;</span>); <span class=\"hljs-comment\">// 绝对路径 同样代表了  d:\\1.txt</span><br><br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">projects</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\data&quot;</span>, <span class=\"hljs-string\">&quot;projects&quot;</span>); <span class=\"hljs-comment\">// 代表了  d:\\data\\projects</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>.</code> 代表了当前路径</li>\n<li><code>..</code> 代表了上一级路径</li>\n</ul>\n<p>例如目录结构如下</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">d:<br>\t<span class=\"hljs-string\">|- data</span><br>\t\t<span class=\"hljs-string\">|- projects</span><br>\t\t\t<span class=\"hljs-string\">|- a</span><br>\t\t\t<span class=\"hljs-string\">|- b</span><br></code></pre></td></tr></table></figure>\n\n<p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\data\\\\projects\\\\a\\\\..\\\\b&quot;</span>);<br>System.out.println(path);<br>System.out.println(path.normalize()); <span class=\"hljs-comment\">// 正常化路径</span><br></code></pre></td></tr></table></figure>\n\n<p>会输出</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-title\">d</span>:\\<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>\\projects\\a\\..\\b</span><br><span class=\"hljs-title\">d</span>:\\<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>\\projects\\b</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-4-Files\"><a href=\"#3-4-Files\" class=\"headerlink\" title=\"3.4 Files\"></a>3.4 Files</h3><p>检查文件是否存在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br>System.out.println(Files.exists(path));<br></code></pre></td></tr></table></figure>\n\n\n\n<p>创建一级目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/d1&quot;</span>);<br>Files.createDirectory(path);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果目录已存在，会抛异常 FileAlreadyExistsException</li>\n<li>不能一次创建多级目录，否则会抛异常 NoSuchFileException</li>\n</ul>\n<p>创建多级目录用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/d1/d2&quot;</span>);<br>Files.createDirectories(path);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>拷贝文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/target.txt&quot;</span>);<br><br>Files.copy(source, target);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果文件已存在，会抛异常 FileAlreadyExistsException</li>\n</ul>\n<p>如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>移动文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br><br>Files.move(source, target, StandardCopyOption.ATOMIC_MOVE);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</li>\n</ul>\n<p>删除文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/target.txt&quot;</span>);<br><br>Files.delete(target);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果文件不存在，会抛异常 NoSuchFileException</li>\n</ul>\n<p>删除目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/d1&quot;</span>);<br><br>Files.delete(target);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果目录还有内容，会抛异常 DirectoryNotEmptyException</li>\n</ul>\n<p>遍历目录文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91&quot;</span>);<br>    <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">dirCount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>    <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">fileCount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>    Files.walkFileTree(path, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleFileVisitor</span>&lt;Path&gt;()&#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">preVisitDirectory</span><span class=\"hljs-params\">(Path dir, BasicFileAttributes attrs)</span> <br>            <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>            System.out.println(dir);<br>            dirCount.incrementAndGet();<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.preVisitDirectory(dir, attrs);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">visitFile</span><span class=\"hljs-params\">(Path file, BasicFileAttributes attrs)</span> <br>            <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>            System.out.println(file);<br>            fileCount.incrementAndGet();<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.visitFile(file, attrs);<br>        &#125;<br>    &#125;);<br>    System.out.println(dirCount); <span class=\"hljs-comment\">// 133</span><br>    System.out.println(fileCount); <span class=\"hljs-comment\">// 1479</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>统计 jar 的数目</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91&quot;</span>);<br><span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">fileCount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>Files.walkFileTree(path, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleFileVisitor</span>&lt;Path&gt;()&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">visitFile</span><span class=\"hljs-params\">(Path file, BasicFileAttributes attrs)</span> <br>        <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-keyword\">if</span> (file.toFile().getName().endsWith(<span class=\"hljs-string\">&quot;.jar&quot;</span>)) &#123;<br>            fileCount.incrementAndGet();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.visitFile(file, attrs);<br>    &#125;<br>&#125;);<br>System.out.println(fileCount); <span class=\"hljs-comment\">// 724</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>删除多级目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\a&quot;</span>);<br>Files.walkFileTree(path, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleFileVisitor</span>&lt;Path&gt;()&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">visitFile</span><span class=\"hljs-params\">(Path file, BasicFileAttributes attrs)</span> <br>        <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        Files.delete(file);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.visitFile(file, attrs);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">postVisitDirectory</span><span class=\"hljs-params\">(Path dir, IOException exc)</span> <br>        <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        Files.delete(dir);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.postVisitDirectory(dir, exc);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"⚠️-删除很危险\"><a href=\"#⚠️-删除很危险\" class=\"headerlink\" title=\"⚠️ 删除很危险\"></a>⚠️ 删除很危险</h4><blockquote>\n<p>删除是危险操作，确保要递归删除的文件夹没有重要内容</p>\n</blockquote>\n<p>拷贝多级目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;D:\\\\Snipaste-1.16.2-x64&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;D:\\\\Snipaste-1.16.2-x64aaa&quot;</span>;<br><br>Files.walk(Paths.get(source)).forEach(path -&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">targetName</span> <span class=\"hljs-operator\">=</span> path.toString().replace(source, target);<br>        <span class=\"hljs-comment\">// 是目录</span><br>        <span class=\"hljs-keyword\">if</span> (Files.isDirectory(path)) &#123;<br>            Files.createDirectory(Paths.get(targetName));<br>        &#125;<br>        <span class=\"hljs-comment\">// 是普通文件</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (Files.isRegularFile(path)) &#123;<br>            Files.copy(path, Paths.get(targetName));<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;);<br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>System.out.println(end - start);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"4-网络编程\"><a href=\"#4-网络编程\" class=\"headerlink\" title=\"4. 网络编程\"></a>4. 网络编程</h2><h3 id=\"4-1-非阻塞-vs-阻塞\"><a href=\"#4-1-非阻塞-vs-阻塞\" class=\"headerlink\" title=\"4.1 非阻塞 vs 阻塞\"></a>4.1 非阻塞 vs 阻塞</h3><h4 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h4><ul>\n<li>阻塞模式下，相关方法都会导致线程暂停<ul>\n<li>ServerSocketChannel.accept 会在没有连接建立时让线程暂停</li>\n<li>SocketChannel.read 会在没有数据可读时让线程暂停</li>\n<li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li>\n</ul>\n</li>\n<li>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</li>\n<li>但多线程下，有新的问题，体现在以下方面<ul>\n<li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li>\n<li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li>\n</ul>\n</li>\n</ul>\n<p>服务器端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 使用 nio 来理解阻塞模式, 单线程</span><br><span class=\"hljs-comment\">// 0. ByteBuffer</span><br><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>);<br><span class=\"hljs-comment\">// 1. 创建了服务器</span><br><span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br><br><span class=\"hljs-comment\">// 2. 绑定监听端口</span><br>ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br><br><span class=\"hljs-comment\">// 3. 连接集合</span><br>List&lt;SocketChannel&gt; channels = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>    <span class=\"hljs-comment\">// 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信</span><br>    log.debug(<span class=\"hljs-string\">&quot;connecting...&quot;</span>);<br>    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> ssc.accept(); <span class=\"hljs-comment\">// 阻塞方法，线程停止运行</span><br>    log.debug(<span class=\"hljs-string\">&quot;connected... &#123;&#125;&quot;</span>, sc);<br>    channels.add(sc);<br>    <span class=\"hljs-keyword\">for</span> (SocketChannel channel : channels) &#123;<br>        <span class=\"hljs-comment\">// 5. 接收客户端发送的数据</span><br>        log.debug(<span class=\"hljs-string\">&quot;before read... &#123;&#125;&quot;</span>, channel);<br>        channel.read(buffer); <span class=\"hljs-comment\">// 阻塞方法，线程停止运行</span><br>        buffer.flip();<br>        debugRead(buffer);<br>        buffer.clear();<br>        log.debug(<span class=\"hljs-string\">&quot;after read...&#123;&#125;&quot;</span>, channel);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> SocketChannel.open();<br>sc.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>));<br>System.out.println(<span class=\"hljs-string\">&quot;waiting...&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"非阻塞\"><a href=\"#非阻塞\" class=\"headerlink\" title=\"非阻塞\"></a>非阻塞</h4><ul>\n<li>非阻塞模式下，相关方法都会不会让线程暂停<ul>\n<li>在 ServerSocketChannel.accept 在没有连接建立时，会返回 null，继续运行</li>\n<li>SocketChannel.read 在没有数据可读时，会返回 0，但线程不必阻塞，可以去执行其它 SocketChannel 的 read 或是去执行 ServerSocketChannel.accept </li>\n<li>写数据时，线程只是等待数据写入 Channel 即可，无需等 Channel 通过网络把数据发送出去</li>\n</ul>\n</li>\n<li>但非阻塞模式下，即使没有连接建立，和可读数据，线程仍然在不断运行，白白浪费了 cpu</li>\n<li>数据复制过程中，线程实际还是阻塞的（AIO 改进的地方）</li>\n</ul>\n<p>服务器端，客户端代码不变</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 使用 nio 来理解非阻塞模式, 单线程</span><br><span class=\"hljs-comment\">// 0. ByteBuffer</span><br><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>);<br><span class=\"hljs-comment\">// 1. 创建了服务器</span><br><span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br>ssc.configureBlocking(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// 非阻塞模式</span><br><span class=\"hljs-comment\">// 2. 绑定监听端口</span><br>ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br><span class=\"hljs-comment\">// 3. 连接集合</span><br>List&lt;SocketChannel&gt; channels = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>    <span class=\"hljs-comment\">// 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信</span><br>    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> ssc.accept(); <span class=\"hljs-comment\">// 非阻塞，线程还会继续运行，如果没有连接建立，但sc是null</span><br>    <span class=\"hljs-keyword\">if</span> (sc != <span class=\"hljs-literal\">null</span>) &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;connected... &#123;&#125;&quot;</span>, sc);<br>        sc.configureBlocking(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// 非阻塞模式</span><br>        channels.add(sc);<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (SocketChannel channel : channels) &#123;<br>        <span class=\"hljs-comment\">// 5. 接收客户端发送的数据</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> channel.read(buffer);<span class=\"hljs-comment\">// 非阻塞，线程仍然会继续运行，如果没有读到数据，read 返回 0</span><br>        <span class=\"hljs-keyword\">if</span> (read &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            buffer.flip();<br>            debugRead(buffer);<br>            buffer.clear();<br>            log.debug(<span class=\"hljs-string\">&quot;after read...&#123;&#125;&quot;</span>, channel);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h4><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p>\n<ul>\n<li>多路复用仅针对网络 IO、普通文件 IO 没法利用多路复用</li>\n<li>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证<ul>\n<li>有可连接事件时才去连接</li>\n<li>有可读事件才去读取</li>\n<li>有可写事件才去写入<ul>\n<li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-Selector\"><a href=\"#4-2-Selector\" class=\"headerlink\" title=\"4.2 Selector\"></a>4.2 Selector</h3><pre><code class=\" mermaid\">graph TD\nsubgraph selector 版\nthread --&gt; selector\nselector --&gt; c1(channel)\nselector --&gt; c2(channel)\nselector --&gt; c3(channel)\nend\n</code></pre>\n\n\n\n<p>好处</p>\n<ul>\n<li>一个线程配合 selector 就可以监控多个 channel 的事件，事件发生线程才去处理。避免非阻塞模式下所做无用功</li>\n<li>让这个线程能够被充分利用</li>\n<li>节约了线程的数量</li>\n<li>减少了线程上下文切换</li>\n</ul>\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"绑定-Channel-事件\"><a href=\"#绑定-Channel-事件\" class=\"headerlink\" title=\"绑定 Channel 事件\"></a>绑定 Channel 事件</h4><p>也称之为注册事件，绑定的事件 selector 才会关心 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">channel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> channel.register(selector, 绑定事件);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>channel 必须工作在非阻塞模式</li>\n<li>FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用</li>\n<li>绑定的事件类型可以有<ul>\n<li>connect - 客户端连接成功时触发</li>\n<li>accept - 服务器端成功接受连接时触发</li>\n<li>read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况</li>\n<li>write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"监听-Channel-事件\"><a href=\"#监听-Channel-事件\" class=\"headerlink\" title=\"监听 Channel 事件\"></a>监听 Channel 事件</h4><p>可以通过下面三种方法来监听是否有事件发生，方法的返回值代表有多少 channel 发生了事件</p>\n<p>方法1，阻塞直到绑定事件发生</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.select();<br></code></pre></td></tr></table></figure>\n\n\n\n<p>方法2，阻塞直到绑定事件发生，或是超时（时间单位为 ms）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.select(<span class=\"hljs-type\">long</span> timeout);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>方法3，不会阻塞，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.selectNow();<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-select-何时不阻塞\"><a href=\"#💡-select-何时不阻塞\" class=\"headerlink\" title=\"💡 select 何时不阻塞\"></a>💡 select 何时不阻塞</h4><blockquote>\n<ul>\n<li>事件发生时<ul>\n<li>客户端发起连接请求，会触发 accept 事件</li>\n<li>客户端发送数据过来，客户端正常、异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件</li>\n<li>channel 可写，会触发 write 事件</li>\n<li>在 linux 下 nio bug 发生时</li>\n</ul>\n</li>\n<li>调用 selector.wakeup()</li>\n<li>调用 selector.close()</li>\n<li>selector 所在线程 interrupt</li>\n</ul>\n</blockquote>\n<h3 id=\"4-3-处理-accept-事件\"><a href=\"#4-3-处理-accept-事件\" class=\"headerlink\" title=\"4.3 处理 accept 事件\"></a>4.3 处理 accept 事件</h3><p>客户端代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Client</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">socket</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>)) &#123;<br>            System.out.println(socket);<br>            socket.getOutputStream().write(<span class=\"hljs-string\">&quot;world&quot;</span>.getBytes());<br>            System.in.read();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>服务器端代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChannelDemo6</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open()) &#123;<br>            channel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>            System.out.println(channel);<br>            <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>            channel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>            channel.register(selector, SelectionKey.OP_ACCEPT);<br><br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.select();<br><span class=\"hljs-comment\">//                int count = selector.selectNow();</span><br>                log.debug(<span class=\"hljs-string\">&quot;select count: &#123;&#125;&quot;</span>, count);<br><span class=\"hljs-comment\">//                if(count &lt;= 0) &#123;</span><br><span class=\"hljs-comment\">//                    continue;</span><br><span class=\"hljs-comment\">//                &#125;</span><br><br>                <span class=\"hljs-comment\">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();<br><br>                <span class=\"hljs-comment\">// 遍历所有事件，逐一处理</span><br>                Iterator&lt;SelectionKey&gt; iter = keys.iterator();<br>                <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                    <span class=\"hljs-comment\">// 判断事件类型</span><br>                    <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>                        <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> (ServerSocketChannel) key.channel();<br>                        <span class=\"hljs-comment\">// 必须处理</span><br>                        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> c.accept();<br>                        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, sc);<br>                    &#125;<br>                    <span class=\"hljs-comment\">// 处理完毕，必须将事件移除</span><br>                    iter.remove();<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-事件发生后能否不处理\"><a href=\"#💡-事件发生后能否不处理\" class=\"headerlink\" title=\"💡 事件发生后能否不处理\"></a>💡 事件发生后能否不处理</h4><blockquote>\n<p>事件发生后，要么处理，要么取消（cancel），不能什么都不做，否则下次该事件仍会触发，这是因为 nio 底层使用的是水平触发</p>\n</blockquote>\n<h3 id=\"4-4-处理-read-事件\"><a href=\"#4-4-处理-read-事件\" class=\"headerlink\" title=\"4.4 处理 read 事件\"></a>4.4 处理 read 事件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChannelDemo6</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open()) &#123;<br>            channel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>            System.out.println(channel);<br>            <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>            channel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>            channel.register(selector, SelectionKey.OP_ACCEPT);<br><br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.select();<br><span class=\"hljs-comment\">//                int count = selector.selectNow();</span><br>                log.debug(<span class=\"hljs-string\">&quot;select count: &#123;&#125;&quot;</span>, count);<br><span class=\"hljs-comment\">//                if(count &lt;= 0) &#123;</span><br><span class=\"hljs-comment\">//                    continue;</span><br><span class=\"hljs-comment\">//                &#125;</span><br><br>                <span class=\"hljs-comment\">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();<br><br>                <span class=\"hljs-comment\">// 遍历所有事件，逐一处理</span><br>                Iterator&lt;SelectionKey&gt; iter = keys.iterator();<br>                <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                    <span class=\"hljs-comment\">// 判断事件类型</span><br>                    <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>                        <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> (ServerSocketChannel) key.channel();<br>                        <span class=\"hljs-comment\">// 必须处理</span><br>                        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> c.accept();<br>                        sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                        sc.register(selector, SelectionKey.OP_READ);<br>                        log.debug(<span class=\"hljs-string\">&quot;连接已建立: &#123;&#125;&quot;</span>, sc);<br>                    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isReadable()) &#123;<br>                        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> (SocketChannel) key.channel();<br>                        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">128</span>);<br>                        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> sc.read(buffer);<br>                        <span class=\"hljs-keyword\">if</span>(read == -<span class=\"hljs-number\">1</span>) &#123;<br>                            key.cancel();<br>                            sc.close();<br>                        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                            buffer.flip();<br>                            debug(buffer);<br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-comment\">// 处理完毕，必须将事件移除</span><br>                    iter.remove();<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>开启两个客户端，修改一下发送文字，输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">sun.nio.ch.ServerSocketChannelImpl[/0:0:0:0:0:0:0:0:8080]<br>21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br>21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60367]<br>21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 65 6c 6c 6f                                  |hello           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br>21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60378]<br>21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 77 6f 72 6c 64                                  |world           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-为何要-iter-remove\"><a href=\"#💡-为何要-iter-remove\" class=\"headerlink\" title=\"💡 为何要 iter.remove()\"></a>💡 为何要 iter.remove()</h4><blockquote>\n<p>因为 select 在事件发生后，就会将相关的 key 放入 selectedKeys 集合，但不会在处理完后从 selectedKeys 集合中移除，需要我们自己编码删除。例如</p>\n<ul>\n<li>第一次触发了 ssckey 上的 accept 事件，没有移除 ssckey </li>\n<li>第二次触发了 sckey 上的 read 事件，但这时 selectedKeys 中还有上次的 ssckey ，在处理时因为没有真正的 serverSocket 连上了，就会导致空指针异常</li>\n</ul>\n</blockquote>\n<h4 id=\"💡-cancel-的作用\"><a href=\"#💡-cancel-的作用\" class=\"headerlink\" title=\"💡 cancel 的作用\"></a>💡 cancel 的作用</h4><blockquote>\n<p>cancel 会取消注册在 selector 上的 channel，并从 keys 集合中删除 key 后续不会再监听事件</p>\n</blockquote>\n<h4 id=\"⚠️-不处理边界的问题\"><a href=\"#⚠️-不处理边界的问题\" class=\"headerlink\" title=\"⚠️  不处理边界的问题\"></a>⚠️  不处理边界的问题</h4><p>以前有同学写过这样的代码，思考注释中两个问题，以 bio 为例，其实 nio 道理是一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Server</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        ServerSocket ss=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerSocket</span>(<span class=\"hljs-number\">9000</span>);<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> ss.accept();<br>            <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> s.getInputStream();<br>            <span class=\"hljs-comment\">// 这里这么写，有没有问题</span><br>            <span class=\"hljs-type\">byte</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">4</span>];<br>            <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> in.read(arr);<br>                <span class=\"hljs-comment\">// 这里这么写，有没有问题</span><br>                <span class=\"hljs-keyword\">if</span>(read == -<span class=\"hljs-number\">1</span>) &#123;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>                System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(arr, <span class=\"hljs-number\">0</span>, read));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Client</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9000</span>);<br>        <span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> max.getOutputStream();<br>        out.write(<span class=\"hljs-string\">&quot;hello&quot;</span>.getBytes());<br>        out.write(<span class=\"hljs-string\">&quot;world&quot;</span>.getBytes());<br>        out.write(<span class=\"hljs-string\">&quot;你好&quot;</span>.getBytes());<br>        max.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">hell<br>owor<br><span class=\"hljs-keyword\">ld</span>�<br>�好<br><br></code></pre></td></tr></table></figure>\n\n<p>为什么？</p>\n<h4 id=\"处理消息的边界\"><a href=\"#处理消息的边界\" class=\"headerlink\" title=\"处理消息的边界\"></a>处理消息的边界</h4><p><img src=\"/img/0023.png\"></p>\n<ul>\n<li>一种思路是固定消息长度，数据包大小一样，服务器按预定长度读取，缺点是浪费带宽</li>\n<li>另一种思路是按分隔符拆分，缺点是效率低</li>\n<li>TLV 格式，即 Type 类型、Length 长度、Value 数据，类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量<ul>\n<li>Http 1.1 是 TLV 格式</li>\n<li>Http 2.0 是 LTV 格式</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\" mermaid\">sequenceDiagram \nparticipant c1 as 客户端1\nparticipant s as 服务器\nparticipant b1 as ByteBuffer1\nparticipant b2 as ByteBuffer2\nc1 -&gt;&gt; s: 发送 01234567890abcdef3333\\r\ns -&gt;&gt; b1: 第一次 read 存入 01234567890abcdef\ns -&gt;&gt; b2: 扩容\nb1 -&gt;&gt; b2: 拷贝 01234567890abcdef\ns -&gt;&gt; b2: 第二次 read 存入 3333\\r\nb2 -&gt;&gt; b2: 01234567890abcdef3333\\r\n</code></pre>\n\n<p>服务器端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">split</span><span class=\"hljs-params\">(ByteBuffer source)</span> &#123;<br>    source.flip();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; source.limit(); i++) &#123;<br>        <span class=\"hljs-comment\">// 找到一条完整消息</span><br>        <span class=\"hljs-keyword\">if</span> (source.get(i) == <span class=\"hljs-string\">&#x27;\\n&#x27;</span>) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> i + <span class=\"hljs-number\">1</span> - source.position();<br>            <span class=\"hljs-comment\">// 把这条完整消息存入新的 ByteBuffer</span><br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(length);<br>            <span class=\"hljs-comment\">// 从 source 读，向 target 写</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; length; j++) &#123;<br>                target.put(source.get());<br>            &#125;<br>            debugAll(target);<br>        &#125;<br>    &#125;<br>    source.compact(); <span class=\"hljs-comment\">// 0123456789abcdef  position 16 limit 16</span><br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-comment\">// 1. 创建 selector, 管理多个 channel</span><br>    <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>    <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br>    ssc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>    <span class=\"hljs-comment\">// 2. 建立 selector 和 channel 的联系（注册）</span><br>    <span class=\"hljs-comment\">// SelectionKey 就是将来事件发生后，通过它可以知道事件和哪个channel的事件</span><br>    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">sscKey</span> <span class=\"hljs-operator\">=</span> ssc.register(selector, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>);<br>    <span class=\"hljs-comment\">// key 只关注 accept 事件</span><br>    sscKey.interestOps(SelectionKey.OP_ACCEPT);<br>    log.debug(<span class=\"hljs-string\">&quot;sscKey:&#123;&#125;&quot;</span>, sscKey);<br>    ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-comment\">// 3. select 方法, 没有事件发生，线程阻塞，有事件，线程才会恢复运行</span><br>        <span class=\"hljs-comment\">// select 在事件未处理时，它不会阻塞, 事件发生后要么处理，要么取消，不能置之不理</span><br>        selector.select();<br>        <span class=\"hljs-comment\">// 4. 处理事件, selectedKeys 内部包含了所有发生的事件</span><br>        Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator(); <span class=\"hljs-comment\">// accept, read</span><br>        <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>            <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>            <span class=\"hljs-comment\">// 处理key 时，要从 selectedKeys 集合中删除，否则下次处理就会有问题</span><br>            iter.remove();<br>            log.debug(<span class=\"hljs-string\">&quot;key: &#123;&#125;&quot;</span>, key);<br>            <span class=\"hljs-comment\">// 5. 区分事件类型</span><br>            <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123; <span class=\"hljs-comment\">// 如果是 accept</span><br>                <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> (ServerSocketChannel) key.channel();<br>                <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> channel.accept();<br>                sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>); <span class=\"hljs-comment\">// attachment</span><br>                <span class=\"hljs-comment\">// 将一个 byteBuffer 作为附件关联到 selectionKey 上</span><br>                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">scKey</span> <span class=\"hljs-operator\">=</span> sc.register(selector, <span class=\"hljs-number\">0</span>, buffer);<br>                scKey.interestOps(SelectionKey.OP_READ);<br>                log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, sc);<br>                log.debug(<span class=\"hljs-string\">&quot;scKey:&#123;&#125;&quot;</span>, scKey);<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isReadable()) &#123; <span class=\"hljs-comment\">// 如果是 read</span><br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> (SocketChannel) key.channel(); <span class=\"hljs-comment\">// 拿到触发事件的channel</span><br>                    <span class=\"hljs-comment\">// 获取 selectionKey 上关联的附件</span><br>                    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuffer) key.attachment();<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> channel.read(buffer); <span class=\"hljs-comment\">// 如果是正常断开，read 的方法的返回值是 -1</span><br>                    <span class=\"hljs-keyword\">if</span>(read == -<span class=\"hljs-number\">1</span>) &#123;<br>                        key.cancel();<br>                    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                        split(buffer);<br>                        <span class=\"hljs-comment\">// 需要扩容</span><br>                        <span class=\"hljs-keyword\">if</span> (buffer.position() == buffer.limit()) &#123;<br>                            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">newBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(buffer.capacity() * <span class=\"hljs-number\">2</span>);<br>                            buffer.flip();<br>                            newBuffer.put(buffer); <span class=\"hljs-comment\">// 0123456789abcdef3333\\n</span><br>                            key.attach(newBuffer);<br>                        &#125;<br>                    &#125;<br><br>                &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                    key.cancel();  <span class=\"hljs-comment\">// 因为客户端断开了,因此需要将 key 取消（从 selector 的 keys 集合中真正删除 key）</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> SocketChannel.open();<br>sc.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>));<br><span class=\"hljs-type\">SocketAddress</span> <span class=\"hljs-variable\">address</span> <span class=\"hljs-operator\">=</span> sc.getLocalAddress();<br><span class=\"hljs-comment\">// sc.write(Charset.defaultCharset().encode(&quot;hello\\nworld\\n&quot;));</span><br>sc.write(Charset.defaultCharset().encode(<span class=\"hljs-string\">&quot;0123\\n456789abcdef&quot;</span>));<br>sc.write(Charset.defaultCharset().encode(<span class=\"hljs-string\">&quot;0123456789abcdef3333\\n&quot;</span>));<br>System.in.read();<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"ByteBuffer-大小分配\"><a href=\"#ByteBuffer-大小分配\" class=\"headerlink\" title=\"ByteBuffer 大小分配\"></a>ByteBuffer 大小分配</h4><ul>\n<li>每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer</li>\n<li>ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer<ul>\n<li>一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 <a href=\"http://tutorials.jenkov.com/java-performance/resizable-array.html\">http://tutorials.jenkov.com/java-performance/resizable-array.html</a></li>\n<li>另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-5-处理-write-事件\"><a href=\"#4-5-处理-write-事件\" class=\"headerlink\" title=\"4.5 处理 write 事件\"></a>4.5 处理 write 事件</h3><h4 id=\"一次无法写完例子\"><a href=\"#一次无法写完例子\" class=\"headerlink\" title=\"一次无法写完例子\"></a>一次无法写完例子</h4><ul>\n<li>非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）</li>\n<li>用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略<ul>\n<li>当消息处理器第一次写入消息时，才将 channel 注册到 selector 上</li>\n<li>selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册</li>\n<li>如果不取消，会每次可写均会触发 write 事件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WriteServer</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br>        ssc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>        ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br><br>        <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>        ssc.register(selector, SelectionKey.OP_ACCEPT);<br><br>        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br>            selector.select();<br><br>            Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();<br>            <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                iter.remove();<br>                <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>                    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> ssc.accept();<br>                    sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">sckey</span> <span class=\"hljs-operator\">=</span> sc.register(selector, SelectionKey.OP_READ);<br>                    <span class=\"hljs-comment\">// 1. 向客户端发送内容</span><br>                    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3000000</span>; i++) &#123;<br>                        sb.append(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>                    &#125;<br>                    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> Charset.defaultCharset().encode(sb.toString());<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">write</span> <span class=\"hljs-operator\">=</span> sc.write(buffer);<br>                    <span class=\"hljs-comment\">// 3. write 表示实际写了多少字节</span><br>                    System.out.println(<span class=\"hljs-string\">&quot;实际写入字节:&quot;</span> + write);<br>                    <span class=\"hljs-comment\">// 4. 如果有剩余未读字节，才需要关注写事件</span><br>                    <span class=\"hljs-keyword\">if</span> (buffer.hasRemaining()) &#123;<br>                        <span class=\"hljs-comment\">// read 1  write 4</span><br>                        <span class=\"hljs-comment\">// 在原有关注事件的基础上，多关注 写事件</span><br>                        sckey.interestOps(sckey.interestOps() + SelectionKey.OP_WRITE);<br>                        <span class=\"hljs-comment\">// 把 buffer 作为附件加入 sckey</span><br>                        sckey.attach(buffer);<br>                    &#125;<br>                &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isWritable()) &#123;<br>                    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuffer) key.attachment();<br>                    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> (SocketChannel) key.channel();<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">write</span> <span class=\"hljs-operator\">=</span> sc.write(buffer);<br>                    System.out.println(<span class=\"hljs-string\">&quot;实际写入字节:&quot;</span> + write);<br>                    <span class=\"hljs-keyword\">if</span> (!buffer.hasRemaining()) &#123; <span class=\"hljs-comment\">// 写完了</span><br>                        key.interestOps(key.interestOps() - SelectionKey.OP_WRITE);<br>                        key.attach(<span class=\"hljs-literal\">null</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WriteClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> SocketChannel.open();<br>        sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>        sc.register(selector, SelectionKey.OP_CONNECT | SelectionKey.OP_READ);<br>        sc.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>));<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            selector.select();<br>            Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();<br>            <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                iter.remove();<br>                <span class=\"hljs-keyword\">if</span> (key.isConnectable()) &#123;<br>                    System.out.println(sc.finishConnect());<br>                &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isReadable()) &#123;<br>                    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>);<br>                    count += sc.read(buffer);<br>                    buffer.clear();<br>                    System.out.println(count);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-write-为何要取消\"><a href=\"#💡-write-为何要取消\" class=\"headerlink\" title=\"💡 write 为何要取消\"></a>💡 write 为何要取消</h4><p>只要向 channel 发送数据时，socket 缓冲可写，这个事件会频繁触发，因此应当只在 socket 缓冲区写不下时再关注可写事件，数据写完之后再取消关注</p>\n<h3 id=\"4-6-更进一步\"><a href=\"#4-6-更进一步\" class=\"headerlink\" title=\"4.6 更进一步\"></a>4.6 更进一步</h3><h4 id=\"💡-利用多线程优化\"><a href=\"#💡-利用多线程优化\" class=\"headerlink\" title=\"💡 利用多线程优化\"></a>💡 利用多线程优化</h4><blockquote>\n<p>现在都是多核 cpu，设计时要充分考虑别让 cpu 的力量被白白浪费</p>\n</blockquote>\n<p>前面的代码只有一个选择器，没有充分利用多核 cpu，如何改进呢？</p>\n<p>分两组选择器</p>\n<ul>\n<li>单线程配一个选择器，专门处理 accept 事件</li>\n<li>创建 cpu 核心数的线程，每个线程配一个选择器，轮流处理 read 事件</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChannelDemo7</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BossEventLoop</span>().register();<br>    &#125;<br><br><br>    <span class=\"hljs-meta\">@Slf4j</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BossEventLoop</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;<br>        <span class=\"hljs-keyword\">private</span> Selector boss;<br>        <span class=\"hljs-keyword\">private</span> WorkerEventLoop[] workers;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>        <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>            <span class=\"hljs-keyword\">if</span> (!start) &#123;<br>                <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br>                ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>                ssc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                boss = Selector.open();<br>                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">ssckey</span> <span class=\"hljs-operator\">=</span> ssc.register(boss, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>);<br>                ssckey.interestOps(SelectionKey.OP_ACCEPT);<br>                workers = initEventLoops();<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-string\">&quot;boss&quot;</span>).start();<br>                log.debug(<span class=\"hljs-string\">&quot;boss start...&quot;</span>);<br>                start = <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> WorkerEventLoop[] initEventLoops() &#123;<br><span class=\"hljs-comment\">//        EventLoop[] eventLoops = new EventLoop[Runtime.getRuntime().availableProcessors()];</span><br>            WorkerEventLoop[] workerEventLoops = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WorkerEventLoop</span>[<span class=\"hljs-number\">2</span>];<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; workerEventLoops.length; i++) &#123;<br>                workerEventLoops[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WorkerEventLoop</span>(i);<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> workerEventLoops;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    boss.select();<br>                    Iterator&lt;SelectionKey&gt; iter = boss.selectedKeys().iterator();<br>                    <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                        <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                        iter.remove();<br>                        <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>                            <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> (ServerSocketChannel) key.channel();<br>                            <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> c.accept();<br>                            sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                            log.debug(<span class=\"hljs-string\">&quot;&#123;&#125; connected&quot;</span>, sc.getRemoteAddress());<br>                            workers[index.getAndIncrement() % workers.length].register(sc);<br>                        &#125;<br>                    &#125;<br>                &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Slf4j</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WorkerEventLoop</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;<br>        <span class=\"hljs-keyword\">private</span> Selector worker;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> index;<br><br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ConcurrentLinkedQueue&lt;Runnable&gt; tasks = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentLinkedQueue</span>&lt;&gt;();<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">WorkerEventLoop</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.index = index;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(SocketChannel sc)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>            <span class=\"hljs-keyword\">if</span> (!start) &#123;<br>                worker = Selector.open();<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-string\">&quot;worker-&quot;</span> + index).start();<br>                start = <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            tasks.add(() -&gt; &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">sckey</span> <span class=\"hljs-operator\">=</span> sc.register(worker, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>);<br>                    sckey.interestOps(SelectionKey.OP_READ);<br>                    worker.selectNow();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;);<br>            worker.wakeup();<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    worker.select();<br>                    <span class=\"hljs-type\">Runnable</span> <span class=\"hljs-variable\">task</span> <span class=\"hljs-operator\">=</span> tasks.poll();<br>                    <span class=\"hljs-keyword\">if</span> (task != <span class=\"hljs-literal\">null</span>) &#123;<br>                        task.run();<br>                    &#125;<br>                    Set&lt;SelectionKey&gt; keys = worker.selectedKeys();<br>                    Iterator&lt;SelectionKey&gt; iter = keys.iterator();<br>                    <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                        <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                        <span class=\"hljs-keyword\">if</span> (key.isReadable()) &#123;<br>                            <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> (SocketChannel) key.channel();<br>                            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">128</span>);<br>                            <span class=\"hljs-keyword\">try</span> &#123;<br>                                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> sc.read(buffer);<br>                                <span class=\"hljs-keyword\">if</span> (read == -<span class=\"hljs-number\">1</span>) &#123;<br>                                    key.cancel();<br>                                    sc.close();<br>                                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                                    buffer.flip();<br>                                    log.debug(<span class=\"hljs-string\">&quot;&#123;&#125; message:&quot;</span>, sc.getRemoteAddress());<br>                                    debugAll(buffer);<br>                                &#125;<br>                            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                e.printStackTrace();<br>                                key.cancel();<br>                                sc.close();<br>                            &#125;<br>                        &#125;<br>                        iter.remove();<br>                    &#125;<br>                &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-如何拿到-cpu-个数\"><a href=\"#💡-如何拿到-cpu-个数\" class=\"headerlink\" title=\"💡 如何拿到 cpu 个数\"></a>💡 如何拿到 cpu 个数</h4><blockquote>\n<ul>\n<li>Runtime.getRuntime().availableProcessors() 如果工作在 docker 容器下，因为容器不是物理隔离的，会拿到物理 cpu 个数，而不是容器申请时的个数</li>\n<li>这个问题直到 jdk 10 才修复，使用 jvm 参数 UseContainerSupport 配置， 默认开启</li>\n</ul>\n</blockquote>\n<h3 id=\"4-7-UDP\"><a href=\"#4-7-UDP\" class=\"headerlink\" title=\"4.7 UDP\"></a>4.7 UDP</h3><ul>\n<li>UDP 是无连接的，client 发送数据不会管 server 是否开启</li>\n<li>server 这边的 receive 方法会将接收到的数据存入 byte buffer，但如果数据报文超过 buffer 大小，多出来的数据会被默默抛弃</li>\n</ul>\n<p>首先启动服务器端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UdpServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">DatagramChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> DatagramChannel.open()) &#123;<br>            channel.socket().bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">9999</span>));<br>            System.out.println(<span class=\"hljs-string\">&quot;waiting...&quot;</span>);<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">32</span>);<br>            channel.receive(buffer);<br>            buffer.flip();<br>            debug(buffer);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-function\"><span class=\"hljs-title\">waiting</span></span>...<br></code></pre></td></tr></table></figure>\n\n\n\n<p>运行客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UdpClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">DatagramChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> DatagramChannel.open()) &#123;<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> StandardCharsets.UTF_8.encode(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>            <span class=\"hljs-type\">InetSocketAddress</span> <span class=\"hljs-variable\">address</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9999</span>);<br>            channel.send(buffer, address);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来服务器端输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 65 6c 6c 6f                                  |hello           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"5-NIO-vs-BIO\"><a href=\"#5-NIO-vs-BIO\" class=\"headerlink\" title=\"5. NIO vs BIO\"></a>5. NIO vs BIO</h2><h3 id=\"5-1-stream-vs-channel\"><a href=\"#5-1-stream-vs-channel\" class=\"headerlink\" title=\"5.1 stream vs channel\"></a>5.1 stream vs channel</h3><ul>\n<li>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</li>\n<li>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，网络 channel 可配合 selector 实现多路复用</li>\n<li>二者均为全双工，即读写可以同时进行</li>\n</ul>\n<h3 id=\"5-2-IO-模型\"><a href=\"#5-2-IO-模型\" class=\"headerlink\" title=\"5.2 IO 模型\"></a>5.2 IO 模型</h3><p>同步阻塞、同步非阻塞、同步多路复用、异步阻塞（没有此情况）、异步非阻塞</p>\n<ul>\n<li>同步：线程自己去获取结果（一个线程）</li>\n<li>异步：线程自己不去获取结果，而是由其它线程送结果（至少两个线程）</li>\n</ul>\n<p>当调用一次 channel.read 或 stream.read 后，会切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：</p>\n<ul>\n<li>等待数据阶段</li>\n<li>复制数据阶段</li>\n</ul>\n<p><img src=\"/img/0033.png\"></p>\n<ul>\n<li><p>阻塞 IO</p>\n<p><img src=\"/img/0039.png\"></p>\n</li>\n<li><p>非阻塞  IO</p>\n<p><img src=\"/img/0035.png\"></p>\n</li>\n<li><p>多路复用</p>\n<p><img src=\"/img/0038.png\"></p>\n</li>\n<li><p>信号驱动</p>\n</li>\n<li><p>异步 IO</p>\n<p><img src=\"/img/0037.png\"></p>\n</li>\n<li><p>阻塞 IO vs 多路复用</p>\n<p><img src=\"/img/0034.png\"></p>\n<p><img src=\"/img/0036.png\"></p>\n</li>\n</ul>\n<h4 id=\"🔖-参考\"><a href=\"#🔖-参考\" class=\"headerlink\" title=\"🔖 参考\"></a>🔖 参考</h4><p>UNIX 网络编程 - 卷 I</p>\n<h3 id=\"5-3-零拷贝\"><a href=\"#5-3-零拷贝\" class=\"headerlink\" title=\"5.3 零拷贝\"></a>5.3 零拷贝</h3><h4 id=\"传统-IO-问题\"><a href=\"#传统-IO-问题\" class=\"headerlink\" title=\"传统 IO 问题\"></a>传统 IO 问题</h4><p>传统的 IO 将一个文件通过 socket 写出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br><span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(file, <span class=\"hljs-string\">&quot;r&quot;</span>);<br><br><span class=\"hljs-type\">byte</span>[] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[(<span class=\"hljs-type\">int</span>)f.length()];<br>file.read(buf);<br><br><span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">socket</span> <span class=\"hljs-operator\">=</span> ...;<br>socket.getOutputStream().write(buf);<br></code></pre></td></tr></table></figure>\n\n<p>内部工作流程是这样的：</p>\n<p><img src=\"/img/0024.png\"></p>\n<ol>\n<li><p>java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu</p>\n<blockquote>\n<p>DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</p>\n</blockquote>\n</li>\n<li><p>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA</p>\n</li>\n<li><p>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</p>\n</li>\n<li><p>接下来要向网卡写数据，这项能力 java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</p>\n</li>\n</ol>\n<p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p>\n<ul>\n<li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li>\n<li>数据拷贝了共 4 次</li>\n</ul>\n<h4 id=\"NIO-优化\"><a href=\"#NIO-优化\" class=\"headerlink\" title=\"NIO 优化\"></a>NIO 优化</h4><p>通过 DirectByteBuf </p>\n<ul>\n<li>ByteBuffer.allocate(10)  HeapByteBuffer 使用的还是 java 内存</li>\n<li>ByteBuffer.allocateDirect(10)  DirectByteBuffer 使用的是操作系统内存</li>\n</ul>\n<p><img src=\"/img/0025.png\"></p>\n<p>大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用</p>\n<ul>\n<li>这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</li>\n<li>java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步<ul>\n<li>DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列</li>\n<li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li>\n</ul>\n</li>\n<li>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</li>\n</ul>\n<p>进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo&#x2F;transferFrom 方法拷贝数据</p>\n<p><img src=\"/img/0026.png\"></p>\n<ol>\n<li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li>\n<li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</li>\n<li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</li>\n</ol>\n<p>可以看到</p>\n<ul>\n<li>只发生了一次用户态与内核态的切换</li>\n<li>数据拷贝了 3 次</li>\n</ul>\n<p>进一步优化（linux 2.4）</p>\n<p><img src=\"/img/0027.png\"></p>\n<ol>\n<li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li>\n<li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li>\n<li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 cpu</li>\n</ol>\n<p>整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有</p>\n<ul>\n<li>更少的用户态与内核态的切换</li>\n<li>不利用 cpu 计算，减少 cpu 缓存伪共享</li>\n<li>零拷贝适合小文件传输</li>\n</ul>\n<h3 id=\"5-3-AIO\"><a href=\"#5-3-AIO\" class=\"headerlink\" title=\"5.3 AIO\"></a>5.3 AIO</h3><p>AIO 用来解决数据复制阶段的阻塞问题</p>\n<ul>\n<li>同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置</li>\n<li>异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果</li>\n</ul>\n<blockquote>\n<p>异步模型需要底层操作系统（Kernel）提供支持</p>\n<ul>\n<li>Windows 系统通过 IOCP 实现了真正的异步 IO</li>\n<li>Linux 系统异步 IO 在 2.6 版本引入，但其底层实现还是用多路复用模拟了异步 IO，性能没有优势</li>\n</ul>\n</blockquote>\n<h4 id=\"文件-AIO\"><a href=\"#文件-AIO\" class=\"headerlink\" title=\"文件 AIO\"></a>文件 AIO</h4><p>先来看看 AsynchronousFileChannel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AioDemo1</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-type\">AsynchronousFileChannel</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <br>                AsynchronousFileChannel.open(<br>                \tPaths.get(<span class=\"hljs-string\">&quot;1.txt&quot;</span>), StandardOpenOption.READ);<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">2</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;begin...&quot;</span>);<br>            s.read(buffer, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(Integer result, ByteBuffer attachment)</span> &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;read completed...&#123;&#125;&quot;</span>, result);<br>                    buffer.flip();<br>                    debug(buffer);<br>                &#125;<br><br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;read failed...&quot;</span>);<br>                &#125;<br>            &#125;);<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.debug(<span class=\"hljs-string\">&quot;do other things...&quot;</span>);<br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - begin...<br>13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - do other things...<br>13:44:56 [DEBUG] [Thread-5] c.i.aio.AioDemo1 - read completed...2<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 61 0d                                           |a.              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到</p>\n<ul>\n<li>响应文件读取成功的是另一个线程 Thread-5</li>\n<li>主线程并没有 IO 操作阻塞</li>\n</ul>\n<h4 id=\"💡-守护线程\"><a href=\"#💡-守护线程\" class=\"headerlink\" title=\"💡 守护线程\"></a>💡 守护线程</h4><p>默认文件 AIO 使用的线程都是守护线程，所以最后要执行 <code>System.in.read()</code> 以避免守护线程意外结束</p>\n<h4 id=\"网络-AIO\"><a href=\"#网络-AIO\" class=\"headerlink\" title=\"网络 AIO\"></a>网络 AIO</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AioServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">AsynchronousServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> AsynchronousServerSocketChannel.open();<br>        ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>        ssc.accept(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AcceptHandler</span>(ssc));<br>        System.in.read();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">closeChannel</span><span class=\"hljs-params\">(AsynchronousSocketChannel sc)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            System.out.printf(<span class=\"hljs-string\">&quot;[%s] %s close\\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());<br>            sc.close();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReadHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt; &#123;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> AsynchronousSocketChannel sc;<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ReadHandler</span><span class=\"hljs-params\">(AsynchronousSocketChannel sc)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.sc = sc;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(Integer result, ByteBuffer attachment)</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (result == -<span class=\"hljs-number\">1</span>) &#123;<br>                    closeChannel(sc);<br>                    <span class=\"hljs-keyword\">return</span>;<br>                &#125;<br>                System.out.printf(<span class=\"hljs-string\">&quot;[%s] %s read\\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());<br>                attachment.flip();<br>                System.out.println(Charset.defaultCharset().decode(attachment));<br>                attachment.clear();<br>                <span class=\"hljs-comment\">// 处理完第一个 read 时，需要再次调用 read 方法来处理下一个 read 事件</span><br>                sc.read(attachment, attachment, <span class=\"hljs-built_in\">this</span>);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>            closeChannel(sc);<br>            exc.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WriteHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt; &#123;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> AsynchronousSocketChannel sc;<br><br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">WriteHandler</span><span class=\"hljs-params\">(AsynchronousSocketChannel sc)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.sc = sc;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(Integer result, ByteBuffer attachment)</span> &#123;<br>            <span class=\"hljs-comment\">// 如果作为附件的 buffer 还有内容，需要再次 write 写出剩余内容</span><br>            <span class=\"hljs-keyword\">if</span> (attachment.hasRemaining()) &#123;<br>                sc.write(attachment);<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>            exc.printStackTrace();<br>            closeChannel(sc);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AcceptHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;AsynchronousSocketChannel, Object&gt; &#123;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> AsynchronousServerSocketChannel ssc;<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AcceptHandler</span><span class=\"hljs-params\">(AsynchronousServerSocketChannel ssc)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.ssc = ssc;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(AsynchronousSocketChannel sc, Object attachment)</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                System.out.printf(<span class=\"hljs-string\">&quot;[%s] %s connected\\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>);<br>            <span class=\"hljs-comment\">// 读事件由 ReadHandler 处理</span><br>            sc.read(buffer, buffer, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReadHandler</span>(sc));<br>            <span class=\"hljs-comment\">// 写事件由 WriteHandler 处理</span><br>            sc.write(Charset.defaultCharset().encode(<span class=\"hljs-string\">&quot;server hello!&quot;</span>), ByteBuffer.allocate(<span class=\"hljs-number\">16</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteHandler</span>(sc));<br>            <span class=\"hljs-comment\">// 处理完第一个 accpet 时，需要再次调用 accept 方法来处理下一个 accept 事件</span><br>            ssc.accept(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-built_in\">this</span>);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, Object attachment)</span> &#123;<br>            exc.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>该笔记是B站黑马的Netty视频的配套笔记1。</p>","more":"<h1 id=\"一-NIO-基础\"><a href=\"#一-NIO-基础\" class=\"headerlink\" title=\"一. NIO 基础\"></a>一. NIO 基础</h1><p>non-blocking io 非阻塞 IO</p>\n<h2 id=\"1-三大组件\"><a href=\"#1-三大组件\" class=\"headerlink\" title=\"1. 三大组件\"></a>1. 三大组件</h2><h3 id=\"1-1-Channel-amp-Buffer\"><a href=\"#1-1-Channel-amp-Buffer\" class=\"headerlink\" title=\"1.1 Channel &amp; Buffer\"></a>1.1 Channel &amp; Buffer</h3><p>channel 有一点类似于 stream，它就是读写数据的<strong>双向通道</strong>，可以从 channel 将数据读入 buffer，也可以将 buffer 的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel 比 stream 更为底层</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">graph LR<br>channel --&gt; buffer<br>buffer --&gt; channel<br></code></pre></td></tr></table></figure>\n\n<p>常见的 Channel 有</p>\n<ul>\n<li>FileChannel</li>\n<li>DatagramChannel</li>\n<li>SocketChannel</li>\n<li>ServerSocketChannel</li>\n</ul>\n<p>buffer 则用来缓冲读写数据，常见的 buffer 有</p>\n<ul>\n<li>ByteBuffer<ul>\n<li>MappedByteBuffer</li>\n<li>DirectByteBuffer</li>\n<li>HeapByteBuffer</li>\n</ul>\n</li>\n<li>ShortBuffer</li>\n<li>IntBuffer</li>\n<li>LongBuffer</li>\n<li>FloatBuffer</li>\n<li>DoubleBuffer</li>\n<li>CharBuffer</li>\n</ul>\n<h3 id=\"1-2-Selector\"><a href=\"#1-2-Selector\" class=\"headerlink\" title=\"1.2 Selector\"></a>1.2 Selector</h3><p>selector 单从字面意思不好理解，需要结合服务器的设计演化来理解它的用途</p>\n<h4 id=\"多线程版设计\"><a href=\"#多线程版设计\" class=\"headerlink\" title=\"多线程版设计\"></a>多线程版设计</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">graph TD<br>subgraph 多线程版<br>t1(thread) --&gt; s1(socket1)<br>t2(thread) --&gt; s2(socket2)<br>t3(thread) --&gt; s3(socket3)<br>end<br></code></pre></td></tr></table></figure>\n<h4 id=\"⚠️-多线程版缺点\"><a href=\"#⚠️-多线程版缺点\" class=\"headerlink\" title=\"⚠️ 多线程版缺点\"></a>⚠️ 多线程版缺点</h4><ul>\n<li>内存占用高</li>\n<li>线程上下文切换成本高</li>\n<li>只适合连接数少的场景</li>\n</ul>\n<h4 id=\"线程池版设计\"><a href=\"#线程池版设计\" class=\"headerlink\" title=\"线程池版设计\"></a>线程池版设计</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">graph TD<br>subgraph 线程池版<br>t4(thread) --&gt; s4(socket1)<br>t5(thread) --&gt; s5(socket2)<br>t4(thread) -.-&gt; s6(socket3)<br>t5(thread) -.-&gt; s7(socket4)<br>end<br></code></pre></td></tr></table></figure>\n<h4 id=\"⚠️-线程池版缺点\"><a href=\"#⚠️-线程池版缺点\" class=\"headerlink\" title=\"⚠️ 线程池版缺点\"></a>⚠️ 线程池版缺点</h4><ul>\n<li>阻塞模式下，线程仅能处理一个 socket 连接</li>\n<li>仅适合短连接场景</li>\n</ul>\n<h4 id=\"selector-版设计\"><a href=\"#selector-版设计\" class=\"headerlink\" title=\"selector 版设计\"></a>selector 版设计</h4><p>selector 的作用就是配合一个线程来管理多个 channel，获取这些 channel 上发生的事件，这些 channel 工作在非阻塞模式下，不会让线程吊死在一个 channel 上。适合连接数特别多，但流量低的场景（low traffic）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">graph TD<br>subgraph selector 版<br>thread --&gt; selector<br>selector --&gt; c1(channel)<br>selector --&gt; c2(channel)<br>selector --&gt; c3(channel)<br>end<br></code></pre></td></tr></table></figure>\n\n\n\n<p>调用 selector 的 select() 会阻塞直到 channel 发生了读写就绪事件，这些事件发生，select 方法就会返回这些事件交给 thread 来处理</p>\n<h2 id=\"2-ByteBuffer\"><a href=\"#2-ByteBuffer\" class=\"headerlink\" title=\"2. ByteBuffer\"></a>2. ByteBuffer</h2><p>有一普通文本文件 data.txt，内容为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">1234567890abcd<br></code></pre></td></tr></table></figure>\n\n<p>使用 FileChannel 来读取文件内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChannelDemo1</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>)) &#123;<br>            <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> file.getChannel();<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">10</span>);<br>            <span class=\"hljs-keyword\">do</span> &#123;<br>                <span class=\"hljs-comment\">// 向 buffer 写入</span><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> channel.read(buffer);<br>                log.debug(<span class=\"hljs-string\">&quot;读到字节数：&#123;&#125;&quot;</span>, len);<br>                <span class=\"hljs-keyword\">if</span> (len == -<span class=\"hljs-number\">1</span>) &#123;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>                <span class=\"hljs-comment\">// 切换 buffer 读模式</span><br>                buffer.flip();<br>                <span class=\"hljs-keyword\">while</span>(buffer.hasRemaining()) &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, (<span class=\"hljs-type\">char</span>)buffer.get());<br>                &#125;<br>                <span class=\"hljs-comment\">// 切换 buffer 写模式</span><br>                buffer.clear();<br>            &#125; <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - 读到字节数：<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">9</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - 读到字节数：<span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-selector-tag\">a</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - <span class=\"hljs-selector-tag\">b</span><br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - c<br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - d<br><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">03</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.n</span><span class=\"hljs-selector-class\">.ChannelDemo1</span> - 读到字节数：-<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-1-ByteBuffer-正确使用姿势\"><a href=\"#2-1-ByteBuffer-正确使用姿势\" class=\"headerlink\" title=\"2.1  ByteBuffer 正确使用姿势\"></a>2.1  ByteBuffer 正确使用姿势</h3><ol>\n<li>向 buffer 写入数据，例如调用 channel.read(buffer)</li>\n<li>调用 flip() 切换至<strong>读模式</strong></li>\n<li>从 buffer 读取数据，例如调用 buffer.get()</li>\n<li>调用 clear() 或 compact() 切换至<strong>写模式</strong></li>\n<li>重复 1~4 步骤</li>\n</ol>\n<h3 id=\"2-2-ByteBuffer-结构\"><a href=\"#2-2-ByteBuffer-结构\" class=\"headerlink\" title=\"2.2 ByteBuffer 结构\"></a>2.2 ByteBuffer 结构</h3><p>ByteBuffer 有以下重要属性</p>\n<ul>\n<li>capacity</li>\n<li>position</li>\n<li>limit</li>\n</ul>\n<p>一开始</p>\n<p><img src=\"/img/0021.png\"></p>\n<p>写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态</p>\n<p><img src=\"/img/0018.png\"></p>\n<p>flip 动作发生后，position 切换为读取位置，limit 切换为读取限制</p>\n<p><img src=\"/img/0019.png\"></p>\n<p>读取 4 个字节后，状态</p>\n<p><img src=\"/img/0020.png\"></p>\n<p>clear 动作发生后，状态</p>\n<p><img src=\"/img/0021.png\"></p>\n<p>compact 方法，是把未读完的部分向前压缩，然后切换至写模式</p>\n<p><img src=\"/img/0022.png\"></p>\n<h4 id=\"💡-调试工具类\"><a href=\"#💡-调试工具类\" class=\"headerlink\" title=\"💡 调试工具类\"></a>💡 调试工具类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ByteBufferUtil</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] BYTE2CHAR = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">char</span>[<span class=\"hljs-number\">256</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] HEXDUMP_TABLE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">char</span>[<span class=\"hljs-number\">256</span> * <span class=\"hljs-number\">4</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] HEXPADDING = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">16</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] HEXDUMP_ROWPREFIXES = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">65536</span> &gt;&gt;&gt; <span class=\"hljs-number\">4</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] BYTE2HEX = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">256</span>];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] BYTEPADDING = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">16</span>];<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] DIGITS = <span class=\"hljs-string\">&quot;0123456789abcdef&quot;</span>.toCharArray();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">256</span>; i++) &#123;<br>            HEXDUMP_TABLE[i &lt;&lt; <span class=\"hljs-number\">1</span>] = DIGITS[i &gt;&gt;&gt; <span class=\"hljs-number\">4</span> &amp; <span class=\"hljs-number\">0x0F</span>];<br>            HEXDUMP_TABLE[(i &lt;&lt; <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>] = DIGITS[i &amp; <span class=\"hljs-number\">0x0F</span>];<br>        &#125;<br><br>        <span class=\"hljs-type\">int</span> i;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for hex dump paddings</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; HEXPADDING.length; i++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">padding</span> <span class=\"hljs-operator\">=</span> HEXPADDING.length - i;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(padding * <span class=\"hljs-number\">3</span>);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; padding; j++) &#123;<br>                buf.append(<span class=\"hljs-string\">&quot;   &quot;</span>);<br>            &#125;<br>            HEXPADDING[i] = buf.toString();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for the start-offset header in each row (up to 64KiB).</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; HEXDUMP_ROWPREFIXES.length; i++) &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(<span class=\"hljs-number\">12</span>);<br>            buf.append(NEWLINE);<br>            buf.append(Long.toHexString(i &lt;&lt; <span class=\"hljs-number\">4</span> &amp; <span class=\"hljs-number\">0xFFFFFFFFL</span> | <span class=\"hljs-number\">0x100000000L</span>));<br>            buf.setCharAt(buf.length() - <span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>            buf.append(<span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>            HEXDUMP_ROWPREFIXES[i] = buf.toString();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for byte-to-hex-dump conversion</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; BYTE2HEX.length; i++) &#123;<br>            BYTE2HEX[i] = <span class=\"hljs-string\">&#x27; &#x27;</span> + StringUtil.byteToHexStringPadded(i);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for byte dump paddings</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; BYTEPADDING.length; i++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">padding</span> <span class=\"hljs-operator\">=</span> BYTEPADDING.length - i;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(padding);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; padding; j++) &#123;<br>                buf.append(<span class=\"hljs-string\">&#x27; &#x27;</span>);<br>            &#125;<br>            BYTEPADDING[i] = buf.toString();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Generate the lookup table for byte-to-char conversion</span><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; BYTE2CHAR.length; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i &lt;= <span class=\"hljs-number\">0x1f</span> || i &gt;= <span class=\"hljs-number\">0x7f</span>) &#123;<br>                BYTE2CHAR[i] = <span class=\"hljs-string\">&#x27;.&#x27;</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                BYTE2CHAR[i] = (<span class=\"hljs-type\">char</span>) i;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 打印所有内容</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> buffer</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">debugAll</span><span class=\"hljs-params\">(ByteBuffer buffer)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldlimit</span> <span class=\"hljs-operator\">=</span> buffer.limit();<br>        buffer.limit(buffer.capacity());<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">origin</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(<span class=\"hljs-number\">256</span>);<br>        appendPrettyHexDump(origin, buffer, <span class=\"hljs-number\">0</span>, buffer.capacity());<br>        System.out.println(<span class=\"hljs-string\">&quot;+--------+-------------------- all ------------------------+----------------+&quot;</span>);<br>        System.out.printf(<span class=\"hljs-string\">&quot;position: [%d], limit: [%d]\\n&quot;</span>, buffer.position(), oldlimit);<br>        System.out.println(origin);<br>        buffer.limit(oldlimit);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 打印可读取内容</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> buffer</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">debugRead</span><span class=\"hljs-params\">(ByteBuffer buffer)</span> &#123;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(<span class=\"hljs-number\">256</span>);<br>        appendPrettyHexDump(builder, buffer, buffer.position(), buffer.limit() - buffer.position());<br>        System.out.println(<span class=\"hljs-string\">&quot;+--------+-------------------- read -----------------------+----------------+&quot;</span>);<br>        System.out.printf(<span class=\"hljs-string\">&quot;position: [%d], limit: [%d]\\n&quot;</span>, buffer.position(), buffer.limit());<br>        System.out.println(builder);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">appendPrettyHexDump</span><span class=\"hljs-params\">(StringBuilder dump, ByteBuffer buf, <span class=\"hljs-type\">int</span> offset, <span class=\"hljs-type\">int</span> length)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (isOutOfBounds(offset, length, buf.capacity())) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexOutOfBoundsException</span>(<br>                    <span class=\"hljs-string\">&quot;expected: &quot;</span> + <span class=\"hljs-string\">&quot;0 &lt;= offset(&quot;</span> + offset + <span class=\"hljs-string\">&quot;) &lt;= offset + length(&quot;</span> + length<br>                            + <span class=\"hljs-string\">&quot;) &lt;= &quot;</span> + <span class=\"hljs-string\">&quot;buf.capacity(&quot;</span> + buf.capacity() + <span class=\"hljs-string\">&#x27;)&#x27;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (length == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        dump.append(<br>                <span class=\"hljs-string\">&quot;         +-------------------------------------------------+&quot;</span> +<br>                        NEWLINE + <span class=\"hljs-string\">&quot;         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |&quot;</span> +<br>                        NEWLINE + <span class=\"hljs-string\">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);<br><br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">startIndex</span> <span class=\"hljs-operator\">=</span> offset;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fullRows</span> <span class=\"hljs-operator\">=</span> length &gt;&gt;&gt; <span class=\"hljs-number\">4</span>;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">remainder</span> <span class=\"hljs-operator\">=</span> length &amp; <span class=\"hljs-number\">0xF</span>;<br><br>        <span class=\"hljs-comment\">// Dump the rows which have 16 bytes.</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; row &lt; fullRows; row++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowStartIndex</span> <span class=\"hljs-operator\">=</span> (row &lt;&lt; <span class=\"hljs-number\">4</span>) + startIndex;<br><br>            <span class=\"hljs-comment\">// Per-row prefix.</span><br>            appendHexDumpRowPrefix(dump, row, rowStartIndex);<br><br>            <span class=\"hljs-comment\">// Hex dump</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowEndIndex</span> <span class=\"hljs-operator\">=</span> rowStartIndex + <span class=\"hljs-number\">16</span>;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(<span class=\"hljs-string\">&quot; |&quot;</span>);<br><br>            <span class=\"hljs-comment\">// ASCII dump</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(<span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Dump the last row which has less than 16 bytes.</span><br>        <span class=\"hljs-keyword\">if</span> (remainder != <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowStartIndex</span> <span class=\"hljs-operator\">=</span> (fullRows &lt;&lt; <span class=\"hljs-number\">4</span>) + startIndex;<br>            appendHexDumpRowPrefix(dump, fullRows, rowStartIndex);<br><br>            <span class=\"hljs-comment\">// Hex dump</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowEndIndex</span> <span class=\"hljs-operator\">=</span> rowStartIndex + remainder;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(HEXPADDING[remainder]);<br>            dump.append(<span class=\"hljs-string\">&quot; |&quot;</span>);<br><br>            <span class=\"hljs-comment\">// Ascii dump</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(BYTEPADDING[remainder]);<br>            dump.append(<span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>        &#125;<br><br>        dump.append(NEWLINE +<br>                <span class=\"hljs-string\">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">appendHexDumpRowPrefix</span><span class=\"hljs-params\">(StringBuilder dump, <span class=\"hljs-type\">int</span> row, <span class=\"hljs-type\">int</span> rowStartIndex)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (row &lt; HEXDUMP_ROWPREFIXES.length) &#123;<br>            dump.append(HEXDUMP_ROWPREFIXES[row]);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            dump.append(NEWLINE);<br>            dump.append(Long.toHexString(rowStartIndex &amp; <span class=\"hljs-number\">0xFFFFFFFFL</span> | <span class=\"hljs-number\">0x100000000L</span>));<br>            dump.setCharAt(dump.length() - <span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>            dump.append(<span class=\"hljs-string\">&#x27;|&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">short</span> <span class=\"hljs-title function_\">getUnsignedByte</span><span class=\"hljs-params\">(ByteBuffer buffer, <span class=\"hljs-type\">int</span> index)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">short</span>) (buffer.get(index) &amp; <span class=\"hljs-number\">0xFF</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-ByteBuffer-常见方法\"><a href=\"#2-3-ByteBuffer-常见方法\" class=\"headerlink\" title=\"2.3 ByteBuffer 常见方法\"></a>2.3 ByteBuffer 常见方法</h3><h4 id=\"分配空间\"><a href=\"#分配空间\" class=\"headerlink\" title=\"分配空间\"></a>分配空间</h4><p>可以使用 allocate 方法为 ByteBuffer 分配空间，其它 buffer 类也有该方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Bytebuffer</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"向-buffer-写入数据\"><a href=\"#向-buffer-写入数据\" class=\"headerlink\" title=\"向 buffer 写入数据\"></a>向 buffer 写入数据</h4><p>有两种办法</p>\n<ul>\n<li>调用 channel 的 read 方法</li>\n<li>调用 buffer 自己的 put 方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readBytes</span> <span class=\"hljs-operator\">=</span> channel.read(buf);<br></code></pre></td></tr></table></figure>\n\n<p>和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buf.put((<span class=\"hljs-type\">byte</span>)<span class=\"hljs-number\">127</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"从-buffer-读取数据\"><a href=\"#从-buffer-读取数据\" class=\"headerlink\" title=\"从 buffer 读取数据\"></a>从 buffer 读取数据</h4><p>同样有两种办法</p>\n<ul>\n<li>调用 channel 的 write 方法</li>\n<li>调用 buffer 自己的 get 方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">writeBytes</span> <span class=\"hljs-operator\">=</span> channel.write(buf);<br></code></pre></td></tr></table></figure>\n\n<p>和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> buf.get();<br></code></pre></td></tr></table></figure>\n\n<p>get 方法会让 position 读指针向后走，如果想重复读取数据</p>\n<ul>\n<li>可以调用 rewind 方法将 position 重新置为 0</li>\n<li>或者调用 get(int i) 方法获取索引 i 的内容，它不会移动读指针</li>\n</ul>\n<h4 id=\"mark-和-reset\"><a href=\"#mark-和-reset\" class=\"headerlink\" title=\"mark 和 reset\"></a>mark 和 reset</h4><p>mark 是在读取时，做一个标记，即使 position 改变，只要调用 reset 就能回到 mark 的位置</p>\n<blockquote>\n<p><strong>注意</strong></p>\n<p>rewind 和 flip 都会清除 mark 位置</p>\n</blockquote>\n<h4 id=\"字符串与-ByteBuffer-互转\"><a href=\"#字符串与-ByteBuffer-互转\" class=\"headerlink\" title=\"字符串与 ByteBuffer 互转\"></a>字符串与 ByteBuffer 互转</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer1</span> <span class=\"hljs-operator\">=</span> StandardCharsets.UTF_8.encode(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer2</span> <span class=\"hljs-operator\">=</span> Charset.forName(<span class=\"hljs-string\">&quot;utf-8&quot;</span>).encode(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br><br>debug(buffer1);<br>debug(buffer2);<br><br><span class=\"hljs-type\">CharBuffer</span> <span class=\"hljs-variable\">buffer3</span> <span class=\"hljs-operator\">=</span> StandardCharsets.UTF_8.decode(buffer1);<br>System.out.println(buffer3.getClass());<br>System.out.println(buffer3.toString());<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| e4 bd a0 e5 a5 bd                               |......          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| e4 bd a0 e5 a5 bd                               |......          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>class java.nio.HeapCharBuffer<br>你好<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"⚠️-Buffer-的线程安全\"><a href=\"#⚠️-Buffer-的线程安全\" class=\"headerlink\" title=\"⚠️ Buffer 的线程安全\"></a>⚠️ Buffer 的线程安全</h4><blockquote>\n<p>Buffer 是<strong>非线程安全的</strong></p>\n</blockquote>\n<h3 id=\"2-4-Scattering-Reads\"><a href=\"#2-4-Scattering-Reads\" class=\"headerlink\" title=\"2.4 Scattering Reads\"></a>2.4 Scattering Reads</h3><p>分散读取，有一个文本文件 3parts.txt</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">onetwothree</span><br></code></pre></td></tr></table></figure>\n\n<p>使用如下方式读取，可以将数据填充至多个 buffer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;helloword/3parts.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>)) &#123;<br>    <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> file.getChannel();<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">5</span>);<br>    channel.read(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteBuffer</span>[]&#123;a, b, c&#125;);<br>    a.flip();<br>    b.flip();<br>    c.flip();<br>    debug(a);<br>    debug(b);<br>    debug(c);<br>&#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6f 6e 65                                        |one             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 74 77 6f                                        |two             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 74 68 72 65 65                                  |three           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-5-Gathering-Writes\"><a href=\"#2-5-Gathering-Writes\" class=\"headerlink\" title=\"2.5 Gathering Writes\"></a>2.5 Gathering Writes</h3><p>使用如下方式写入，可以将多个 buffer 的数据填充至 channel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(<span class=\"hljs-string\">&quot;helloword/3parts.txt&quot;</span>, <span class=\"hljs-string\">&quot;rw&quot;</span>)) &#123;<br>    <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> file.getChannel();<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">4</span>);<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">4</span>);<br>    channel.position(<span class=\"hljs-number\">11</span>);<br><br>    d.put(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;o&#x27;</span>, <span class=\"hljs-string\">&#x27;u&#x27;</span>, <span class=\"hljs-string\">&#x27;r&#x27;</span>&#125;);<br>    e.put(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;v&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>&#125;);<br>    d.flip();<br>    e.flip();<br>    debug(d);<br>    debug(e);<br>    channel.write(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteBuffer</span>[]&#123;d, e&#125;);<br>&#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 6f 75 72                                     |four            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 69 76 65                                     |five            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>文件内容</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">onetwothreefourfive</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-6-练习\"><a href=\"#2-6-练习\" class=\"headerlink\" title=\"2.6 练习\"></a>2.6 练习</h3><p>网络上有多条数据发送给服务端，数据之间使用 \\n 进行分隔<br>但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</p>\n<ul>\n<li>Hello,world\\n</li>\n<li>I’m zhangsan\\n</li>\n<li>How are you?\\n</li>\n</ul>\n<p>变成了下面的两个 byteBuffer (黏包，半包)</p>\n<ul>\n<li>Hello,world\\nI’m zhangsan\\nHo</li>\n<li>w are you?\\n</li>\n</ul>\n<p>现在要求你编写程序，将错乱的数据恢复成原始的按 \\n 分隔的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">32</span>);<br>    <span class=\"hljs-comment\">//                     11            24</span><br>    source.put(<span class=\"hljs-string\">&quot;Hello,world\\nI&#x27;m zhangsan\\nHo&quot;</span>.getBytes());<br>    split(source);<br><br>    source.put(<span class=\"hljs-string\">&quot;w are you?\\nhaha!\\n&quot;</span>.getBytes());<br>    split(source);<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">split</span><span class=\"hljs-params\">(ByteBuffer source)</span> &#123;<br>    source.flip();<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldLimit</span> <span class=\"hljs-operator\">=</span> source.limit();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; oldLimit; i++) &#123;<br>        <span class=\"hljs-keyword\">if</span> (source.get(i) == <span class=\"hljs-string\">&#x27;\\n&#x27;</span>) &#123;<br>            System.out.println(i);<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(i + <span class=\"hljs-number\">1</span> - source.position());<br>            <span class=\"hljs-comment\">// 0 ~ limit</span><br>            source.limit(i + <span class=\"hljs-number\">1</span>);<br>            target.put(source); <span class=\"hljs-comment\">// 从source 读，向 target 写</span><br>            debugAll(target);<br>            source.limit(oldLimit);<br>        &#125;<br>    &#125;<br>    source.compact();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-文件编程\"><a href=\"#3-文件编程\" class=\"headerlink\" title=\"3. 文件编程\"></a>3. 文件编程</h2><h3 id=\"3-1-FileChannel\"><a href=\"#3-1-FileChannel\" class=\"headerlink\" title=\"3.1 FileChannel\"></a>3.1 FileChannel</h3><h4 id=\"⚠️-FileChannel-工作模式\"><a href=\"#⚠️-FileChannel-工作模式\" class=\"headerlink\" title=\"⚠️ FileChannel 工作模式\"></a>⚠️ FileChannel 工作模式</h4><blockquote>\n<p>FileChannel 只能工作在阻塞模式下</p>\n</blockquote>\n<h4 id=\"获取\"><a href=\"#获取\" class=\"headerlink\" title=\"获取\"></a>获取</h4><p>不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法</p>\n<ul>\n<li>通过 FileInputStream 获取的 channel 只能读</li>\n<li>通过 FileOutputStream 获取的 channel 只能写</li>\n<li>通过 RandomAccessFile 是否能读写根据构造 RandomAccessFile 时的读写模式决定</li>\n</ul>\n<h4 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h4><p>会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readBytes</span> <span class=\"hljs-operator\">=</span> channel.read(buffer);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"写入\"><a href=\"#写入\" class=\"headerlink\" title=\"写入\"></a>写入</h4><p>写入的正确姿势如下， SocketChannel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ...;<br>buffer.put(...); <span class=\"hljs-comment\">// 存入数据</span><br>buffer.flip();   <span class=\"hljs-comment\">// 切换读模式</span><br><br><span class=\"hljs-keyword\">while</span>(buffer.hasRemaining()) &#123;<br>    channel.write(buffer);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel</p>\n<h4 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h4><p>channel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法</p>\n<h4 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h4><p>获取当前位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">pos</span> <span class=\"hljs-operator\">=</span> channel.position();<br></code></pre></td></tr></table></figure>\n\n<p>设置当前位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">newPos</span> <span class=\"hljs-operator\">=</span> ...;<br>channel.position(newPos);<br></code></pre></td></tr></table></figure>\n\n<p>设置当前位置时，如果设置为文件的末尾</p>\n<ul>\n<li>这时读取会返回 -1 </li>\n<li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）</li>\n</ul>\n<h4 id=\"大小\"><a href=\"#大小\" class=\"headerlink\" title=\"大小\"></a>大小</h4><p>使用 size 方法获取文件的大小</p>\n<h4 id=\"强制写入\"><a href=\"#强制写入\" class=\"headerlink\" title=\"强制写入\"></a>强制写入</h4><p>操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘。可以调用 force(true)  方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘</p>\n<h3 id=\"3-2-两个-Channel-传输数据\"><a href=\"#3-2-两个-Channel-传输数据\" class=\"headerlink\" title=\"3.2 两个 Channel 传输数据\"></a>3.2 两个 Channel 传输数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">FROM</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">TO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;helloword/to.txt&quot;</span>;<br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">from</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(FROM).getChannel();<br>     <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">to</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(TO).getChannel();<br>    ) &#123;<br>    from.transferTo(<span class=\"hljs-number\">0</span>, from.size(), to);<br>&#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>System.out.println(<span class=\"hljs-string\">&quot;transferTo 用时：&quot;</span> + (end - start) / <span class=\"hljs-number\">1000_000.0</span>);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">transferTo</span> 用时：<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">2011</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>超过 2g 大小的文件传输</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestFileChannelTransferTo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<br>                <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">from</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;data.txt&quot;</span>).getChannel();<br>                <span class=\"hljs-type\">FileChannel</span> <span class=\"hljs-variable\">to</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;to.txt&quot;</span>).getChannel();<br>        ) &#123;<br>            <span class=\"hljs-comment\">// 效率高，底层会利用操作系统的零拷贝进行优化</span><br>            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> from.size();<br>            <span class=\"hljs-comment\">// left 变量代表还剩余多少字节</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> size; left &gt; <span class=\"hljs-number\">0</span>; ) &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;position:&quot;</span> + (size - left) + <span class=\"hljs-string\">&quot; left:&quot;</span> + left);<br>                left -= from.transferTo((size - left), left, to);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>实际传输一个超大文件</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">position</span>:<span class=\"hljs-number\">0</span> left:<span class=\"hljs-number\">7769948160</span><br><span class=\"hljs-attribute\">position</span>:<span class=\"hljs-number\">2147483647</span> left:<span class=\"hljs-number\">5622464513</span><br><span class=\"hljs-attribute\">position</span>:<span class=\"hljs-number\">4294967294</span> left:<span class=\"hljs-number\">3474980866</span><br><span class=\"hljs-attribute\">position</span>:<span class=\"hljs-number\">6442450941</span> left:<span class=\"hljs-number\">1327497219</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-Path\"><a href=\"#3-3-Path\" class=\"headerlink\" title=\"3.3 Path\"></a>3.3 Path</h3><p>jdk7 引入了 Path 和 Paths 类</p>\n<ul>\n<li>Path 用来表示文件路径</li>\n<li>Paths 是工具类，用来获取 Path 实例</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;1.txt&quot;</span>); <span class=\"hljs-comment\">// 相对路径 使用 user.dir 环境变量来定位 1.txt</span><br><br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\1.txt&quot;</span>); <span class=\"hljs-comment\">// 绝对路径 代表了  d:\\1.txt</span><br><br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:/1.txt&quot;</span>); <span class=\"hljs-comment\">// 绝对路径 同样代表了  d:\\1.txt</span><br><br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">projects</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\data&quot;</span>, <span class=\"hljs-string\">&quot;projects&quot;</span>); <span class=\"hljs-comment\">// 代表了  d:\\data\\projects</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>.</code> 代表了当前路径</li>\n<li><code>..</code> 代表了上一级路径</li>\n</ul>\n<p>例如目录结构如下</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">d:<br>\t<span class=\"hljs-string\">|- data</span><br>\t\t<span class=\"hljs-string\">|- projects</span><br>\t\t\t<span class=\"hljs-string\">|- a</span><br>\t\t\t<span class=\"hljs-string\">|- b</span><br></code></pre></td></tr></table></figure>\n\n<p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\data\\\\projects\\\\a\\\\..\\\\b&quot;</span>);<br>System.out.println(path);<br>System.out.println(path.normalize()); <span class=\"hljs-comment\">// 正常化路径</span><br></code></pre></td></tr></table></figure>\n\n<p>会输出</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-title\">d</span>:\\<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>\\projects\\a\\..\\b</span><br><span class=\"hljs-title\">d</span>:\\<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>\\projects\\b</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-4-Files\"><a href=\"#3-4-Files\" class=\"headerlink\" title=\"3.4 Files\"></a>3.4 Files</h3><p>检查文件是否存在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br>System.out.println(Files.exists(path));<br></code></pre></td></tr></table></figure>\n\n\n\n<p>创建一级目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/d1&quot;</span>);<br>Files.createDirectory(path);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果目录已存在，会抛异常 FileAlreadyExistsException</li>\n<li>不能一次创建多级目录，否则会抛异常 NoSuchFileException</li>\n</ul>\n<p>创建多级目录用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/d1/d2&quot;</span>);<br>Files.createDirectories(path);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>拷贝文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/target.txt&quot;</span>);<br><br>Files.copy(source, target);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果文件已存在，会抛异常 FileAlreadyExistsException</li>\n</ul>\n<p>如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>移动文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br><br>Files.move(source, target, StandardCopyOption.ATOMIC_MOVE);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</li>\n</ul>\n<p>删除文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/target.txt&quot;</span>);<br><br>Files.delete(target);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果文件不存在，会抛异常 NoSuchFileException</li>\n</ul>\n<p>删除目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;helloword/d1&quot;</span>);<br><br>Files.delete(target);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果目录还有内容，会抛异常 DirectoryNotEmptyException</li>\n</ul>\n<p>遍历目录文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91&quot;</span>);<br>    <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">dirCount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>    <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">fileCount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>    Files.walkFileTree(path, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleFileVisitor</span>&lt;Path&gt;()&#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">preVisitDirectory</span><span class=\"hljs-params\">(Path dir, BasicFileAttributes attrs)</span> <br>            <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>            System.out.println(dir);<br>            dirCount.incrementAndGet();<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.preVisitDirectory(dir, attrs);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">visitFile</span><span class=\"hljs-params\">(Path file, BasicFileAttributes attrs)</span> <br>            <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>            System.out.println(file);<br>            fileCount.incrementAndGet();<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.visitFile(file, attrs);<br>        &#125;<br>    &#125;);<br>    System.out.println(dirCount); <span class=\"hljs-comment\">// 133</span><br>    System.out.println(fileCount); <span class=\"hljs-comment\">// 1479</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>统计 jar 的数目</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91&quot;</span>);<br><span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">fileCount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>Files.walkFileTree(path, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleFileVisitor</span>&lt;Path&gt;()&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">visitFile</span><span class=\"hljs-params\">(Path file, BasicFileAttributes attrs)</span> <br>        <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-keyword\">if</span> (file.toFile().getName().endsWith(<span class=\"hljs-string\">&quot;.jar&quot;</span>)) &#123;<br>            fileCount.incrementAndGet();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.visitFile(file, attrs);<br>    &#125;<br>&#125;);<br>System.out.println(fileCount); <span class=\"hljs-comment\">// 724</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>删除多级目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Path</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> Paths.get(<span class=\"hljs-string\">&quot;d:\\\\a&quot;</span>);<br>Files.walkFileTree(path, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleFileVisitor</span>&lt;Path&gt;()&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">visitFile</span><span class=\"hljs-params\">(Path file, BasicFileAttributes attrs)</span> <br>        <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        Files.delete(file);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.visitFile(file, attrs);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> FileVisitResult <span class=\"hljs-title function_\">postVisitDirectory</span><span class=\"hljs-params\">(Path dir, IOException exc)</span> <br>        <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        Files.delete(dir);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.postVisitDirectory(dir, exc);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"⚠️-删除很危险\"><a href=\"#⚠️-删除很危险\" class=\"headerlink\" title=\"⚠️ 删除很危险\"></a>⚠️ 删除很危险</h4><blockquote>\n<p>删除是危险操作，确保要递归删除的文件夹没有重要内容</p>\n</blockquote>\n<p>拷贝多级目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;D:\\\\Snipaste-1.16.2-x64&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;D:\\\\Snipaste-1.16.2-x64aaa&quot;</span>;<br><br>Files.walk(Paths.get(source)).forEach(path -&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">targetName</span> <span class=\"hljs-operator\">=</span> path.toString().replace(source, target);<br>        <span class=\"hljs-comment\">// 是目录</span><br>        <span class=\"hljs-keyword\">if</span> (Files.isDirectory(path)) &#123;<br>            Files.createDirectory(Paths.get(targetName));<br>        &#125;<br>        <span class=\"hljs-comment\">// 是普通文件</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (Files.isRegularFile(path)) &#123;<br>            Files.copy(path, Paths.get(targetName));<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;);<br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>System.out.println(end - start);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"4-网络编程\"><a href=\"#4-网络编程\" class=\"headerlink\" title=\"4. 网络编程\"></a>4. 网络编程</h2><h3 id=\"4-1-非阻塞-vs-阻塞\"><a href=\"#4-1-非阻塞-vs-阻塞\" class=\"headerlink\" title=\"4.1 非阻塞 vs 阻塞\"></a>4.1 非阻塞 vs 阻塞</h3><h4 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h4><ul>\n<li>阻塞模式下，相关方法都会导致线程暂停<ul>\n<li>ServerSocketChannel.accept 会在没有连接建立时让线程暂停</li>\n<li>SocketChannel.read 会在没有数据可读时让线程暂停</li>\n<li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li>\n</ul>\n</li>\n<li>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</li>\n<li>但多线程下，有新的问题，体现在以下方面<ul>\n<li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li>\n<li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li>\n</ul>\n</li>\n</ul>\n<p>服务器端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 使用 nio 来理解阻塞模式, 单线程</span><br><span class=\"hljs-comment\">// 0. ByteBuffer</span><br><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>);<br><span class=\"hljs-comment\">// 1. 创建了服务器</span><br><span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br><br><span class=\"hljs-comment\">// 2. 绑定监听端口</span><br>ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br><br><span class=\"hljs-comment\">// 3. 连接集合</span><br>List&lt;SocketChannel&gt; channels = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>    <span class=\"hljs-comment\">// 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信</span><br>    log.debug(<span class=\"hljs-string\">&quot;connecting...&quot;</span>);<br>    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> ssc.accept(); <span class=\"hljs-comment\">// 阻塞方法，线程停止运行</span><br>    log.debug(<span class=\"hljs-string\">&quot;connected... &#123;&#125;&quot;</span>, sc);<br>    channels.add(sc);<br>    <span class=\"hljs-keyword\">for</span> (SocketChannel channel : channels) &#123;<br>        <span class=\"hljs-comment\">// 5. 接收客户端发送的数据</span><br>        log.debug(<span class=\"hljs-string\">&quot;before read... &#123;&#125;&quot;</span>, channel);<br>        channel.read(buffer); <span class=\"hljs-comment\">// 阻塞方法，线程停止运行</span><br>        buffer.flip();<br>        debugRead(buffer);<br>        buffer.clear();<br>        log.debug(<span class=\"hljs-string\">&quot;after read...&#123;&#125;&quot;</span>, channel);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> SocketChannel.open();<br>sc.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>));<br>System.out.println(<span class=\"hljs-string\">&quot;waiting...&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"非阻塞\"><a href=\"#非阻塞\" class=\"headerlink\" title=\"非阻塞\"></a>非阻塞</h4><ul>\n<li>非阻塞模式下，相关方法都会不会让线程暂停<ul>\n<li>在 ServerSocketChannel.accept 在没有连接建立时，会返回 null，继续运行</li>\n<li>SocketChannel.read 在没有数据可读时，会返回 0，但线程不必阻塞，可以去执行其它 SocketChannel 的 read 或是去执行 ServerSocketChannel.accept </li>\n<li>写数据时，线程只是等待数据写入 Channel 即可，无需等 Channel 通过网络把数据发送出去</li>\n</ul>\n</li>\n<li>但非阻塞模式下，即使没有连接建立，和可读数据，线程仍然在不断运行，白白浪费了 cpu</li>\n<li>数据复制过程中，线程实际还是阻塞的（AIO 改进的地方）</li>\n</ul>\n<p>服务器端，客户端代码不变</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 使用 nio 来理解非阻塞模式, 单线程</span><br><span class=\"hljs-comment\">// 0. ByteBuffer</span><br><span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>);<br><span class=\"hljs-comment\">// 1. 创建了服务器</span><br><span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br>ssc.configureBlocking(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// 非阻塞模式</span><br><span class=\"hljs-comment\">// 2. 绑定监听端口</span><br>ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br><span class=\"hljs-comment\">// 3. 连接集合</span><br>List&lt;SocketChannel&gt; channels = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>    <span class=\"hljs-comment\">// 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信</span><br>    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> ssc.accept(); <span class=\"hljs-comment\">// 非阻塞，线程还会继续运行，如果没有连接建立，但sc是null</span><br>    <span class=\"hljs-keyword\">if</span> (sc != <span class=\"hljs-literal\">null</span>) &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;connected... &#123;&#125;&quot;</span>, sc);<br>        sc.configureBlocking(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// 非阻塞模式</span><br>        channels.add(sc);<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (SocketChannel channel : channels) &#123;<br>        <span class=\"hljs-comment\">// 5. 接收客户端发送的数据</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> channel.read(buffer);<span class=\"hljs-comment\">// 非阻塞，线程仍然会继续运行，如果没有读到数据，read 返回 0</span><br>        <span class=\"hljs-keyword\">if</span> (read &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            buffer.flip();<br>            debugRead(buffer);<br>            buffer.clear();<br>            log.debug(<span class=\"hljs-string\">&quot;after read...&#123;&#125;&quot;</span>, channel);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h4><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p>\n<ul>\n<li>多路复用仅针对网络 IO、普通文件 IO 没法利用多路复用</li>\n<li>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证<ul>\n<li>有可连接事件时才去连接</li>\n<li>有可读事件才去读取</li>\n<li>有可写事件才去写入<ul>\n<li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-Selector\"><a href=\"#4-2-Selector\" class=\"headerlink\" title=\"4.2 Selector\"></a>4.2 Selector</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">graph TD<br>subgraph selector 版<br>thread --&gt; selector<br>selector --&gt; c1(channel)<br>selector --&gt; c2(channel)<br>selector --&gt; c3(channel)<br>end<br></code></pre></td></tr></table></figure>\n\n\n\n<p>好处</p>\n<ul>\n<li>一个线程配合 selector 就可以监控多个 channel 的事件，事件发生线程才去处理。避免非阻塞模式下所做无用功</li>\n<li>让这个线程能够被充分利用</li>\n<li>节约了线程的数量</li>\n<li>减少了线程上下文切换</li>\n</ul>\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"绑定-Channel-事件\"><a href=\"#绑定-Channel-事件\" class=\"headerlink\" title=\"绑定 Channel 事件\"></a>绑定 Channel 事件</h4><p>也称之为注册事件，绑定的事件 selector 才会关心 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">channel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> channel.register(selector, 绑定事件);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>channel 必须工作在非阻塞模式</li>\n<li>FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用</li>\n<li>绑定的事件类型可以有<ul>\n<li>connect - 客户端连接成功时触发</li>\n<li>accept - 服务器端成功接受连接时触发</li>\n<li>read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况</li>\n<li>write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"监听-Channel-事件\"><a href=\"#监听-Channel-事件\" class=\"headerlink\" title=\"监听 Channel 事件\"></a>监听 Channel 事件</h4><p>可以通过下面三种方法来监听是否有事件发生，方法的返回值代表有多少 channel 发生了事件</p>\n<p>方法1，阻塞直到绑定事件发生</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.select();<br></code></pre></td></tr></table></figure>\n\n\n\n<p>方法2，阻塞直到绑定事件发生，或是超时（时间单位为 ms）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.select(<span class=\"hljs-type\">long</span> timeout);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>方法3，不会阻塞，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.selectNow();<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-select-何时不阻塞\"><a href=\"#💡-select-何时不阻塞\" class=\"headerlink\" title=\"💡 select 何时不阻塞\"></a>💡 select 何时不阻塞</h4><blockquote>\n<ul>\n<li>事件发生时<ul>\n<li>客户端发起连接请求，会触发 accept 事件</li>\n<li>客户端发送数据过来，客户端正常、异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件</li>\n<li>channel 可写，会触发 write 事件</li>\n<li>在 linux 下 nio bug 发生时</li>\n</ul>\n</li>\n<li>调用 selector.wakeup()</li>\n<li>调用 selector.close()</li>\n<li>selector 所在线程 interrupt</li>\n</ul>\n</blockquote>\n<h3 id=\"4-3-处理-accept-事件\"><a href=\"#4-3-处理-accept-事件\" class=\"headerlink\" title=\"4.3 处理 accept 事件\"></a>4.3 处理 accept 事件</h3><p>客户端代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Client</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">socket</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>)) &#123;<br>            System.out.println(socket);<br>            socket.getOutputStream().write(<span class=\"hljs-string\">&quot;world&quot;</span>.getBytes());<br>            System.in.read();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>服务器端代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChannelDemo6</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open()) &#123;<br>            channel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>            System.out.println(channel);<br>            <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>            channel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>            channel.register(selector, SelectionKey.OP_ACCEPT);<br><br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.select();<br><span class=\"hljs-comment\">//                int count = selector.selectNow();</span><br>                log.debug(<span class=\"hljs-string\">&quot;select count: &#123;&#125;&quot;</span>, count);<br><span class=\"hljs-comment\">//                if(count &lt;= 0) &#123;</span><br><span class=\"hljs-comment\">//                    continue;</span><br><span class=\"hljs-comment\">//                &#125;</span><br><br>                <span class=\"hljs-comment\">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();<br><br>                <span class=\"hljs-comment\">// 遍历所有事件，逐一处理</span><br>                Iterator&lt;SelectionKey&gt; iter = keys.iterator();<br>                <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                    <span class=\"hljs-comment\">// 判断事件类型</span><br>                    <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>                        <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> (ServerSocketChannel) key.channel();<br>                        <span class=\"hljs-comment\">// 必须处理</span><br>                        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> c.accept();<br>                        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, sc);<br>                    &#125;<br>                    <span class=\"hljs-comment\">// 处理完毕，必须将事件移除</span><br>                    iter.remove();<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-事件发生后能否不处理\"><a href=\"#💡-事件发生后能否不处理\" class=\"headerlink\" title=\"💡 事件发生后能否不处理\"></a>💡 事件发生后能否不处理</h4><blockquote>\n<p>事件发生后，要么处理，要么取消（cancel），不能什么都不做，否则下次该事件仍会触发，这是因为 nio 底层使用的是水平触发</p>\n</blockquote>\n<h3 id=\"4-4-处理-read-事件\"><a href=\"#4-4-处理-read-事件\" class=\"headerlink\" title=\"4.4 处理 read 事件\"></a>4.4 处理 read 事件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChannelDemo6</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open()) &#123;<br>            channel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>            System.out.println(channel);<br>            <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>            channel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>            channel.register(selector, SelectionKey.OP_ACCEPT);<br><br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> selector.select();<br><span class=\"hljs-comment\">//                int count = selector.selectNow();</span><br>                log.debug(<span class=\"hljs-string\">&quot;select count: &#123;&#125;&quot;</span>, count);<br><span class=\"hljs-comment\">//                if(count &lt;= 0) &#123;</span><br><span class=\"hljs-comment\">//                    continue;</span><br><span class=\"hljs-comment\">//                &#125;</span><br><br>                <span class=\"hljs-comment\">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();<br><br>                <span class=\"hljs-comment\">// 遍历所有事件，逐一处理</span><br>                Iterator&lt;SelectionKey&gt; iter = keys.iterator();<br>                <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                    <span class=\"hljs-comment\">// 判断事件类型</span><br>                    <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>                        <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> (ServerSocketChannel) key.channel();<br>                        <span class=\"hljs-comment\">// 必须处理</span><br>                        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> c.accept();<br>                        sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                        sc.register(selector, SelectionKey.OP_READ);<br>                        log.debug(<span class=\"hljs-string\">&quot;连接已建立: &#123;&#125;&quot;</span>, sc);<br>                    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isReadable()) &#123;<br>                        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> (SocketChannel) key.channel();<br>                        <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">128</span>);<br>                        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> sc.read(buffer);<br>                        <span class=\"hljs-keyword\">if</span>(read == -<span class=\"hljs-number\">1</span>) &#123;<br>                            key.cancel();<br>                            sc.close();<br>                        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                            buffer.flip();<br>                            debug(buffer);<br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-comment\">// 处理完毕，必须将事件移除</span><br>                    iter.remove();<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>开启两个客户端，修改一下发送文字，输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">sun.nio.ch.ServerSocketChannelImpl[/0:0:0:0:0:0:0:0:8080]<br>21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br>21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60367]<br>21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 65 6c 6c 6f                                  |hello           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br>21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60378]<br>21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 77 6f 72 6c 64                                  |world           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-为何要-iter-remove\"><a href=\"#💡-为何要-iter-remove\" class=\"headerlink\" title=\"💡 为何要 iter.remove()\"></a>💡 为何要 iter.remove()</h4><blockquote>\n<p>因为 select 在事件发生后，就会将相关的 key 放入 selectedKeys 集合，但不会在处理完后从 selectedKeys 集合中移除，需要我们自己编码删除。例如</p>\n<ul>\n<li>第一次触发了 ssckey 上的 accept 事件，没有移除 ssckey </li>\n<li>第二次触发了 sckey 上的 read 事件，但这时 selectedKeys 中还有上次的 ssckey ，在处理时因为没有真正的 serverSocket 连上了，就会导致空指针异常</li>\n</ul>\n</blockquote>\n<h4 id=\"💡-cancel-的作用\"><a href=\"#💡-cancel-的作用\" class=\"headerlink\" title=\"💡 cancel 的作用\"></a>💡 cancel 的作用</h4><blockquote>\n<p>cancel 会取消注册在 selector 上的 channel，并从 keys 集合中删除 key 后续不会再监听事件</p>\n</blockquote>\n<h4 id=\"⚠️-不处理边界的问题\"><a href=\"#⚠️-不处理边界的问题\" class=\"headerlink\" title=\"⚠️  不处理边界的问题\"></a>⚠️  不处理边界的问题</h4><p>以前有同学写过这样的代码，思考注释中两个问题，以 bio 为例，其实 nio 道理是一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Server</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        ServerSocket ss=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerSocket</span>(<span class=\"hljs-number\">9000</span>);<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> ss.accept();<br>            <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> s.getInputStream();<br>            <span class=\"hljs-comment\">// 这里这么写，有没有问题</span><br>            <span class=\"hljs-type\">byte</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">4</span>];<br>            <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> in.read(arr);<br>                <span class=\"hljs-comment\">// 这里这么写，有没有问题</span><br>                <span class=\"hljs-keyword\">if</span>(read == -<span class=\"hljs-number\">1</span>) &#123;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>                System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(arr, <span class=\"hljs-number\">0</span>, read));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Client</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9000</span>);<br>        <span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> max.getOutputStream();<br>        out.write(<span class=\"hljs-string\">&quot;hello&quot;</span>.getBytes());<br>        out.write(<span class=\"hljs-string\">&quot;world&quot;</span>.getBytes());<br>        out.write(<span class=\"hljs-string\">&quot;你好&quot;</span>.getBytes());<br>        max.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">hell<br>owor<br><span class=\"hljs-keyword\">ld</span>�<br>�好<br><br></code></pre></td></tr></table></figure>\n\n<p>为什么？</p>\n<h4 id=\"处理消息的边界\"><a href=\"#处理消息的边界\" class=\"headerlink\" title=\"处理消息的边界\"></a>处理消息的边界</h4><p><img src=\"/img/0023.png\"></p>\n<ul>\n<li>一种思路是固定消息长度，数据包大小一样，服务器按预定长度读取，缺点是浪费带宽</li>\n<li>另一种思路是按分隔符拆分，缺点是效率低</li>\n<li>TLV 格式，即 Type 类型、Length 长度、Value 数据，类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量<ul>\n<li>Http 1.1 是 TLV 格式</li>\n<li>Http 2.0 是 LTV 格式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">sequenceDiagram <br>participant c1 as 客户端1<br>participant s as 服务器<br>participant b1 as ByteBuffer1<br>participant b2 as ByteBuffer2<br>c1 -&gt;&gt; s: 发送 01234567890abcdef3333\\r<br>s -&gt;&gt; b1: 第一次 read 存入 01234567890abcdef<br>s -&gt;&gt; b2: 扩容<br>b1 -&gt;&gt; b2: 拷贝 01234567890abcdef<br>s -&gt;&gt; b2: 第二次 read 存入 3333\\r<br>b2 -&gt;&gt; b2: 01234567890abcdef3333\\r<br></code></pre></td></tr></table></figure>\n\n<p>服务器端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">split</span><span class=\"hljs-params\">(ByteBuffer source)</span> &#123;<br>    source.flip();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; source.limit(); i++) &#123;<br>        <span class=\"hljs-comment\">// 找到一条完整消息</span><br>        <span class=\"hljs-keyword\">if</span> (source.get(i) == <span class=\"hljs-string\">&#x27;\\n&#x27;</span>) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> i + <span class=\"hljs-number\">1</span> - source.position();<br>            <span class=\"hljs-comment\">// 把这条完整消息存入新的 ByteBuffer</span><br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(length);<br>            <span class=\"hljs-comment\">// 从 source 读，向 target 写</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; length; j++) &#123;<br>                target.put(source.get());<br>            &#125;<br>            debugAll(target);<br>        &#125;<br>    &#125;<br>    source.compact(); <span class=\"hljs-comment\">// 0123456789abcdef  position 16 limit 16</span><br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-comment\">// 1. 创建 selector, 管理多个 channel</span><br>    <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>    <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br>    ssc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>    <span class=\"hljs-comment\">// 2. 建立 selector 和 channel 的联系（注册）</span><br>    <span class=\"hljs-comment\">// SelectionKey 就是将来事件发生后，通过它可以知道事件和哪个channel的事件</span><br>    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">sscKey</span> <span class=\"hljs-operator\">=</span> ssc.register(selector, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>);<br>    <span class=\"hljs-comment\">// key 只关注 accept 事件</span><br>    sscKey.interestOps(SelectionKey.OP_ACCEPT);<br>    log.debug(<span class=\"hljs-string\">&quot;sscKey:&#123;&#125;&quot;</span>, sscKey);<br>    ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-comment\">// 3. select 方法, 没有事件发生，线程阻塞，有事件，线程才会恢复运行</span><br>        <span class=\"hljs-comment\">// select 在事件未处理时，它不会阻塞, 事件发生后要么处理，要么取消，不能置之不理</span><br>        selector.select();<br>        <span class=\"hljs-comment\">// 4. 处理事件, selectedKeys 内部包含了所有发生的事件</span><br>        Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator(); <span class=\"hljs-comment\">// accept, read</span><br>        <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>            <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>            <span class=\"hljs-comment\">// 处理key 时，要从 selectedKeys 集合中删除，否则下次处理就会有问题</span><br>            iter.remove();<br>            log.debug(<span class=\"hljs-string\">&quot;key: &#123;&#125;&quot;</span>, key);<br>            <span class=\"hljs-comment\">// 5. 区分事件类型</span><br>            <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123; <span class=\"hljs-comment\">// 如果是 accept</span><br>                <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> (ServerSocketChannel) key.channel();<br>                <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> channel.accept();<br>                sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>); <span class=\"hljs-comment\">// attachment</span><br>                <span class=\"hljs-comment\">// 将一个 byteBuffer 作为附件关联到 selectionKey 上</span><br>                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">scKey</span> <span class=\"hljs-operator\">=</span> sc.register(selector, <span class=\"hljs-number\">0</span>, buffer);<br>                scKey.interestOps(SelectionKey.OP_READ);<br>                log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, sc);<br>                log.debug(<span class=\"hljs-string\">&quot;scKey:&#123;&#125;&quot;</span>, scKey);<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isReadable()) &#123; <span class=\"hljs-comment\">// 如果是 read</span><br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> (SocketChannel) key.channel(); <span class=\"hljs-comment\">// 拿到触发事件的channel</span><br>                    <span class=\"hljs-comment\">// 获取 selectionKey 上关联的附件</span><br>                    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuffer) key.attachment();<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> channel.read(buffer); <span class=\"hljs-comment\">// 如果是正常断开，read 的方法的返回值是 -1</span><br>                    <span class=\"hljs-keyword\">if</span>(read == -<span class=\"hljs-number\">1</span>) &#123;<br>                        key.cancel();<br>                    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                        split(buffer);<br>                        <span class=\"hljs-comment\">// 需要扩容</span><br>                        <span class=\"hljs-keyword\">if</span> (buffer.position() == buffer.limit()) &#123;<br>                            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">newBuffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(buffer.capacity() * <span class=\"hljs-number\">2</span>);<br>                            buffer.flip();<br>                            newBuffer.put(buffer); <span class=\"hljs-comment\">// 0123456789abcdef3333\\n</span><br>                            key.attach(newBuffer);<br>                        &#125;<br>                    &#125;<br><br>                &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                    key.cancel();  <span class=\"hljs-comment\">// 因为客户端断开了,因此需要将 key 取消（从 selector 的 keys 集合中真正删除 key）</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> SocketChannel.open();<br>sc.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>));<br><span class=\"hljs-type\">SocketAddress</span> <span class=\"hljs-variable\">address</span> <span class=\"hljs-operator\">=</span> sc.getLocalAddress();<br><span class=\"hljs-comment\">// sc.write(Charset.defaultCharset().encode(&quot;hello\\nworld\\n&quot;));</span><br>sc.write(Charset.defaultCharset().encode(<span class=\"hljs-string\">&quot;0123\\n456789abcdef&quot;</span>));<br>sc.write(Charset.defaultCharset().encode(<span class=\"hljs-string\">&quot;0123456789abcdef3333\\n&quot;</span>));<br>System.in.read();<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"ByteBuffer-大小分配\"><a href=\"#ByteBuffer-大小分配\" class=\"headerlink\" title=\"ByteBuffer 大小分配\"></a>ByteBuffer 大小分配</h4><ul>\n<li>每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer</li>\n<li>ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer<ul>\n<li>一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 <a href=\"http://tutorials.jenkov.com/java-performance/resizable-array.html\">http://tutorials.jenkov.com/java-performance/resizable-array.html</a></li>\n<li>另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-5-处理-write-事件\"><a href=\"#4-5-处理-write-事件\" class=\"headerlink\" title=\"4.5 处理 write 事件\"></a>4.5 处理 write 事件</h3><h4 id=\"一次无法写完例子\"><a href=\"#一次无法写完例子\" class=\"headerlink\" title=\"一次无法写完例子\"></a>一次无法写完例子</h4><ul>\n<li>非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）</li>\n<li>用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略<ul>\n<li>当消息处理器第一次写入消息时，才将 channel 注册到 selector 上</li>\n<li>selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册</li>\n<li>如果不取消，会每次可写均会触发 write 事件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WriteServer</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br>        ssc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>        ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br><br>        <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>        ssc.register(selector, SelectionKey.OP_ACCEPT);<br><br>        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br>            selector.select();<br><br>            Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();<br>            <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                iter.remove();<br>                <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>                    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> ssc.accept();<br>                    sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">sckey</span> <span class=\"hljs-operator\">=</span> sc.register(selector, SelectionKey.OP_READ);<br>                    <span class=\"hljs-comment\">// 1. 向客户端发送内容</span><br>                    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3000000</span>; i++) &#123;<br>                        sb.append(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>                    &#125;<br>                    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> Charset.defaultCharset().encode(sb.toString());<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">write</span> <span class=\"hljs-operator\">=</span> sc.write(buffer);<br>                    <span class=\"hljs-comment\">// 3. write 表示实际写了多少字节</span><br>                    System.out.println(<span class=\"hljs-string\">&quot;实际写入字节:&quot;</span> + write);<br>                    <span class=\"hljs-comment\">// 4. 如果有剩余未读字节，才需要关注写事件</span><br>                    <span class=\"hljs-keyword\">if</span> (buffer.hasRemaining()) &#123;<br>                        <span class=\"hljs-comment\">// read 1  write 4</span><br>                        <span class=\"hljs-comment\">// 在原有关注事件的基础上，多关注 写事件</span><br>                        sckey.interestOps(sckey.interestOps() + SelectionKey.OP_WRITE);<br>                        <span class=\"hljs-comment\">// 把 buffer 作为附件加入 sckey</span><br>                        sckey.attach(buffer);<br>                    &#125;<br>                &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isWritable()) &#123;<br>                    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuffer) key.attachment();<br>                    <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> (SocketChannel) key.channel();<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">write</span> <span class=\"hljs-operator\">=</span> sc.write(buffer);<br>                    System.out.println(<span class=\"hljs-string\">&quot;实际写入字节:&quot;</span> + write);<br>                    <span class=\"hljs-keyword\">if</span> (!buffer.hasRemaining()) &#123; <span class=\"hljs-comment\">// 写完了</span><br>                        key.interestOps(key.interestOps() - SelectionKey.OP_WRITE);<br>                        key.attach(<span class=\"hljs-literal\">null</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WriteClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open();<br>        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> SocketChannel.open();<br>        sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>        sc.register(selector, SelectionKey.OP_CONNECT | SelectionKey.OP_READ);<br>        sc.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>));<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            selector.select();<br>            Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();<br>            <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                iter.remove();<br>                <span class=\"hljs-keyword\">if</span> (key.isConnectable()) &#123;<br>                    System.out.println(sc.finishConnect());<br>                &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.isReadable()) &#123;<br>                    <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>);<br>                    count += sc.read(buffer);<br>                    buffer.clear();<br>                    System.out.println(count);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-write-为何要取消\"><a href=\"#💡-write-为何要取消\" class=\"headerlink\" title=\"💡 write 为何要取消\"></a>💡 write 为何要取消</h4><p>只要向 channel 发送数据时，socket 缓冲可写，这个事件会频繁触发，因此应当只在 socket 缓冲区写不下时再关注可写事件，数据写完之后再取消关注</p>\n<h3 id=\"4-6-更进一步\"><a href=\"#4-6-更进一步\" class=\"headerlink\" title=\"4.6 更进一步\"></a>4.6 更进一步</h3><h4 id=\"💡-利用多线程优化\"><a href=\"#💡-利用多线程优化\" class=\"headerlink\" title=\"💡 利用多线程优化\"></a>💡 利用多线程优化</h4><blockquote>\n<p>现在都是多核 cpu，设计时要充分考虑别让 cpu 的力量被白白浪费</p>\n</blockquote>\n<p>前面的代码只有一个选择器，没有充分利用多核 cpu，如何改进呢？</p>\n<p>分两组选择器</p>\n<ul>\n<li>单线程配一个选择器，专门处理 accept 事件</li>\n<li>创建 cpu 核心数的线程，每个线程配一个选择器，轮流处理 read 事件</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChannelDemo7</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BossEventLoop</span>().register();<br>    &#125;<br><br><br>    <span class=\"hljs-meta\">@Slf4j</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BossEventLoop</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;<br>        <span class=\"hljs-keyword\">private</span> Selector boss;<br>        <span class=\"hljs-keyword\">private</span> WorkerEventLoop[] workers;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>        <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>            <span class=\"hljs-keyword\">if</span> (!start) &#123;<br>                <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open();<br>                ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>                ssc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                boss = Selector.open();<br>                <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">ssckey</span> <span class=\"hljs-operator\">=</span> ssc.register(boss, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>);<br>                ssckey.interestOps(SelectionKey.OP_ACCEPT);<br>                workers = initEventLoops();<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-string\">&quot;boss&quot;</span>).start();<br>                log.debug(<span class=\"hljs-string\">&quot;boss start...&quot;</span>);<br>                start = <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> WorkerEventLoop[] initEventLoops() &#123;<br><span class=\"hljs-comment\">//        EventLoop[] eventLoops = new EventLoop[Runtime.getRuntime().availableProcessors()];</span><br>            WorkerEventLoop[] workerEventLoops = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WorkerEventLoop</span>[<span class=\"hljs-number\">2</span>];<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; workerEventLoops.length; i++) &#123;<br>                workerEventLoops[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WorkerEventLoop</span>(i);<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> workerEventLoops;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    boss.select();<br>                    Iterator&lt;SelectionKey&gt; iter = boss.selectedKeys().iterator();<br>                    <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                        <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                        iter.remove();<br>                        <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>                            <span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> (ServerSocketChannel) key.channel();<br>                            <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> c.accept();<br>                            sc.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>                            log.debug(<span class=\"hljs-string\">&quot;&#123;&#125; connected&quot;</span>, sc.getRemoteAddress());<br>                            workers[index.getAndIncrement() % workers.length].register(sc);<br>                        &#125;<br>                    &#125;<br>                &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Slf4j</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WorkerEventLoop</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;<br>        <span class=\"hljs-keyword\">private</span> Selector worker;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> index;<br><br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ConcurrentLinkedQueue&lt;Runnable&gt; tasks = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentLinkedQueue</span>&lt;&gt;();<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">WorkerEventLoop</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.index = index;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(SocketChannel sc)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>            <span class=\"hljs-keyword\">if</span> (!start) &#123;<br>                worker = Selector.open();<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-string\">&quot;worker-&quot;</span> + index).start();<br>                start = <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            tasks.add(() -&gt; &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">sckey</span> <span class=\"hljs-operator\">=</span> sc.register(worker, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>);<br>                    sckey.interestOps(SelectionKey.OP_READ);<br>                    worker.selectNow();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;);<br>            worker.wakeup();<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    worker.select();<br>                    <span class=\"hljs-type\">Runnable</span> <span class=\"hljs-variable\">task</span> <span class=\"hljs-operator\">=</span> tasks.poll();<br>                    <span class=\"hljs-keyword\">if</span> (task != <span class=\"hljs-literal\">null</span>) &#123;<br>                        task.run();<br>                    &#125;<br>                    Set&lt;SelectionKey&gt; keys = worker.selectedKeys();<br>                    Iterator&lt;SelectionKey&gt; iter = keys.iterator();<br>                    <span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;<br>                        <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>                        <span class=\"hljs-keyword\">if</span> (key.isReadable()) &#123;<br>                            <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> (SocketChannel) key.channel();<br>                            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">128</span>);<br>                            <span class=\"hljs-keyword\">try</span> &#123;<br>                                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">read</span> <span class=\"hljs-operator\">=</span> sc.read(buffer);<br>                                <span class=\"hljs-keyword\">if</span> (read == -<span class=\"hljs-number\">1</span>) &#123;<br>                                    key.cancel();<br>                                    sc.close();<br>                                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                                    buffer.flip();<br>                                    log.debug(<span class=\"hljs-string\">&quot;&#123;&#125; message:&quot;</span>, sc.getRemoteAddress());<br>                                    debugAll(buffer);<br>                                &#125;<br>                            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                e.printStackTrace();<br>                                key.cancel();<br>                                sc.close();<br>                            &#125;<br>                        &#125;<br>                        iter.remove();<br>                    &#125;<br>                &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-如何拿到-cpu-个数\"><a href=\"#💡-如何拿到-cpu-个数\" class=\"headerlink\" title=\"💡 如何拿到 cpu 个数\"></a>💡 如何拿到 cpu 个数</h4><blockquote>\n<ul>\n<li>Runtime.getRuntime().availableProcessors() 如果工作在 docker 容器下，因为容器不是物理隔离的，会拿到物理 cpu 个数，而不是容器申请时的个数</li>\n<li>这个问题直到 jdk 10 才修复，使用 jvm 参数 UseContainerSupport 配置， 默认开启</li>\n</ul>\n</blockquote>\n<h3 id=\"4-7-UDP\"><a href=\"#4-7-UDP\" class=\"headerlink\" title=\"4.7 UDP\"></a>4.7 UDP</h3><ul>\n<li>UDP 是无连接的，client 发送数据不会管 server 是否开启</li>\n<li>server 这边的 receive 方法会将接收到的数据存入 byte buffer，但如果数据报文超过 buffer 大小，多出来的数据会被默默抛弃</li>\n</ul>\n<p>首先启动服务器端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UdpServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">DatagramChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> DatagramChannel.open()) &#123;<br>            channel.socket().bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">9999</span>));<br>            System.out.println(<span class=\"hljs-string\">&quot;waiting...&quot;</span>);<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">32</span>);<br>            channel.receive(buffer);<br>            buffer.flip();<br>            debug(buffer);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-function\"><span class=\"hljs-title\">waiting</span></span>...<br></code></pre></td></tr></table></figure>\n\n\n\n<p>运行客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UdpClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">DatagramChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> DatagramChannel.open()) &#123;<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> StandardCharsets.UTF_8.encode(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>            <span class=\"hljs-type\">InetSocketAddress</span> <span class=\"hljs-variable\">address</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9999</span>);<br>            channel.send(buffer, address);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来服务器端输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 65 6c 6c 6f                                  |hello           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"5-NIO-vs-BIO\"><a href=\"#5-NIO-vs-BIO\" class=\"headerlink\" title=\"5. NIO vs BIO\"></a>5. NIO vs BIO</h2><h3 id=\"5-1-stream-vs-channel\"><a href=\"#5-1-stream-vs-channel\" class=\"headerlink\" title=\"5.1 stream vs channel\"></a>5.1 stream vs channel</h3><ul>\n<li>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</li>\n<li>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，网络 channel 可配合 selector 实现多路复用</li>\n<li>二者均为全双工，即读写可以同时进行</li>\n</ul>\n<h3 id=\"5-2-IO-模型\"><a href=\"#5-2-IO-模型\" class=\"headerlink\" title=\"5.2 IO 模型\"></a>5.2 IO 模型</h3><p>同步阻塞、同步非阻塞、同步多路复用、异步阻塞（没有此情况）、异步非阻塞</p>\n<ul>\n<li>同步：线程自己去获取结果（一个线程）</li>\n<li>异步：线程自己不去获取结果，而是由其它线程送结果（至少两个线程）</li>\n</ul>\n<p>当调用一次 channel.read 或 stream.read 后，会切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：</p>\n<ul>\n<li>等待数据阶段</li>\n<li>复制数据阶段</li>\n</ul>\n<p><img src=\"/img/0033.png\"></p>\n<ul>\n<li><p>阻塞 IO</p>\n<p><img src=\"/img/0039.png\"></p>\n</li>\n<li><p>非阻塞  IO</p>\n<p><img src=\"/img/0035.png\"></p>\n</li>\n<li><p>多路复用</p>\n<p><img src=\"/img/0038.png\"></p>\n</li>\n<li><p>信号驱动</p>\n</li>\n<li><p>异步 IO</p>\n<p><img src=\"/img/0037.png\"></p>\n</li>\n<li><p>阻塞 IO vs 多路复用</p>\n<p><img src=\"/img/0034.png\"></p>\n<p><img src=\"/img/0036.png\"></p>\n</li>\n</ul>\n<h4 id=\"🔖-参考\"><a href=\"#🔖-参考\" class=\"headerlink\" title=\"🔖 参考\"></a>🔖 参考</h4><p>UNIX 网络编程 - 卷 I</p>\n<h3 id=\"5-3-零拷贝\"><a href=\"#5-3-零拷贝\" class=\"headerlink\" title=\"5.3 零拷贝\"></a>5.3 零拷贝</h3><h4 id=\"传统-IO-问题\"><a href=\"#传统-IO-问题\" class=\"headerlink\" title=\"传统 IO 问题\"></a>传统 IO 问题</h4><p>传统的 IO 将一个文件通过 socket 写出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;helloword/data.txt&quot;</span>);<br><span class=\"hljs-type\">RandomAccessFile</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomAccessFile</span>(file, <span class=\"hljs-string\">&quot;r&quot;</span>);<br><br><span class=\"hljs-type\">byte</span>[] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[(<span class=\"hljs-type\">int</span>)f.length()];<br>file.read(buf);<br><br><span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">socket</span> <span class=\"hljs-operator\">=</span> ...;<br>socket.getOutputStream().write(buf);<br></code></pre></td></tr></table></figure>\n\n<p>内部工作流程是这样的：</p>\n<p><img src=\"/img/0024.png\"></p>\n<ol>\n<li><p>java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu</p>\n<blockquote>\n<p>DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</p>\n</blockquote>\n</li>\n<li><p>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA</p>\n</li>\n<li><p>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</p>\n</li>\n<li><p>接下来要向网卡写数据，这项能力 java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</p>\n</li>\n</ol>\n<p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p>\n<ul>\n<li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li>\n<li>数据拷贝了共 4 次</li>\n</ul>\n<h4 id=\"NIO-优化\"><a href=\"#NIO-优化\" class=\"headerlink\" title=\"NIO 优化\"></a>NIO 优化</h4><p>通过 DirectByteBuf </p>\n<ul>\n<li>ByteBuffer.allocate(10)  HeapByteBuffer 使用的还是 java 内存</li>\n<li>ByteBuffer.allocateDirect(10)  DirectByteBuffer 使用的是操作系统内存</li>\n</ul>\n<p><img src=\"/img/0025.png\"></p>\n<p>大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用</p>\n<ul>\n<li>这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</li>\n<li>java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步<ul>\n<li>DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列</li>\n<li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li>\n</ul>\n</li>\n<li>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</li>\n</ul>\n<p>进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo&#x2F;transferFrom 方法拷贝数据</p>\n<p><img src=\"/img/0026.png\"></p>\n<ol>\n<li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li>\n<li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</li>\n<li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</li>\n</ol>\n<p>可以看到</p>\n<ul>\n<li>只发生了一次用户态与内核态的切换</li>\n<li>数据拷贝了 3 次</li>\n</ul>\n<p>进一步优化（linux 2.4）</p>\n<p><img src=\"/img/0027.png\"></p>\n<ol>\n<li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li>\n<li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li>\n<li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 cpu</li>\n</ol>\n<p>整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有</p>\n<ul>\n<li>更少的用户态与内核态的切换</li>\n<li>不利用 cpu 计算，减少 cpu 缓存伪共享</li>\n<li>零拷贝适合小文件传输</li>\n</ul>\n<h3 id=\"5-3-AIO\"><a href=\"#5-3-AIO\" class=\"headerlink\" title=\"5.3 AIO\"></a>5.3 AIO</h3><p>AIO 用来解决数据复制阶段的阻塞问题</p>\n<ul>\n<li>同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置</li>\n<li>异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果</li>\n</ul>\n<blockquote>\n<p>异步模型需要底层操作系统（Kernel）提供支持</p>\n<ul>\n<li>Windows 系统通过 IOCP 实现了真正的异步 IO</li>\n<li>Linux 系统异步 IO 在 2.6 版本引入，但其底层实现还是用多路复用模拟了异步 IO，性能没有优势</li>\n</ul>\n</blockquote>\n<h4 id=\"文件-AIO\"><a href=\"#文件-AIO\" class=\"headerlink\" title=\"文件 AIO\"></a>文件 AIO</h4><p>先来看看 AsynchronousFileChannel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AioDemo1</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-type\">AsynchronousFileChannel</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <br>                AsynchronousFileChannel.open(<br>                \tPaths.get(<span class=\"hljs-string\">&quot;1.txt&quot;</span>), StandardOpenOption.READ);<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">2</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;begin...&quot;</span>);<br>            s.read(buffer, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(Integer result, ByteBuffer attachment)</span> &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;read completed...&#123;&#125;&quot;</span>, result);<br>                    buffer.flip();<br>                    debug(buffer);<br>                &#125;<br><br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;read failed...&quot;</span>);<br>                &#125;<br>            &#125;);<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.debug(<span class=\"hljs-string\">&quot;do other things...&quot;</span>);<br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - begin...<br>13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - do other things...<br>13:44:56 [DEBUG] [Thread-5] c.i.aio.AioDemo1 - read completed...2<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 61 0d                                           |a.              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到</p>\n<ul>\n<li>响应文件读取成功的是另一个线程 Thread-5</li>\n<li>主线程并没有 IO 操作阻塞</li>\n</ul>\n<h4 id=\"💡-守护线程\"><a href=\"#💡-守护线程\" class=\"headerlink\" title=\"💡 守护线程\"></a>💡 守护线程</h4><p>默认文件 AIO 使用的线程都是守护线程，所以最后要执行 <code>System.in.read()</code> 以避免守护线程意外结束</p>\n<h4 id=\"网络-AIO\"><a href=\"#网络-AIO\" class=\"headerlink\" title=\"网络 AIO\"></a>网络 AIO</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AioServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">AsynchronousServerSocketChannel</span> <span class=\"hljs-variable\">ssc</span> <span class=\"hljs-operator\">=</span> AsynchronousServerSocketChannel.open();<br>        ssc.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br>        ssc.accept(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AcceptHandler</span>(ssc));<br>        System.in.read();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">closeChannel</span><span class=\"hljs-params\">(AsynchronousSocketChannel sc)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            System.out.printf(<span class=\"hljs-string\">&quot;[%s] %s close\\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());<br>            sc.close();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReadHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt; &#123;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> AsynchronousSocketChannel sc;<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ReadHandler</span><span class=\"hljs-params\">(AsynchronousSocketChannel sc)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.sc = sc;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(Integer result, ByteBuffer attachment)</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (result == -<span class=\"hljs-number\">1</span>) &#123;<br>                    closeChannel(sc);<br>                    <span class=\"hljs-keyword\">return</span>;<br>                &#125;<br>                System.out.printf(<span class=\"hljs-string\">&quot;[%s] %s read\\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());<br>                attachment.flip();<br>                System.out.println(Charset.defaultCharset().decode(attachment));<br>                attachment.clear();<br>                <span class=\"hljs-comment\">// 处理完第一个 read 时，需要再次调用 read 方法来处理下一个 read 事件</span><br>                sc.read(attachment, attachment, <span class=\"hljs-built_in\">this</span>);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>            closeChannel(sc);<br>            exc.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WriteHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;Integer, ByteBuffer&gt; &#123;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> AsynchronousSocketChannel sc;<br><br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">WriteHandler</span><span class=\"hljs-params\">(AsynchronousSocketChannel sc)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.sc = sc;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(Integer result, ByteBuffer attachment)</span> &#123;<br>            <span class=\"hljs-comment\">// 如果作为附件的 buffer 还有内容，需要再次 write 写出剩余内容</span><br>            <span class=\"hljs-keyword\">if</span> (attachment.hasRemaining()) &#123;<br>                sc.write(attachment);<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>            exc.printStackTrace();<br>            closeChannel(sc);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AcceptHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CompletionHandler</span>&lt;AsynchronousSocketChannel, Object&gt; &#123;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> AsynchronousServerSocketChannel ssc;<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AcceptHandler</span><span class=\"hljs-params\">(AsynchronousServerSocketChannel ssc)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.ssc = ssc;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">completed</span><span class=\"hljs-params\">(AsynchronousSocketChannel sc, Object attachment)</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                System.out.printf(<span class=\"hljs-string\">&quot;[%s] %s connected\\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class=\"hljs-type\">ByteBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBuffer.allocate(<span class=\"hljs-number\">16</span>);<br>            <span class=\"hljs-comment\">// 读事件由 ReadHandler 处理</span><br>            sc.read(buffer, buffer, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReadHandler</span>(sc));<br>            <span class=\"hljs-comment\">// 写事件由 WriteHandler 处理</span><br>            sc.write(Charset.defaultCharset().encode(<span class=\"hljs-string\">&quot;server hello!&quot;</span>), ByteBuffer.allocate(<span class=\"hljs-number\">16</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteHandler</span>(sc));<br>            <span class=\"hljs-comment\">// 处理完第一个 accpet 时，需要再次调用 accept 方法来处理下一个 accept 事件</span><br>            ssc.accept(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-built_in\">this</span>);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">failed</span><span class=\"hljs-params\">(Throwable exc, Object attachment)</span> &#123;<br>            exc.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"Netty02-入门","date":"2023-05-06T13:22:02.000Z","_content":"\n该笔记是B站黑马的Netty视频的配套笔记2。\n<!-- more -->\n# 二. Netty 入门\n\n\n\n## 1. 概述\n\n### 1.1 Netty 是什么？\n\n```\nNetty is an asynchronous event-driven network application framework\nfor rapid development of maintainable high performance protocol servers & clients.\n```\n\nNetty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端\n\n\n\n### 1.2 Netty 的作者\n\n![](img/0005.png)\n\n他还是另一个著名网络应用框架 Mina 的重要贡献者\n\n\n\n### 1.3 Netty 的地位\n\nNetty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位\n\n以下的框架都使用了 Netty，因为它们有网络通信需求！\n\n* Cassandra - nosql 数据库\n* Spark - 大数据分布式计算框架\n* Hadoop - 大数据分布式存储框架\n* RocketMQ - ali 开源的消息队列\n* ElasticSearch - 搜索引擎\n* gRPC - rpc 框架\n* Dubbo - rpc 框架\n* Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\n* Zookeeper - 分布式协调框架\n\n\n\n### 1.4 Netty 的优势\n\n* Netty vs NIO，工作量大，bug 多\n  * 需要自己构建协议\n  * 解决 TCP 传输问题，如粘包、半包\n  * epoll 空轮询导致 CPU 100%\n  * 对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\n* Netty vs 其它网络应用框架\n  * Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀\n  * 久经考验，16年，Netty 版本\n    * 2.x 2004\n    * 3.x 2008\n    * 4.x 2013\n    * 5.x 已废弃（没有明显的性能提升，维护成本高）\n\n\n\n## 2. Hello World\n\n### 2.1 目标\n\n开发一个简单的服务器端和客户端\n\n* 客户端向服务器端发送 hello, world\n* 服务器仅接收，不返回\n\n\n\n加入依赖\n\n```xml\n<dependency>\n    <groupId>io.netty</groupId>\n    <artifactId>netty-all</artifactId>\n    <version>4.1.39.Final</version>\n</dependency>\n```\n\n\n\n\n\n### 2.2 服务器端\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup()) // 1\n    .channel(NioServerSocketChannel.class) // 2\n    .childHandler(new ChannelInitializer<NioSocketChannel>() { // 3\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new StringDecoder()); // 5\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() { // 6\n                @Override\n                protected void channelRead0(ChannelHandlerContext ctx, String msg) {\n                    System.out.println(msg);\n                }\n            });\n        }\n    })\n    .bind(8080); // 4\n```\n\n代码解读\n\n* 1 处，创建 NioEventLoopGroup，可以简单理解为 `线程池 + Selector` 后面会详细展开\n\n* 2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有\n\n  ![](img/0006.png)\n\n* 3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器\n\n* 4 处，ServerSocketChannel 绑定的监听端口\n\n* 5 处，SocketChannel 的处理器，解码 ByteBuf => String\n\n* 6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果\n\n\n\n### 2.3 客户端\n\n```java\nnew Bootstrap()\n    .group(new NioEventLoopGroup()) // 1\n    .channel(NioSocketChannel.class) // 2\n    .handler(new ChannelInitializer<Channel>() { // 3\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder()); // 8\n        }\n    })\n    .connect(\"127.0.0.1\", 8080) // 4\n    .sync() // 5\n    .channel() // 6\n    .writeAndFlush(new Date() + \": hello world!\"); // 7\n```\n\n代码解读\n\n* 1 处，创建 NioEventLoopGroup，同 Server\n\n* 2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有\n\n  ![](img/0007.png)\n\n* 3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器\n* 4 处，指定要连接的服务器和端口\n* 5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕\n* 6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作\n* 7 处，写入消息并清空缓冲区\n* 8 处，消息会经过通道 handler 处理，这里是将 String => ByteBuf 发出\n* 数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程\n\n\n\n### 2.4 流程梳理\n\n![](img/0040.png)\n\n#### 💡 提示\n\n> 一开始需要树立正确的观念\n>\n> * 把 channel 理解为数据的通道\n> * 把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf\n> * 把 handler 理解为数据的处理工序\n>   * 工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成...）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）\n>   * handler 分 Inbound 和 Outbound 两类\n> * 把 eventLoop 理解为处理数据的工人\n>   * 工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定）\n>   * 工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务\n>   * 工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人\n\n\n\n## 3. 组件\n\n### 3.1 EventLoop\n\n事件循环对象\n\nEventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。\n\n它的继承关系比较复杂\n\n* 一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法\n* 另一条线是继承自 netty 自己的 OrderedEventExecutor，\n  * 提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop\n  * 提供了 parent 方法来看看自己属于哪个 EventLoopGroup\n\n\n\n事件循环组\n\nEventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）\n\n* 继承自 netty 自己的 EventExecutorGroup\n  * 实现了 Iterable 接口提供遍历 EventLoop 的能力\n  * 另有 next 方法获取集合中下一个 EventLoop\n\n\n\n以一个简单的实现为例：\n\n```java\n// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程\nDefaultEventLoopGroup group = new DefaultEventLoopGroup(2);\nSystem.out.println(group.next());\nSystem.out.println(group.next());\nSystem.out.println(group.next());\n```\n\n输出\n\n```\nio.netty.channel.DefaultEventLoop@60f82f98\nio.netty.channel.DefaultEventLoop@35f983a6\nio.netty.channel.DefaultEventLoop@60f82f98\n```\n\n也可以使用 for 循环\n\n```java\nDefaultEventLoopGroup group = new DefaultEventLoopGroup(2);\nfor (EventExecutor eventLoop : group) {\n    System.out.println(eventLoop);\n}\n```\n\n输出\n\n```\nio.netty.channel.DefaultEventLoop@60f82f98\nio.netty.channel.DefaultEventLoop@35f983a6\n```\n\n\n\n#### 💡 优雅关闭\n\n优雅关闭 `shutdownGracefully` 方法。该方法会首先切换 `EventLoopGroup` 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的\n\n\n\n#### 演示 NioEventLoop 处理 io 事件\n\n服务器端两个 nio worker 工人\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2))\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf byteBuf = msg instanceof ByteBuf ? ((ByteBuf) msg) : null;\n                    if (byteBuf != null) {\n                        byte[] buf = new byte[16];\n                        ByteBuf len = byteBuf.readBytes(buf, 0, byteBuf.readableBytes());\n                        log.debug(new String(buf));\n                    }\n                }\n            });\n        }\n    }).bind(8080).sync();\n```\n\n客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\n\n```java\npublic static void main(String[] args) throws InterruptedException {\n    Channel channel = new Bootstrap()\n            .group(new NioEventLoopGroup(1))\n            .handler(new ChannelInitializer<NioSocketChannel>() {\n                @Override\n                protected void initChannel(NioSocketChannel ch) throws Exception {\n                    System.out.println(\"init...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                }\n            })\n            .channel(NioSocketChannel.class).connect(\"localhost\", 8080)\n            .sync()\n            .channel();\n\n    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(\"wangwu\".getBytes()));\n    Thread.sleep(2000);\n    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(\"wangwu\".getBytes()));\n```\n\n最后输出\n\n```\n22:03:34 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:03:36 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:05:36 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:05:38 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:06:09 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu        \n22:06:11 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu         \n```\n\n可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定\n\n![](img/0042.png)\n\n\n\n再增加两个非 nio 工人\n\n```java\nDefaultEventLoopGroup normalWorkers = new DefaultEventLoopGroup(2);\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2))\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch)  {\n            ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n            ch.pipeline().addLast(normalWorkers,\"myhandler\",\n              new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf byteBuf = msg instanceof ByteBuf ? ((ByteBuf) msg) : null;\n                    if (byteBuf != null) {\n                        byte[] buf = new byte[16];\n                        ByteBuf len = byteBuf.readBytes(buf, 0, byteBuf.readableBytes());\n                        log.debug(new String(buf));\n                    }\n                }\n            });\n        }\n    }).bind(8080).sync();\n```\n\n客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\n\n输出\n\n```\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED\n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n```\n\n可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）\n\n\n\n![](img/0041.png)\n\n\n\n#### 💡 handler 执行中如何换人？\n\n关键代码 `io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()`\n\n```java\nstatic void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) {\n    final Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, \"msg\"), next);\n    // 下一个 handler 的事件循环是否与当前的事件循环是同一个线程\n    EventExecutor executor = next.executor();\n    \n    // 是，直接调用\n    if (executor.inEventLoop()) {\n        next.invokeChannelRead(m);\n    } \n    // 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）\n    else {\n        executor.execute(new Runnable() {\n            @Override\n            public void run() {\n                next.invokeChannelRead(m);\n            }\n        });\n    }\n}\n```\n\n* 如果两个 handler 绑定的是同一个线程，那么就直接调用\n* 否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用\n\n\n\n#### 演示 NioEventLoop 处理普通任务\n\nNioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务\n\n```java\nNioEventLoopGroup nioWorkers = new NioEventLoopGroup(2);\n\nlog.debug(\"server start...\");\nThread.sleep(2000);\nnioWorkers.execute(()->{\n    log.debug(\"normal task...\");\n});\n```\n\n输出\n\n```\n22:30:36 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...\n22:30:38 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - normal task...\n```\n\n> 可以用来执行耗时较长的任务\n\n\n\n#### 演示 NioEventLoop 处理定时任务\n\n```java\nNioEventLoopGroup nioWorkers = new NioEventLoopGroup(2);\n\nlog.debug(\"server start...\");\nThread.sleep(2000);\nnioWorkers.scheduleAtFixedRate(() -> {\n    log.debug(\"running...\");\n}, 0, 1, TimeUnit.SECONDS);\n```\n\n输出\n\n```\n22:35:15 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...\n22:35:17 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:19 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:20 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n...\n```\n\n> 可以用来执行定时任务\n\n\n\n### 3.2 Channel\n\nchannel 的主要作用\n\n* close() 可以用来关闭 channel\n* closeFuture() 用来处理 channel 的关闭\n  * sync 方法作用是同步等待 channel 关闭\n  * 而 addListener 方法是异步等待 channel 关闭\n* pipeline() 方法添加处理器\n* write() 方法将数据写入\n* writeAndFlush() 方法将数据写入并刷出\n\n\n\n#### ChannelFuture\n\n这时刚才的客户端代码\n\n```java\nnew Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080)\n    .sync()\n    .channel()\n    .writeAndFlush(new Date() + \": hello world!\");\n```\n\n现在把它拆开来看\n\n```java\nChannelFuture channelFuture = new Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080); // 1\n\nchannelFuture.sync().channel().writeAndFlush(new Date() + \": hello world!\");\n```\n\n* 1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象\n\n**注意** connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象\n\n实验如下：\n\n```java\nChannelFuture channelFuture = new Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080);\n\nSystem.out.println(channelFuture.channel()); // 1\nchannelFuture.sync(); // 2\nSystem.out.println(channelFuture.channel()); // 3\n```\n\n* 执行到 1 时，连接未建立，打印 `[id: 0x2e1884dd]`\n* 执行到 2 时，sync 方法是同步等待连接建立完成\n* 执行到 3 时，连接肯定建立了，打印 `[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]`\n\n除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：\n\n```java\nChannelFuture channelFuture = new Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080);\nSystem.out.println(channelFuture.channel()); // 1\nchannelFuture.addListener((ChannelFutureListener) future -> {\n    System.out.println(future.channel()); // 2\n});\n```\n\n* 执行到 1 时，连接未建立，打印 `[id: 0x749124ba]`\n* ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 `[id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]`\n\n\n\n#### CloseFuture\n\n```java\n@Slf4j\npublic class CloseFutureClient {\n    public static void main(String[] args) throws InterruptedException {\n        NioEventLoopGroup group new NioEventLoopGroup();\n        ChannelFuture channelFuture = new Bootstrap()\n                .group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<NioSocketChannel>() {\n                    @Override // 在连接建立后被调用\n                    protected void initChannel(NioSocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                        ch.pipeline().addLast(new StringEncoder());\n                    }\n                })\n                .connect(new InetSocketAddress(\"localhost\", 8080));\n        Channel channel = channelFuture.sync().channel();\n        log.debug(\"{}\", channel);\n        new Thread(()->{\n            Scanner scanner = new Scanner(System.in);\n            while (true) {\n                String line = scanner.nextLine();\n                if (\"q\".equals(line)) {\n                    channel.close(); // close 异步操作 1s 之后\n//                    log.debug(\"处理关闭之后的操作\"); // 不能在这里善后\n                    break;\n                }\n                channel.writeAndFlush(line);\n            }\n        }, \"input\").start();\n\n        // 获取 CloseFuture 对象， 1) 同步处理关闭， 2) 异步处理关闭\n        ChannelFuture closeFuture = channel.closeFuture();\n        /*log.debug(\"waiting close...\");\n        closeFuture.sync();\n        log.debug(\"处理关闭之后的操作\");*/\n        closeFuture.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                log.debug(\"处理关闭之后的操作\");\n                group.shutdownGracefully();\n            }\n        });\n    }\n}\n```\n\n\n\n\n\n#### 💡 异步提升的是什么\n\n* 有些同学看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接\n\n* 还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的\n\n\n\n\n\n思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：`4 * 8 * 3 = 96`\n\n![](img/0044.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下\n\n![](img/0048.png)\n\n\n\n\n\n\n\n\n\n\n\n因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 `4 * 8 * 12` 效率几乎是原来的四倍\n\n![](img/0047.png)\n\n要点\n\n* 单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势\n* 异步并没有缩短响应时间，反而有所增加\n* 合理进行任务拆分，也是利用异步的关键\n\n\n\n### 3.3 Future & Promise\n\n在异步处理时，经常用到这两个接口\n\n首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展\n\n* jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果\n* netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束\n* netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器\n\n| 功能/名称    | jdk Future                     | netty Future                                                 | Promise      |\n| ------------ | ------------------------------ | ------------------------------------------------------------ | ------------ |\n| cancel       | 取消任务                       | -                                                            | -            |\n| isCanceled   | 任务是否取消                   | -                                                            | -            |\n| isDone       | 任务是否完成，不能区分成功失败 | -                                                            | -            |\n| get          | 获取任务结果，阻塞等待         | -                                                            | -            |\n| getNow       | -                              | 获取任务结果，非阻塞，还未产生结果时返回 null                | -            |\n| await        | -                              | 等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断 | -            |\n| sync         | -                              | 等待任务结束，如果任务失败，抛出异常                         | -            |\n| isSuccess    | -                              | 判断任务是否成功                                             | -            |\n| cause        | -                              | 获取失败信息，非阻塞，如果没有失败，返回null                 | -            |\n| addLinstener | -                              | 添加回调，异步接收结果                                       | -            |\n| setSuccess   | -                              | -                                                            | 设置成功结果 |\n| setFailure   | -                              | -                                                            | 设置失败结果 |\n\n\n\n#### 例1\n\n同步处理任务成功\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\neventExecutors.execute(()->{\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    log.debug(\"set success, {}\",10);\n    promise.setSuccess(10);\n});\n\nlog.debug(\"start...\");\nlog.debug(\"{}\",promise.getNow()); // 还没有结果\nlog.debug(\"{}\",promise.get());\n```\n\n输出\n\n```\n11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n11:51:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10\n11:51:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - 10\n```\n\n\n\n#### 例2\n\n异步处理任务成功\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\n// 设置回调，异步接收结果\npromise.addListener(future -> {\n    // 这里的 future 就是上面的 promise\n    log.debug(\"{}\",future.getNow());\n});\n\n// 等待 1000 后设置成功结果\neventExecutors.execute(()->{\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    log.debug(\"set success, {}\",10);\n    promise.setSuccess(10);\n});\n\nlog.debug(\"start...\");\n```\n\n输出\n\n```\n11:49:30 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10\n11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - 10\n```\n\n\n\n#### 例3\n\n同步处理任务失败 - sync & get\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\n        DefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\n        eventExecutors.execute(() -> {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            RuntimeException e = new RuntimeException(\"error...\");\n            log.debug(\"set failure, {}\", e.toString());\n            promise.setFailure(e);\n        });\n\n        log.debug(\"start...\");\n        log.debug(\"{}\", promise.getNow());\n        promise.get(); // sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常\n```\n\n输出\n\n```\n12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n12:11:08 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\nException in thread \"main\" java.util.concurrent.ExecutionException: java.lang.RuntimeException: error...\n\tat io.netty.util.concurrent.AbstractFuture.get(AbstractFuture.java:41)\n\tat com.itcast.oio.DefaultPromiseTest2.main(DefaultPromiseTest2.java:34)\nCaused by: java.lang.RuntimeException: error...\n\tat com.itcast.oio.DefaultPromiseTest2.lambda$main$0(DefaultPromiseTest2.java:27)\n\tat io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:745)\n```\n\n\n\n#### 例4\n\n同步处理任务失败 - await\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\neventExecutors.execute(() -> {\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    RuntimeException e = new RuntimeException(\"error...\");\n    log.debug(\"set failure, {}\", e.toString());\n    promise.setFailure(e);\n});\n\nlog.debug(\"start...\");\nlog.debug(\"{}\", promise.getNow());\npromise.await(); // 与 sync 和 get 区别在于，不会抛异常\nlog.debug(\"result {}\", (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());\n```\n\n输出\n\n```\n12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n12:18:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\n12:18:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...\n```\n\n\n\n#### 例5\n\n异步处理任务失败\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\npromise.addListener(future -> {\n    log.debug(\"result {}\", (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());\n});\n\neventExecutors.execute(() -> {\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    RuntimeException e = new RuntimeException(\"error...\");\n    log.debug(\"set failure, {}\", e.toString());\n    promise.setFailure(e);\n});\n\nlog.debug(\"start...\");\n```\n\n输出\n\n```\n12:04:57 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\n12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...\n```\n\n\n\n#### 例6\n\nawait 死锁检查\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\neventExecutors.submit(()->{\n    System.out.println(\"1\");\n    try {\n        promise.await();\n        // 注意不能仅捕获 InterruptedException 异常\n        // 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播\n        // 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出\n    } catch (Exception e) { \n        e.printStackTrace();\n    }\n    System.out.println(\"2\");\n});\neventExecutors.submit(()->{\n    System.out.println(\"3\");\n    try {\n        promise.await();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    System.out.println(\"4\");\n});\n```\n\n输出\n\n```\n1\n2\n3\n4\nio.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)\n\tat io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)\n\tat io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)\n\tat com.itcast.oio.DefaultPromiseTest.lambda$main$0(DefaultPromiseTest.java:27)\n\tat io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\n\tat io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)\n\tat io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:745)\nio.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)\n\tat io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)\n\tat io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)\n\tat com.itcast.oio.DefaultPromiseTest.lambda$main$1(DefaultPromiseTest.java:36)\n\tat io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\n\tat io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)\n\tat io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:745)\n\n```\n\n\n\n\n\n### 3.4 Handler & Pipeline\n\nChannelHandler 用来处理 Channel 上的各种事件，分为入站、出站两种。所有 ChannelHandler 被连成一串，就是 Pipeline\n\n* 入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来读取客户端数据，写回结果\n* 出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对写回结果进行加工\n\n打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品\n\n\n\n先搞清楚顺序，服务端\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    System.out.println(1);\n                    ctx.fireChannelRead(msg); // 1\n                }\n            });\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    System.out.println(2);\n                    ctx.fireChannelRead(msg); // 2\n                }\n            });\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    System.out.println(3);\n                    ctx.channel().write(msg); // 3\n                }\n            });\n            ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){\n                @Override\n                public void write(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise) {\n                    System.out.println(4);\n                    ctx.write(msg, promise); // 4\n                }\n            });\n            ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){\n                @Override\n                public void write(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise) {\n                    System.out.println(5);\n                    ctx.write(msg, promise); // 5\n                }\n            });\n            ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){\n                @Override\n                public void write(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise) {\n                    System.out.println(6);\n                    ctx.write(msg, promise); // 6\n                }\n            });\n        }\n    })\n    .bind(8080);\n```\n\n客户端\n\n```java\nnew Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080)\n    .addListener((ChannelFutureListener) future -> {\n        future.channel().writeAndFlush(\"hello,world\");\n    });\n```\n\n服务器端打印：\n\n```\n1\n2\n3\n6\n5\n4\n```\n\n可以看到，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表\n\n![](img/0008.png)\n\n* 入站处理器中，ctx.fireChannelRead(msg) 是 **调用下一个入站处理器**\n  * 如果注释掉 1 处代码，则仅会打印 1\n  * 如果注释掉 2 处代码，则仅会打印 1 2\n* 3 处的 ctx.channel().write(msg) 会 **从尾部开始触发** 后续出站处理器的执行\n  * 如果注释掉 3 处代码，则仅会打印 1 2 3\n* 类似的，出站处理器中，ctx.write(msg, promise) 的调用也会 **触发上一个出站处理器**\n  * 如果注释掉 6 处代码，则仅会打印 1 2 3 6\n* ctx.channel().write(msg) vs ctx.write(msg)\n  * 都是触发出站处理器的执行\n  * ctx.channel().write(msg) 从尾部开始查找出站处理器\n  * ctx.write(msg) 是从当前节点找上一个出站处理器\n  * 3 处的 ctx.channel().write(msg) 如果改为 ctx.write(msg) 仅会打印 1 2 3，因为节点3 之前没有其它出站处理器了\n  * 6 处的 ctx.write(msg, promise) 如果改为 ctx.channel().write(msg) 会打印 1 2 3 6 6 6... 因为 ctx.channel().write() 是从尾部开始查找，结果又是节点6 自己\n\n\n\n图1 - 服务端 pipeline 触发的原始流程，图中数字代表了处理步骤的先后次序\n\n![](img/0009.png)\n\n\n\n### 3.5 ByteBuf\n\n是对字节数据的封装\n\n#### 1）创建\n\n```java\nByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(10);\nlog(buffer);\n```\n\n上面代码创建了一个默认的 ByteBuf（池化基于直接内存的 ByteBuf），初始容量是 10\n\n输出\n\n```\nread index:0 write index:0 capacity:10\n```\n\n其中 log 方法参考如下\n\n```java\nprivate static void log(ByteBuf buffer) {\n    int length = buffer.readableBytes();\n    int rows = length / 16 + (length % 15 == 0 ? 0 : 1) + 4;\n    StringBuilder buf = new StringBuilder(rows * 80 * 2)\n        .append(\"read index:\").append(buffer.readerIndex())\n        .append(\" write index:\").append(buffer.writerIndex())\n        .append(\" capacity:\").append(buffer.capacity())\n        .append(NEWLINE);\n    appendPrettyHexDump(buf, buffer);\n    System.out.println(buf.toString());\n}\n```\n\n\n\n#### 2）直接内存 vs 堆内存\n\n可以使用下面的代码来创建池化基于堆的 ByteBuf\n\n```java\nByteBuf buffer = ByteBufAllocator.DEFAULT.heapBuffer(10);\n```\n\n也可以使用下面的代码来创建池化基于直接内存的 ByteBuf\n\n```java\nByteBuf buffer = ByteBufAllocator.DEFAULT.directBuffer(10);\n```\n\n* 直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用\n* 直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放\n\n\n\n#### 3）池化 vs 非池化\n\n池化的最大意义在于可以重用 ByteBuf，优点有\n\n* 没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力\n* 有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率\n* 高并发时，池化功能更节约内存，减少内存溢出的可能\n\n池化功能是否开启，可以通过下面的系统环境变量来设置\n\n```java\n-Dio.netty.allocator.type={unpooled|pooled}\n```\n\n* 4.1 以后，非 Android 平台默认启用池化实现，Android 平台启用非池化实现\n* 4.1 之前，池化功能还不成熟，默认是非池化实现\n\n\n\n#### 4）组成\n\nByteBuf 由四部分组成\n\n![](img/0010.png)\n\n最开始读写指针都在 0 位置\n\n\n\n#### 5）写入\n\n方法列表，省略一些不重要的方法\n\n| 方法签名                                                     | 含义                   | 备注                                        |\n| ------------------------------------------------------------ | ---------------------- | ------------------------------------------- |\n| writeBoolean(boolean value)                                  | 写入 boolean 值        | 用一字节 01\\|00 代表 true\\|false            |\n| writeByte(int value)                                         | 写入 byte 值           |                                             |\n| writeShort(int value)                                        | 写入 short 值          |                                             |\n| writeInt(int value)                                          | 写入 int 值            | Big Endian，即 0x250，写入后 00 00 02 50    |\n| writeIntLE(int value)                                        | 写入 int 值            | Little Endian，即 0x250，写入后 50 02 00 00 |\n| writeLong(long value)                                        | 写入 long 值           |                                             |\n| writeChar(int value)                                         | 写入 char 值           |                                             |\n| writeFloat(float value)                                      | 写入 float 值          |                                             |\n| writeDouble(double value)                                    | 写入 double 值         |                                             |\n| writeBytes(ByteBuf src)                                      | 写入 netty 的 ByteBuf  |                                             |\n| writeBytes(byte[] src)                                       | 写入 byte[]            |                                             |\n| writeBytes(ByteBuffer src)                                   | 写入 nio 的 ByteBuffer |                                             |\n| int writeCharSequence(CharSequence sequence, Charset charset) | 写入字符串             |                                             |\n\n> 注意\n>\n> * 这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用\n> * 网络传输，默认习惯是 Big Endian\n\n\n\n先写入 4 个字节\n\n```java\nbuffer.writeBytes(new byte[]{1, 2, 3, 4});\nlog(buffer);\n```\n\n结果是\n\n```\nread index:0 write index:4 capacity:10\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04                                     |....            |\n+--------+-------------------------------------------------+----------------+\n```\n\n再写入一个 int 整数，也是 4 个字节\n\n```java\nbuffer.writeInt(5);\nlog(buffer);\n```\n\n结果是\n\n```\nread index:0 write index:8 capacity:10\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 00 00 00 05                         |........        |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置\n\n\n\n#### 6）扩容\n\n再写入一个 int 整数时，容量不够了（初始容量是 10），这时会引发扩容\n\n```java\nbuffer.writeInt(6);\nlog(buffer);\n```\n\n扩容规则是\n\n* 如何写入后数据大小未超过 512，则选择下一个 16 的整数倍，例如写入后大小为 12 ，则扩容后 capacity 是 16\n* 如果写入后数据大小超过 512，则选择下一个 2^n，例如写入后大小为 513，则扩容后 capacity 是 2^10=1024（2^9=512 已经不够了）\n* 扩容不能超过 max capacity 会报错\n\n结果是\n\n```\nread index:0 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 00 00 00 05 00 00 00 06             |............    |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 7）读取\n\n例如读了 4 次，每次一个字节\n\n```java\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nlog(buffer);\n```\n\n读过的内容，就属于废弃部分了，再读只能读那些尚未读取的部分\n\n```\n1\n2\n3\n4\nread index:4 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 05 00 00 00 06                         |........        |\n+--------+-------------------------------------------------+----------------+\n```\n\n如果需要重复读取 int 整数 5，怎么办？\n\n可以在 read 前先做个标记 mark\n\n```java\nbuffer.markReaderIndex();\nSystem.out.println(buffer.readInt());\nlog(buffer);\n```\n\n结果\n\n```\n5\nread index:8 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 06                                     |....            |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时要重复读取的话，重置到标记位置 reset\n\n```java\nbuffer.resetReaderIndex();\nlog(buffer);\n```\n\n这时\n\n```\nread index:4 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 05 00 00 00 06                         |........        |\n+--------+-------------------------------------------------+----------------+\n```\n\n还有种办法是采用 get 开头的一系列方法，这些方法不会改变 read index\n\n\n\n#### 8）retain & release\n\n由于 Netty 中有堆外内存的 ByteBuf 实现，堆外内存最好是手动来释放，而不是等 GC 垃圾回收。\n\n* UnpooledHeapByteBuf 使用的是 JVM 内存，只需等 GC 回收内存即可\n* UnpooledDirectByteBuf 使用的就是直接内存了，需要特殊的方法来回收内存\n* PooledByteBuf 和它的子类使用了池化机制，需要更复杂的规则来回收内存\n\n\n\n> 回收内存的源码实现，请关注下面方法的不同实现\n>\n> `protected abstract void deallocate()`\n\n\n\nNetty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口\n\n* 每个 ByteBuf 对象的初始计数为 1\n* 调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收\n* 调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收\n* 当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用\n\n\n\n谁来负责 release 呢？\n\n不是我们想象的（一般情况下）\n\n```java\nByteBuf buf = ...\ntry {\n    ...\n} finally {\n    buf.release();\n}\n```\n\n请思考，因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，如果在 finally 中 release 了，就失去了传递性（当然，如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）\n\n基本规则是，**谁是最后使用者，谁负责 release**，详细分析如下\n\n* 起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）\n* 入站 ByteBuf 处理原则\n  * 对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release\n  * 将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release\n  * 如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release\n  * 注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release\n  * 假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）\n* 出站 ByteBuf 处理原则\n  * 出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release\n* 异常处理原则\n  * 有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true\n\n\n\nTailContext 释放未处理消息逻辑\n\n```java\n// io.netty.channel.DefaultChannelPipeline#onUnhandledInboundMessage(java.lang.Object)\nprotected void onUnhandledInboundMessage(Object msg) {\n    try {\n        logger.debug(\n            \"Discarded inbound message {} that reached at the tail of the pipeline. \" +\n            \"Please check your pipeline configuration.\", msg);\n    } finally {\n        ReferenceCountUtil.release(msg);\n    }\n}\n```\n\n具体代码\n\n```java\n// io.netty.util.ReferenceCountUtil#release(java.lang.Object)\npublic static boolean release(Object msg) {\n    if (msg instanceof ReferenceCounted) {\n        return ((ReferenceCounted) msg).release();\n    }\n    return false;\n}\n```\n\n\n\n#### 9）slice\n\n【零拷贝】的体现之一，对原始 ByteBuf 进行切片成多个 ByteBuf，切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存，切片后的 ByteBuf 维护独立的 read，write 指针\n\n![](img/0011.png)\n\n例，原始 ByteBuf 进行一些初始操作\n\n```java\nByteBuf origin = ByteBufAllocator.DEFAULT.buffer(10);\norigin.writeBytes(new byte[]{1, 2, 3, 4});\norigin.readByte();\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时调用 slice 进行切片，无参 slice 是从原始 ByteBuf 的 read index 到 write index 之间的内容进行切片，切片后的 max capacity 被固定为这个区间的大小，因此不能追加 write\n\n```java\nByteBuf slice = origin.slice();\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n// slice.writeByte(5); 如果执行，会报 IndexOutOfBoundsException 异常\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n如果原始 ByteBuf 再次读操作（又读了一个字节）\n\n```java\norigin.readByte();\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 03 04                                           |..              |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时的 slice 不受影响，因为它有独立的读写指针\n\n```java\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n如果 slice 的内容发生了更改\n\n```java\nslice.setByte(2, 5);\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 05                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时，原始 ByteBuf 也会受影响，因为底层都是同一块内存\n\n```\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 03 05                                           |..              |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 10）duplicate\n\n【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的\n\n![](img/0012.png)\n\n\n\n#### 11）copy\n\n会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关\n\n\n\n#### 12）CompositeByteBuf\n\n【零拷贝】的体现之一，可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免拷贝\n\n有两个 ByteBuf 如下\n\n```java\nByteBuf buf1 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf1.writeBytes(new byte[]{1, 2, 3, 4, 5});\nByteBuf buf2 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf2.writeBytes(new byte[]{6, 7, 8, 9, 10});\nSystem.out.println(ByteBufUtil.prettyHexDump(buf1));\nSystem.out.println(ByteBufUtil.prettyHexDump(buf2));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05                                  |.....           |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 06 07 08 09 0a                                  |.....           |\n+--------+-------------------------------------------------+----------------+\n```\n\n现在需要一个新的 ByteBuf，内容来自于刚才的 buf1 和 buf2，如何实现？\n\n方法1：\n\n```java\nByteBuf buf3 = ByteBufAllocator.DEFAULT\n    .buffer(buf1.readableBytes()+buf2.readableBytes());\nbuf3.writeBytes(buf1);\nbuf3.writeBytes(buf2);\nSystem.out.println(ByteBufUtil.prettyHexDump(buf3));\n```\n\n结果\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n```\n\n这种方法好不好？回答是不太好，因为进行了数据的内存复制操作\n\n\n\n方法2：\n\n```java\nCompositeByteBuf buf3 = ByteBufAllocator.DEFAULT.compositeBuffer();\n// true 表示增加新的 ByteBuf 自动递增 write index, 否则 write index 会始终为 0\nbuf3.addComponents(true, buf1, buf2);\n```\n\n结果是一样的\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n```\n\nCompositeByteBuf 是一个组合的 ByteBuf，它内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量等信息，代表着整体中某一段的数据。\n\n* 优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制\n* 缺点，复杂了很多，多次操作会带来性能的损耗\n\n\n\n#### 13）Unpooled\n\nUnpooled 是一个工具类，类如其名，提供了非池化的 ByteBuf 创建、组合、复制等操作\n\n这里仅介绍其跟【零拷贝】相关的 wrappedBuffer 方法，可以用来包装 ByteBuf\n\n```java\nByteBuf buf1 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf1.writeBytes(new byte[]{1, 2, 3, 4, 5});\nByteBuf buf2 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf2.writeBytes(new byte[]{6, 7, 8, 9, 10});\n\n// 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf\nByteBuf buf3 = Unpooled.wrappedBuffer(buf1, buf2);\nSystem.out.println(ByteBufUtil.prettyHexDump(buf3));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n```\n\n也可以用来包装普通字节数组，底层也不会有拷贝操作\n\n```java\nByteBuf buf4 = Unpooled.wrappedBuffer(new byte[]{1, 2, 3}, new byte[]{4, 5, 6});\nSystem.out.println(buf4.getClass());\nSystem.out.println(ByteBufUtil.prettyHexDump(buf4));\n```\n\n输出\n\n```\nclass io.netty.buffer.CompositeByteBuf\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06                               |......          |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 💡 ByteBuf 优势\n\n* 池化 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能\n* 读写指针分离，不需要像 ByteBuffer 一样切换读写模式\n* 可以自动扩容\n* 支持链式调用，使用更流畅\n* 很多地方体现零拷贝，例如 slice、duplicate、CompositeByteBuf\n\n\n\n## 4. 双向通信\n\n### 4.1 练习\n\n实现一个 echo server\n\n编写 server\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf buffer = (ByteBuf) msg;\n                    System.out.println(buffer.toString(Charset.defaultCharset()));\n\n                    // 建议使用 ctx.alloc() 创建 ByteBuf\n                    ByteBuf response = ctx.alloc().buffer();\n                    response.writeBytes(buffer);\n                    ctx.writeAndFlush(response);\n\n                    // 思考：需要释放 buffer 吗\n                    // 思考：需要释放 response 吗\n                }\n            });\n        }\n    }).bind(8080);\n```\n\n编写 client\n\n```java\nNioEventLoopGroup group = new NioEventLoopGroup();\nChannel channel = new Bootstrap()\n    .group(group)\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch) throws Exception {\n            ch.pipeline().addLast(new StringEncoder());\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf buffer = (ByteBuf) msg;\n                    System.out.println(buffer.toString(Charset.defaultCharset()));\n\n                    // 思考：需要释放 buffer 吗\n                }\n            });\n        }\n    }).connect(\"127.0.0.1\", 8080).sync().channel();\n\nchannel.closeFuture().addListener(future -> {\n    group.shutdownGracefully();\n});\n\nnew Thread(() -> {\n    Scanner scanner = new Scanner(System.in);\n    while (true) {\n        String line = scanner.nextLine();\n        if (\"q\".equals(line)) {\n            channel.close();\n            break;\n        }\n        channel.writeAndFlush(line);\n    }\n}).start();\n```\n\n\n\n### 💡 读和写的误解\n\n\n\n我最初在认识上有这样的误区，认为只有在 netty，nio 这样的多路复用 IO 模型时，读写才不会相互阻塞，才可以实现高效的双向通信，但实际上，Java Socket 是全双工的：在任意时刻，线路上存在`A 到 B` 和 `B 到 A` 的双向信号传输。即使是阻塞 IO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读\n\n\n\n例如\n\n```java\npublic class TestServer {\n    public static void main(String[] args) throws IOException {\n        ServerSocket ss = new ServerSocket(8888);\n        Socket s = ss.accept();\n\n        new Thread(() -> {\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream()));\n                while (true) {\n                    System.out.println(reader.readLine());\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        new Thread(() -> {\n            try {\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));\n                // 例如在这个位置加入 thread 级别断点，可以发现即使不写入数据，也不妨碍前面线程读取客户端数据\n                for (int i = 0; i < 100; i++) {\n                    writer.write(String.valueOf(i));\n                    writer.newLine();\n                    writer.flush();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n}\n```\n\n客户端\n\n```java\npublic class TestClient {\n    public static void main(String[] args) throws IOException {\n        Socket s = new Socket(\"localhost\", 8888);\n\n        new Thread(() -> {\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream()));\n                while (true) {\n                    System.out.println(reader.readLine());\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        new Thread(() -> {\n            try {\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));\n                for (int i = 0; i < 100; i++) {\n                    writer.write(String.valueOf(i));\n                    writer.newLine();\n                    writer.flush();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2023-05-06-Netty02-入门.md","raw":"---\ntitle: Netty02-入门\ndate: 2023-05-06 21:22:02\ntags: \n- Netty\n- programing\n- Java\ncategories: Netty\n---\n\n该笔记是B站黑马的Netty视频的配套笔记2。\n<!-- more -->\n# 二. Netty 入门\n\n\n\n## 1. 概述\n\n### 1.1 Netty 是什么？\n\n```\nNetty is an asynchronous event-driven network application framework\nfor rapid development of maintainable high performance protocol servers & clients.\n```\n\nNetty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端\n\n\n\n### 1.2 Netty 的作者\n\n![](img/0005.png)\n\n他还是另一个著名网络应用框架 Mina 的重要贡献者\n\n\n\n### 1.3 Netty 的地位\n\nNetty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位\n\n以下的框架都使用了 Netty，因为它们有网络通信需求！\n\n* Cassandra - nosql 数据库\n* Spark - 大数据分布式计算框架\n* Hadoop - 大数据分布式存储框架\n* RocketMQ - ali 开源的消息队列\n* ElasticSearch - 搜索引擎\n* gRPC - rpc 框架\n* Dubbo - rpc 框架\n* Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\n* Zookeeper - 分布式协调框架\n\n\n\n### 1.4 Netty 的优势\n\n* Netty vs NIO，工作量大，bug 多\n  * 需要自己构建协议\n  * 解决 TCP 传输问题，如粘包、半包\n  * epoll 空轮询导致 CPU 100%\n  * 对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\n* Netty vs 其它网络应用框架\n  * Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀\n  * 久经考验，16年，Netty 版本\n    * 2.x 2004\n    * 3.x 2008\n    * 4.x 2013\n    * 5.x 已废弃（没有明显的性能提升，维护成本高）\n\n\n\n## 2. Hello World\n\n### 2.1 目标\n\n开发一个简单的服务器端和客户端\n\n* 客户端向服务器端发送 hello, world\n* 服务器仅接收，不返回\n\n\n\n加入依赖\n\n```xml\n<dependency>\n    <groupId>io.netty</groupId>\n    <artifactId>netty-all</artifactId>\n    <version>4.1.39.Final</version>\n</dependency>\n```\n\n\n\n\n\n### 2.2 服务器端\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup()) // 1\n    .channel(NioServerSocketChannel.class) // 2\n    .childHandler(new ChannelInitializer<NioSocketChannel>() { // 3\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new StringDecoder()); // 5\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() { // 6\n                @Override\n                protected void channelRead0(ChannelHandlerContext ctx, String msg) {\n                    System.out.println(msg);\n                }\n            });\n        }\n    })\n    .bind(8080); // 4\n```\n\n代码解读\n\n* 1 处，创建 NioEventLoopGroup，可以简单理解为 `线程池 + Selector` 后面会详细展开\n\n* 2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有\n\n  ![](img/0006.png)\n\n* 3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器\n\n* 4 处，ServerSocketChannel 绑定的监听端口\n\n* 5 处，SocketChannel 的处理器，解码 ByteBuf => String\n\n* 6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果\n\n\n\n### 2.3 客户端\n\n```java\nnew Bootstrap()\n    .group(new NioEventLoopGroup()) // 1\n    .channel(NioSocketChannel.class) // 2\n    .handler(new ChannelInitializer<Channel>() { // 3\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder()); // 8\n        }\n    })\n    .connect(\"127.0.0.1\", 8080) // 4\n    .sync() // 5\n    .channel() // 6\n    .writeAndFlush(new Date() + \": hello world!\"); // 7\n```\n\n代码解读\n\n* 1 处，创建 NioEventLoopGroup，同 Server\n\n* 2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有\n\n  ![](img/0007.png)\n\n* 3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器\n* 4 处，指定要连接的服务器和端口\n* 5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕\n* 6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作\n* 7 处，写入消息并清空缓冲区\n* 8 处，消息会经过通道 handler 处理，这里是将 String => ByteBuf 发出\n* 数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程\n\n\n\n### 2.4 流程梳理\n\n![](img/0040.png)\n\n#### 💡 提示\n\n> 一开始需要树立正确的观念\n>\n> * 把 channel 理解为数据的通道\n> * 把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf\n> * 把 handler 理解为数据的处理工序\n>   * 工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成...）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）\n>   * handler 分 Inbound 和 Outbound 两类\n> * 把 eventLoop 理解为处理数据的工人\n>   * 工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定）\n>   * 工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务\n>   * 工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人\n\n\n\n## 3. 组件\n\n### 3.1 EventLoop\n\n事件循环对象\n\nEventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。\n\n它的继承关系比较复杂\n\n* 一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法\n* 另一条线是继承自 netty 自己的 OrderedEventExecutor，\n  * 提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop\n  * 提供了 parent 方法来看看自己属于哪个 EventLoopGroup\n\n\n\n事件循环组\n\nEventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）\n\n* 继承自 netty 自己的 EventExecutorGroup\n  * 实现了 Iterable 接口提供遍历 EventLoop 的能力\n  * 另有 next 方法获取集合中下一个 EventLoop\n\n\n\n以一个简单的实现为例：\n\n```java\n// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程\nDefaultEventLoopGroup group = new DefaultEventLoopGroup(2);\nSystem.out.println(group.next());\nSystem.out.println(group.next());\nSystem.out.println(group.next());\n```\n\n输出\n\n```\nio.netty.channel.DefaultEventLoop@60f82f98\nio.netty.channel.DefaultEventLoop@35f983a6\nio.netty.channel.DefaultEventLoop@60f82f98\n```\n\n也可以使用 for 循环\n\n```java\nDefaultEventLoopGroup group = new DefaultEventLoopGroup(2);\nfor (EventExecutor eventLoop : group) {\n    System.out.println(eventLoop);\n}\n```\n\n输出\n\n```\nio.netty.channel.DefaultEventLoop@60f82f98\nio.netty.channel.DefaultEventLoop@35f983a6\n```\n\n\n\n#### 💡 优雅关闭\n\n优雅关闭 `shutdownGracefully` 方法。该方法会首先切换 `EventLoopGroup` 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的\n\n\n\n#### 演示 NioEventLoop 处理 io 事件\n\n服务器端两个 nio worker 工人\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2))\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf byteBuf = msg instanceof ByteBuf ? ((ByteBuf) msg) : null;\n                    if (byteBuf != null) {\n                        byte[] buf = new byte[16];\n                        ByteBuf len = byteBuf.readBytes(buf, 0, byteBuf.readableBytes());\n                        log.debug(new String(buf));\n                    }\n                }\n            });\n        }\n    }).bind(8080).sync();\n```\n\n客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\n\n```java\npublic static void main(String[] args) throws InterruptedException {\n    Channel channel = new Bootstrap()\n            .group(new NioEventLoopGroup(1))\n            .handler(new ChannelInitializer<NioSocketChannel>() {\n                @Override\n                protected void initChannel(NioSocketChannel ch) throws Exception {\n                    System.out.println(\"init...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                }\n            })\n            .channel(NioSocketChannel.class).connect(\"localhost\", 8080)\n            .sync()\n            .channel();\n\n    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(\"wangwu\".getBytes()));\n    Thread.sleep(2000);\n    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(\"wangwu\".getBytes()));\n```\n\n最后输出\n\n```\n22:03:34 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:03:36 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       \n22:05:36 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:05:38 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           \n22:06:09 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu        \n22:06:11 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu         \n```\n\n可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定\n\n![](img/0042.png)\n\n\n\n再增加两个非 nio 工人\n\n```java\nDefaultEventLoopGroup normalWorkers = new DefaultEventLoopGroup(2);\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2))\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch)  {\n            ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n            ch.pipeline().addLast(normalWorkers,\"myhandler\",\n              new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf byteBuf = msg instanceof ByteBuf ? ((ByteBuf) msg) : null;\n                    if (byteBuf != null) {\n                        byte[] buf = new byte[16];\n                        ByteBuf len = byteBuf.readBytes(buf, 0, byteBuf.readableBytes());\n                        log.debug(new String(buf));\n                    }\n                }\n            });\n        }\n    }).bind(8080).sync();\n```\n\n客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）\n\n输出\n\n```\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |\n+--------+-------------------------------------------------+----------------+\n22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE\n22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        \n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED\n22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6c 69 73 69                                     |lisi            |\n+--------+-------------------------------------------------+----------------+\n22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE\n22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            \n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 77 61 6e 67 77 75                               |wangwu          |\n+--------+-------------------------------------------------+----------------+\n22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE\n22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          \n```\n\n可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）\n\n\n\n![](img/0041.png)\n\n\n\n#### 💡 handler 执行中如何换人？\n\n关键代码 `io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()`\n\n```java\nstatic void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) {\n    final Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, \"msg\"), next);\n    // 下一个 handler 的事件循环是否与当前的事件循环是同一个线程\n    EventExecutor executor = next.executor();\n    \n    // 是，直接调用\n    if (executor.inEventLoop()) {\n        next.invokeChannelRead(m);\n    } \n    // 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）\n    else {\n        executor.execute(new Runnable() {\n            @Override\n            public void run() {\n                next.invokeChannelRead(m);\n            }\n        });\n    }\n}\n```\n\n* 如果两个 handler 绑定的是同一个线程，那么就直接调用\n* 否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用\n\n\n\n#### 演示 NioEventLoop 处理普通任务\n\nNioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务\n\n```java\nNioEventLoopGroup nioWorkers = new NioEventLoopGroup(2);\n\nlog.debug(\"server start...\");\nThread.sleep(2000);\nnioWorkers.execute(()->{\n    log.debug(\"normal task...\");\n});\n```\n\n输出\n\n```\n22:30:36 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...\n22:30:38 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - normal task...\n```\n\n> 可以用来执行耗时较长的任务\n\n\n\n#### 演示 NioEventLoop 处理定时任务\n\n```java\nNioEventLoopGroup nioWorkers = new NioEventLoopGroup(2);\n\nlog.debug(\"server start...\");\nThread.sleep(2000);\nnioWorkers.scheduleAtFixedRate(() -> {\n    log.debug(\"running...\");\n}, 0, 1, TimeUnit.SECONDS);\n```\n\n输出\n\n```\n22:35:15 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...\n22:35:17 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:19 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n22:35:20 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...\n...\n```\n\n> 可以用来执行定时任务\n\n\n\n### 3.2 Channel\n\nchannel 的主要作用\n\n* close() 可以用来关闭 channel\n* closeFuture() 用来处理 channel 的关闭\n  * sync 方法作用是同步等待 channel 关闭\n  * 而 addListener 方法是异步等待 channel 关闭\n* pipeline() 方法添加处理器\n* write() 方法将数据写入\n* writeAndFlush() 方法将数据写入并刷出\n\n\n\n#### ChannelFuture\n\n这时刚才的客户端代码\n\n```java\nnew Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080)\n    .sync()\n    .channel()\n    .writeAndFlush(new Date() + \": hello world!\");\n```\n\n现在把它拆开来看\n\n```java\nChannelFuture channelFuture = new Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080); // 1\n\nchannelFuture.sync().channel().writeAndFlush(new Date() + \": hello world!\");\n```\n\n* 1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象\n\n**注意** connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象\n\n实验如下：\n\n```java\nChannelFuture channelFuture = new Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080);\n\nSystem.out.println(channelFuture.channel()); // 1\nchannelFuture.sync(); // 2\nSystem.out.println(channelFuture.channel()); // 3\n```\n\n* 执行到 1 时，连接未建立，打印 `[id: 0x2e1884dd]`\n* 执行到 2 时，sync 方法是同步等待连接建立完成\n* 执行到 3 时，连接肯定建立了，打印 `[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]`\n\n除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：\n\n```java\nChannelFuture channelFuture = new Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080);\nSystem.out.println(channelFuture.channel()); // 1\nchannelFuture.addListener((ChannelFutureListener) future -> {\n    System.out.println(future.channel()); // 2\n});\n```\n\n* 执行到 1 时，连接未建立，打印 `[id: 0x749124ba]`\n* ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 `[id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]`\n\n\n\n#### CloseFuture\n\n```java\n@Slf4j\npublic class CloseFutureClient {\n    public static void main(String[] args) throws InterruptedException {\n        NioEventLoopGroup group new NioEventLoopGroup();\n        ChannelFuture channelFuture = new Bootstrap()\n                .group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<NioSocketChannel>() {\n                    @Override // 在连接建立后被调用\n                    protected void initChannel(NioSocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                        ch.pipeline().addLast(new StringEncoder());\n                    }\n                })\n                .connect(new InetSocketAddress(\"localhost\", 8080));\n        Channel channel = channelFuture.sync().channel();\n        log.debug(\"{}\", channel);\n        new Thread(()->{\n            Scanner scanner = new Scanner(System.in);\n            while (true) {\n                String line = scanner.nextLine();\n                if (\"q\".equals(line)) {\n                    channel.close(); // close 异步操作 1s 之后\n//                    log.debug(\"处理关闭之后的操作\"); // 不能在这里善后\n                    break;\n                }\n                channel.writeAndFlush(line);\n            }\n        }, \"input\").start();\n\n        // 获取 CloseFuture 对象， 1) 同步处理关闭， 2) 异步处理关闭\n        ChannelFuture closeFuture = channel.closeFuture();\n        /*log.debug(\"waiting close...\");\n        closeFuture.sync();\n        log.debug(\"处理关闭之后的操作\");*/\n        closeFuture.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                log.debug(\"处理关闭之后的操作\");\n                group.shutdownGracefully();\n            }\n        });\n    }\n}\n```\n\n\n\n\n\n#### 💡 异步提升的是什么\n\n* 有些同学看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接\n\n* 还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的\n\n\n\n\n\n思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：`4 * 8 * 3 = 96`\n\n![](img/0044.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下\n\n![](img/0048.png)\n\n\n\n\n\n\n\n\n\n\n\n因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 `4 * 8 * 12` 效率几乎是原来的四倍\n\n![](img/0047.png)\n\n要点\n\n* 单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势\n* 异步并没有缩短响应时间，反而有所增加\n* 合理进行任务拆分，也是利用异步的关键\n\n\n\n### 3.3 Future & Promise\n\n在异步处理时，经常用到这两个接口\n\n首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展\n\n* jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果\n* netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束\n* netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器\n\n| 功能/名称    | jdk Future                     | netty Future                                                 | Promise      |\n| ------------ | ------------------------------ | ------------------------------------------------------------ | ------------ |\n| cancel       | 取消任务                       | -                                                            | -            |\n| isCanceled   | 任务是否取消                   | -                                                            | -            |\n| isDone       | 任务是否完成，不能区分成功失败 | -                                                            | -            |\n| get          | 获取任务结果，阻塞等待         | -                                                            | -            |\n| getNow       | -                              | 获取任务结果，非阻塞，还未产生结果时返回 null                | -            |\n| await        | -                              | 等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断 | -            |\n| sync         | -                              | 等待任务结束，如果任务失败，抛出异常                         | -            |\n| isSuccess    | -                              | 判断任务是否成功                                             | -            |\n| cause        | -                              | 获取失败信息，非阻塞，如果没有失败，返回null                 | -            |\n| addLinstener | -                              | 添加回调，异步接收结果                                       | -            |\n| setSuccess   | -                              | -                                                            | 设置成功结果 |\n| setFailure   | -                              | -                                                            | 设置失败结果 |\n\n\n\n#### 例1\n\n同步处理任务成功\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\neventExecutors.execute(()->{\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    log.debug(\"set success, {}\",10);\n    promise.setSuccess(10);\n});\n\nlog.debug(\"start...\");\nlog.debug(\"{}\",promise.getNow()); // 还没有结果\nlog.debug(\"{}\",promise.get());\n```\n\n输出\n\n```\n11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n11:51:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10\n11:51:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - 10\n```\n\n\n\n#### 例2\n\n异步处理任务成功\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\n// 设置回调，异步接收结果\npromise.addListener(future -> {\n    // 这里的 future 就是上面的 promise\n    log.debug(\"{}\",future.getNow());\n});\n\n// 等待 1000 后设置成功结果\neventExecutors.execute(()->{\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    log.debug(\"set success, {}\",10);\n    promise.setSuccess(10);\n});\n\nlog.debug(\"start...\");\n```\n\n输出\n\n```\n11:49:30 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10\n11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - 10\n```\n\n\n\n#### 例3\n\n同步处理任务失败 - sync & get\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\n        DefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\n        eventExecutors.execute(() -> {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            RuntimeException e = new RuntimeException(\"error...\");\n            log.debug(\"set failure, {}\", e.toString());\n            promise.setFailure(e);\n        });\n\n        log.debug(\"start...\");\n        log.debug(\"{}\", promise.getNow());\n        promise.get(); // sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常\n```\n\n输出\n\n```\n12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n12:11:08 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\nException in thread \"main\" java.util.concurrent.ExecutionException: java.lang.RuntimeException: error...\n\tat io.netty.util.concurrent.AbstractFuture.get(AbstractFuture.java:41)\n\tat com.itcast.oio.DefaultPromiseTest2.main(DefaultPromiseTest2.java:34)\nCaused by: java.lang.RuntimeException: error...\n\tat com.itcast.oio.DefaultPromiseTest2.lambda$main$0(DefaultPromiseTest2.java:27)\n\tat io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:745)\n```\n\n\n\n#### 例4\n\n同步处理任务失败 - await\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\neventExecutors.execute(() -> {\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    RuntimeException e = new RuntimeException(\"error...\");\n    log.debug(\"set failure, {}\", e.toString());\n    promise.setFailure(e);\n});\n\nlog.debug(\"start...\");\nlog.debug(\"{}\", promise.getNow());\npromise.await(); // 与 sync 和 get 区别在于，不会抛异常\nlog.debug(\"result {}\", (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());\n```\n\n输出\n\n```\n12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null\n12:18:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\n12:18:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...\n```\n\n\n\n#### 例5\n\n异步处理任务失败\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\npromise.addListener(future -> {\n    log.debug(\"result {}\", (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());\n});\n\neventExecutors.execute(() -> {\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    RuntimeException e = new RuntimeException(\"error...\");\n    log.debug(\"set failure, {}\", e.toString());\n    promise.setFailure(e);\n});\n\nlog.debug(\"start...\");\n```\n\n输出\n\n```\n12:04:57 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...\n12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...\n12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...\n```\n\n\n\n#### 例6\n\nawait 死锁检查\n\n```java\nDefaultEventLoop eventExecutors = new DefaultEventLoop();\nDefaultPromise<Integer> promise = new DefaultPromise<>(eventExecutors);\n\neventExecutors.submit(()->{\n    System.out.println(\"1\");\n    try {\n        promise.await();\n        // 注意不能仅捕获 InterruptedException 异常\n        // 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播\n        // 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出\n    } catch (Exception e) { \n        e.printStackTrace();\n    }\n    System.out.println(\"2\");\n});\neventExecutors.submit(()->{\n    System.out.println(\"3\");\n    try {\n        promise.await();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    System.out.println(\"4\");\n});\n```\n\n输出\n\n```\n1\n2\n3\n4\nio.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)\n\tat io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)\n\tat io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)\n\tat com.itcast.oio.DefaultPromiseTest.lambda$main$0(DefaultPromiseTest.java:27)\n\tat io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\n\tat io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)\n\tat io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:745)\nio.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)\n\tat io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)\n\tat io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)\n\tat com.itcast.oio.DefaultPromiseTest.lambda$main$1(DefaultPromiseTest.java:36)\n\tat io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\n\tat io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)\n\tat io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:745)\n\n```\n\n\n\n\n\n### 3.4 Handler & Pipeline\n\nChannelHandler 用来处理 Channel 上的各种事件，分为入站、出站两种。所有 ChannelHandler 被连成一串，就是 Pipeline\n\n* 入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来读取客户端数据，写回结果\n* 出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对写回结果进行加工\n\n打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品\n\n\n\n先搞清楚顺序，服务端\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    System.out.println(1);\n                    ctx.fireChannelRead(msg); // 1\n                }\n            });\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    System.out.println(2);\n                    ctx.fireChannelRead(msg); // 2\n                }\n            });\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    System.out.println(3);\n                    ctx.channel().write(msg); // 3\n                }\n            });\n            ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){\n                @Override\n                public void write(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise) {\n                    System.out.println(4);\n                    ctx.write(msg, promise); // 4\n                }\n            });\n            ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){\n                @Override\n                public void write(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise) {\n                    System.out.println(5);\n                    ctx.write(msg, promise); // 5\n                }\n            });\n            ch.pipeline().addLast(new ChannelOutboundHandlerAdapter(){\n                @Override\n                public void write(ChannelHandlerContext ctx, Object msg, \n                                  ChannelPromise promise) {\n                    System.out.println(6);\n                    ctx.write(msg, promise); // 6\n                }\n            });\n        }\n    })\n    .bind(8080);\n```\n\n客户端\n\n```java\nnew Bootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<Channel>() {\n        @Override\n        protected void initChannel(Channel ch) {\n            ch.pipeline().addLast(new StringEncoder());\n        }\n    })\n    .connect(\"127.0.0.1\", 8080)\n    .addListener((ChannelFutureListener) future -> {\n        future.channel().writeAndFlush(\"hello,world\");\n    });\n```\n\n服务器端打印：\n\n```\n1\n2\n3\n6\n5\n4\n```\n\n可以看到，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表\n\n![](img/0008.png)\n\n* 入站处理器中，ctx.fireChannelRead(msg) 是 **调用下一个入站处理器**\n  * 如果注释掉 1 处代码，则仅会打印 1\n  * 如果注释掉 2 处代码，则仅会打印 1 2\n* 3 处的 ctx.channel().write(msg) 会 **从尾部开始触发** 后续出站处理器的执行\n  * 如果注释掉 3 处代码，则仅会打印 1 2 3\n* 类似的，出站处理器中，ctx.write(msg, promise) 的调用也会 **触发上一个出站处理器**\n  * 如果注释掉 6 处代码，则仅会打印 1 2 3 6\n* ctx.channel().write(msg) vs ctx.write(msg)\n  * 都是触发出站处理器的执行\n  * ctx.channel().write(msg) 从尾部开始查找出站处理器\n  * ctx.write(msg) 是从当前节点找上一个出站处理器\n  * 3 处的 ctx.channel().write(msg) 如果改为 ctx.write(msg) 仅会打印 1 2 3，因为节点3 之前没有其它出站处理器了\n  * 6 处的 ctx.write(msg, promise) 如果改为 ctx.channel().write(msg) 会打印 1 2 3 6 6 6... 因为 ctx.channel().write() 是从尾部开始查找，结果又是节点6 自己\n\n\n\n图1 - 服务端 pipeline 触发的原始流程，图中数字代表了处理步骤的先后次序\n\n![](img/0009.png)\n\n\n\n### 3.5 ByteBuf\n\n是对字节数据的封装\n\n#### 1）创建\n\n```java\nByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(10);\nlog(buffer);\n```\n\n上面代码创建了一个默认的 ByteBuf（池化基于直接内存的 ByteBuf），初始容量是 10\n\n输出\n\n```\nread index:0 write index:0 capacity:10\n```\n\n其中 log 方法参考如下\n\n```java\nprivate static void log(ByteBuf buffer) {\n    int length = buffer.readableBytes();\n    int rows = length / 16 + (length % 15 == 0 ? 0 : 1) + 4;\n    StringBuilder buf = new StringBuilder(rows * 80 * 2)\n        .append(\"read index:\").append(buffer.readerIndex())\n        .append(\" write index:\").append(buffer.writerIndex())\n        .append(\" capacity:\").append(buffer.capacity())\n        .append(NEWLINE);\n    appendPrettyHexDump(buf, buffer);\n    System.out.println(buf.toString());\n}\n```\n\n\n\n#### 2）直接内存 vs 堆内存\n\n可以使用下面的代码来创建池化基于堆的 ByteBuf\n\n```java\nByteBuf buffer = ByteBufAllocator.DEFAULT.heapBuffer(10);\n```\n\n也可以使用下面的代码来创建池化基于直接内存的 ByteBuf\n\n```java\nByteBuf buffer = ByteBufAllocator.DEFAULT.directBuffer(10);\n```\n\n* 直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用\n* 直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放\n\n\n\n#### 3）池化 vs 非池化\n\n池化的最大意义在于可以重用 ByteBuf，优点有\n\n* 没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力\n* 有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率\n* 高并发时，池化功能更节约内存，减少内存溢出的可能\n\n池化功能是否开启，可以通过下面的系统环境变量来设置\n\n```java\n-Dio.netty.allocator.type={unpooled|pooled}\n```\n\n* 4.1 以后，非 Android 平台默认启用池化实现，Android 平台启用非池化实现\n* 4.1 之前，池化功能还不成熟，默认是非池化实现\n\n\n\n#### 4）组成\n\nByteBuf 由四部分组成\n\n![](img/0010.png)\n\n最开始读写指针都在 0 位置\n\n\n\n#### 5）写入\n\n方法列表，省略一些不重要的方法\n\n| 方法签名                                                     | 含义                   | 备注                                        |\n| ------------------------------------------------------------ | ---------------------- | ------------------------------------------- |\n| writeBoolean(boolean value)                                  | 写入 boolean 值        | 用一字节 01\\|00 代表 true\\|false            |\n| writeByte(int value)                                         | 写入 byte 值           |                                             |\n| writeShort(int value)                                        | 写入 short 值          |                                             |\n| writeInt(int value)                                          | 写入 int 值            | Big Endian，即 0x250，写入后 00 00 02 50    |\n| writeIntLE(int value)                                        | 写入 int 值            | Little Endian，即 0x250，写入后 50 02 00 00 |\n| writeLong(long value)                                        | 写入 long 值           |                                             |\n| writeChar(int value)                                         | 写入 char 值           |                                             |\n| writeFloat(float value)                                      | 写入 float 值          |                                             |\n| writeDouble(double value)                                    | 写入 double 值         |                                             |\n| writeBytes(ByteBuf src)                                      | 写入 netty 的 ByteBuf  |                                             |\n| writeBytes(byte[] src)                                       | 写入 byte[]            |                                             |\n| writeBytes(ByteBuffer src)                                   | 写入 nio 的 ByteBuffer |                                             |\n| int writeCharSequence(CharSequence sequence, Charset charset) | 写入字符串             |                                             |\n\n> 注意\n>\n> * 这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用\n> * 网络传输，默认习惯是 Big Endian\n\n\n\n先写入 4 个字节\n\n```java\nbuffer.writeBytes(new byte[]{1, 2, 3, 4});\nlog(buffer);\n```\n\n结果是\n\n```\nread index:0 write index:4 capacity:10\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04                                     |....            |\n+--------+-------------------------------------------------+----------------+\n```\n\n再写入一个 int 整数，也是 4 个字节\n\n```java\nbuffer.writeInt(5);\nlog(buffer);\n```\n\n结果是\n\n```\nread index:0 write index:8 capacity:10\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 00 00 00 05                         |........        |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置\n\n\n\n#### 6）扩容\n\n再写入一个 int 整数时，容量不够了（初始容量是 10），这时会引发扩容\n\n```java\nbuffer.writeInt(6);\nlog(buffer);\n```\n\n扩容规则是\n\n* 如何写入后数据大小未超过 512，则选择下一个 16 的整数倍，例如写入后大小为 12 ，则扩容后 capacity 是 16\n* 如果写入后数据大小超过 512，则选择下一个 2^n，例如写入后大小为 513，则扩容后 capacity 是 2^10=1024（2^9=512 已经不够了）\n* 扩容不能超过 max capacity 会报错\n\n结果是\n\n```\nread index:0 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 00 00 00 05 00 00 00 06             |............    |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 7）读取\n\n例如读了 4 次，每次一个字节\n\n```java\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nSystem.out.println(buffer.readByte());\nlog(buffer);\n```\n\n读过的内容，就属于废弃部分了，再读只能读那些尚未读取的部分\n\n```\n1\n2\n3\n4\nread index:4 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 05 00 00 00 06                         |........        |\n+--------+-------------------------------------------------+----------------+\n```\n\n如果需要重复读取 int 整数 5，怎么办？\n\n可以在 read 前先做个标记 mark\n\n```java\nbuffer.markReaderIndex();\nSystem.out.println(buffer.readInt());\nlog(buffer);\n```\n\n结果\n\n```\n5\nread index:8 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 06                                     |....            |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时要重复读取的话，重置到标记位置 reset\n\n```java\nbuffer.resetReaderIndex();\nlog(buffer);\n```\n\n这时\n\n```\nread index:4 write index:12 capacity:16\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 05 00 00 00 06                         |........        |\n+--------+-------------------------------------------------+----------------+\n```\n\n还有种办法是采用 get 开头的一系列方法，这些方法不会改变 read index\n\n\n\n#### 8）retain & release\n\n由于 Netty 中有堆外内存的 ByteBuf 实现，堆外内存最好是手动来释放，而不是等 GC 垃圾回收。\n\n* UnpooledHeapByteBuf 使用的是 JVM 内存，只需等 GC 回收内存即可\n* UnpooledDirectByteBuf 使用的就是直接内存了，需要特殊的方法来回收内存\n* PooledByteBuf 和它的子类使用了池化机制，需要更复杂的规则来回收内存\n\n\n\n> 回收内存的源码实现，请关注下面方法的不同实现\n>\n> `protected abstract void deallocate()`\n\n\n\nNetty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口\n\n* 每个 ByteBuf 对象的初始计数为 1\n* 调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收\n* 调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收\n* 当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用\n\n\n\n谁来负责 release 呢？\n\n不是我们想象的（一般情况下）\n\n```java\nByteBuf buf = ...\ntry {\n    ...\n} finally {\n    buf.release();\n}\n```\n\n请思考，因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，如果在 finally 中 release 了，就失去了传递性（当然，如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）\n\n基本规则是，**谁是最后使用者，谁负责 release**，详细分析如下\n\n* 起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）\n* 入站 ByteBuf 处理原则\n  * 对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release\n  * 将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release\n  * 如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release\n  * 注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release\n  * 假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）\n* 出站 ByteBuf 处理原则\n  * 出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release\n* 异常处理原则\n  * 有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true\n\n\n\nTailContext 释放未处理消息逻辑\n\n```java\n// io.netty.channel.DefaultChannelPipeline#onUnhandledInboundMessage(java.lang.Object)\nprotected void onUnhandledInboundMessage(Object msg) {\n    try {\n        logger.debug(\n            \"Discarded inbound message {} that reached at the tail of the pipeline. \" +\n            \"Please check your pipeline configuration.\", msg);\n    } finally {\n        ReferenceCountUtil.release(msg);\n    }\n}\n```\n\n具体代码\n\n```java\n// io.netty.util.ReferenceCountUtil#release(java.lang.Object)\npublic static boolean release(Object msg) {\n    if (msg instanceof ReferenceCounted) {\n        return ((ReferenceCounted) msg).release();\n    }\n    return false;\n}\n```\n\n\n\n#### 9）slice\n\n【零拷贝】的体现之一，对原始 ByteBuf 进行切片成多个 ByteBuf，切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存，切片后的 ByteBuf 维护独立的 read，write 指针\n\n![](img/0011.png)\n\n例，原始 ByteBuf 进行一些初始操作\n\n```java\nByteBuf origin = ByteBufAllocator.DEFAULT.buffer(10);\norigin.writeBytes(new byte[]{1, 2, 3, 4});\norigin.readByte();\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时调用 slice 进行切片，无参 slice 是从原始 ByteBuf 的 read index 到 write index 之间的内容进行切片，切片后的 max capacity 被固定为这个区间的大小，因此不能追加 write\n\n```java\nByteBuf slice = origin.slice();\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n// slice.writeByte(5); 如果执行，会报 IndexOutOfBoundsException 异常\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n如果原始 ByteBuf 再次读操作（又读了一个字节）\n\n```java\norigin.readByte();\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 03 04                                           |..              |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时的 slice 不受影响，因为它有独立的读写指针\n\n```java\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 04                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n如果 slice 的内容发生了更改\n\n```java\nslice.setByte(2, 5);\nSystem.out.println(ByteBufUtil.prettyHexDump(slice));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 02 03 05                                        |...             |\n+--------+-------------------------------------------------+----------------+\n```\n\n这时，原始 ByteBuf 也会受影响，因为底层都是同一块内存\n\n```\nSystem.out.println(ByteBufUtil.prettyHexDump(origin));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 03 05                                           |..              |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 10）duplicate\n\n【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的\n\n![](img/0012.png)\n\n\n\n#### 11）copy\n\n会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关\n\n\n\n#### 12）CompositeByteBuf\n\n【零拷贝】的体现之一，可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免拷贝\n\n有两个 ByteBuf 如下\n\n```java\nByteBuf buf1 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf1.writeBytes(new byte[]{1, 2, 3, 4, 5});\nByteBuf buf2 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf2.writeBytes(new byte[]{6, 7, 8, 9, 10});\nSystem.out.println(ByteBufUtil.prettyHexDump(buf1));\nSystem.out.println(ByteBufUtil.prettyHexDump(buf2));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05                                  |.....           |\n+--------+-------------------------------------------------+----------------+\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 06 07 08 09 0a                                  |.....           |\n+--------+-------------------------------------------------+----------------+\n```\n\n现在需要一个新的 ByteBuf，内容来自于刚才的 buf1 和 buf2，如何实现？\n\n方法1：\n\n```java\nByteBuf buf3 = ByteBufAllocator.DEFAULT\n    .buffer(buf1.readableBytes()+buf2.readableBytes());\nbuf3.writeBytes(buf1);\nbuf3.writeBytes(buf2);\nSystem.out.println(ByteBufUtil.prettyHexDump(buf3));\n```\n\n结果\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n```\n\n这种方法好不好？回答是不太好，因为进行了数据的内存复制操作\n\n\n\n方法2：\n\n```java\nCompositeByteBuf buf3 = ByteBufAllocator.DEFAULT.compositeBuffer();\n// true 表示增加新的 ByteBuf 自动递增 write index, 否则 write index 会始终为 0\nbuf3.addComponents(true, buf1, buf2);\n```\n\n结果是一样的\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n```\n\nCompositeByteBuf 是一个组合的 ByteBuf，它内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量等信息，代表着整体中某一段的数据。\n\n* 优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制\n* 缺点，复杂了很多，多次操作会带来性能的损耗\n\n\n\n#### 13）Unpooled\n\nUnpooled 是一个工具类，类如其名，提供了非池化的 ByteBuf 创建、组合、复制等操作\n\n这里仅介绍其跟【零拷贝】相关的 wrappedBuffer 方法，可以用来包装 ByteBuf\n\n```java\nByteBuf buf1 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf1.writeBytes(new byte[]{1, 2, 3, 4, 5});\nByteBuf buf2 = ByteBufAllocator.DEFAULT.buffer(5);\nbuf2.writeBytes(new byte[]{6, 7, 8, 9, 10});\n\n// 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf\nByteBuf buf3 = Unpooled.wrappedBuffer(buf1, buf2);\nSystem.out.println(ByteBufUtil.prettyHexDump(buf3));\n```\n\n输出\n\n```\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |\n+--------+-------------------------------------------------+----------------+\n```\n\n也可以用来包装普通字节数组，底层也不会有拷贝操作\n\n```java\nByteBuf buf4 = Unpooled.wrappedBuffer(new byte[]{1, 2, 3}, new byte[]{4, 5, 6});\nSystem.out.println(buf4.getClass());\nSystem.out.println(ByteBufUtil.prettyHexDump(buf4));\n```\n\n输出\n\n```\nclass io.netty.buffer.CompositeByteBuf\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 01 02 03 04 05 06                               |......          |\n+--------+-------------------------------------------------+----------------+\n```\n\n\n\n#### 💡 ByteBuf 优势\n\n* 池化 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能\n* 读写指针分离，不需要像 ByteBuffer 一样切换读写模式\n* 可以自动扩容\n* 支持链式调用，使用更流畅\n* 很多地方体现零拷贝，例如 slice、duplicate、CompositeByteBuf\n\n\n\n## 4. 双向通信\n\n### 4.1 练习\n\n实现一个 echo server\n\n编写 server\n\n```java\nnew ServerBootstrap()\n    .group(new NioEventLoopGroup())\n    .channel(NioServerSocketChannel.class)\n    .childHandler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch) {\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter(){\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf buffer = (ByteBuf) msg;\n                    System.out.println(buffer.toString(Charset.defaultCharset()));\n\n                    // 建议使用 ctx.alloc() 创建 ByteBuf\n                    ByteBuf response = ctx.alloc().buffer();\n                    response.writeBytes(buffer);\n                    ctx.writeAndFlush(response);\n\n                    // 思考：需要释放 buffer 吗\n                    // 思考：需要释放 response 吗\n                }\n            });\n        }\n    }).bind(8080);\n```\n\n编写 client\n\n```java\nNioEventLoopGroup group = new NioEventLoopGroup();\nChannel channel = new Bootstrap()\n    .group(group)\n    .channel(NioSocketChannel.class)\n    .handler(new ChannelInitializer<NioSocketChannel>() {\n        @Override\n        protected void initChannel(NioSocketChannel ch) throws Exception {\n            ch.pipeline().addLast(new StringEncoder());\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                    ByteBuf buffer = (ByteBuf) msg;\n                    System.out.println(buffer.toString(Charset.defaultCharset()));\n\n                    // 思考：需要释放 buffer 吗\n                }\n            });\n        }\n    }).connect(\"127.0.0.1\", 8080).sync().channel();\n\nchannel.closeFuture().addListener(future -> {\n    group.shutdownGracefully();\n});\n\nnew Thread(() -> {\n    Scanner scanner = new Scanner(System.in);\n    while (true) {\n        String line = scanner.nextLine();\n        if (\"q\".equals(line)) {\n            channel.close();\n            break;\n        }\n        channel.writeAndFlush(line);\n    }\n}).start();\n```\n\n\n\n### 💡 读和写的误解\n\n\n\n我最初在认识上有这样的误区，认为只有在 netty，nio 这样的多路复用 IO 模型时，读写才不会相互阻塞，才可以实现高效的双向通信，但实际上，Java Socket 是全双工的：在任意时刻，线路上存在`A 到 B` 和 `B 到 A` 的双向信号传输。即使是阻塞 IO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读\n\n\n\n例如\n\n```java\npublic class TestServer {\n    public static void main(String[] args) throws IOException {\n        ServerSocket ss = new ServerSocket(8888);\n        Socket s = ss.accept();\n\n        new Thread(() -> {\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream()));\n                while (true) {\n                    System.out.println(reader.readLine());\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        new Thread(() -> {\n            try {\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));\n                // 例如在这个位置加入 thread 级别断点，可以发现即使不写入数据，也不妨碍前面线程读取客户端数据\n                for (int i = 0; i < 100; i++) {\n                    writer.write(String.valueOf(i));\n                    writer.newLine();\n                    writer.flush();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n}\n```\n\n客户端\n\n```java\npublic class TestClient {\n    public static void main(String[] args) throws IOException {\n        Socket s = new Socket(\"localhost\", 8888);\n\n        new Thread(() -> {\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream()));\n                while (true) {\n                    System.out.println(reader.readLine());\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        new Thread(() -> {\n            try {\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));\n                for (int i = 0; i < 100; i++) {\n                    writer.write(String.valueOf(i));\n                    writer.newLine();\n                    writer.flush();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"Netty02-入门","published":1,"updated":"2023-05-06T13:27:56.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clher6xwj000mocwehaavbuvd","content":"<p>该笔记是B站黑马的Netty视频的配套笔记2。</p>\n<span id=\"more\"></span>\n<h1 id=\"二-Netty-入门\"><a href=\"#二-Netty-入门\" class=\"headerlink\" title=\"二. Netty 入门\"></a>二. Netty 入门</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><h3 id=\"1-1-Netty-是什么？\"><a href=\"#1-1-Netty-是什么？\" class=\"headerlink\" title=\"1.1 Netty 是什么？\"></a>1.1 Netty 是什么？</h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">Netty <span class=\"hljs-keyword\">is</span> an asynchronous event-driven network <span class=\"hljs-built_in\">application</span> framework<br><span class=\"hljs-keyword\">for</span> rapid development <span class=\"hljs-keyword\">of</span> maintainable high performance protocol servers &amp; clients.<br></code></pre></td></tr></table></figure>\n\n<p>Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端</p>\n<h3 id=\"1-2-Netty-的作者\"><a href=\"#1-2-Netty-的作者\" class=\"headerlink\" title=\"1.2 Netty 的作者\"></a>1.2 Netty 的作者</h3><p><img src=\"/img/0005.png\"></p>\n<p>他还是另一个著名网络应用框架 Mina 的重要贡献者</p>\n<h3 id=\"1-3-Netty-的地位\"><a href=\"#1-3-Netty-的地位\" class=\"headerlink\" title=\"1.3 Netty 的地位\"></a>1.3 Netty 的地位</h3><p>Netty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位</p>\n<p>以下的框架都使用了 Netty，因为它们有网络通信需求！</p>\n<ul>\n<li>Cassandra - nosql 数据库</li>\n<li>Spark - 大数据分布式计算框架</li>\n<li>Hadoop - 大数据分布式存储框架</li>\n<li>RocketMQ - ali 开源的消息队列</li>\n<li>ElasticSearch - 搜索引擎</li>\n<li>gRPC - rpc 框架</li>\n<li>Dubbo - rpc 框架</li>\n<li>Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端</li>\n<li>Zookeeper - 分布式协调框架</li>\n</ul>\n<h3 id=\"1-4-Netty-的优势\"><a href=\"#1-4-Netty-的优势\" class=\"headerlink\" title=\"1.4 Netty 的优势\"></a>1.4 Netty 的优势</h3><ul>\n<li>Netty vs NIO，工作量大，bug 多<ul>\n<li>需要自己构建协议</li>\n<li>解决 TCP 传输问题，如粘包、半包</li>\n<li>epoll 空轮询导致 CPU 100%</li>\n<li>对 API 进行增强，使之更易用，如 FastThreadLocal &#x3D;&gt; ThreadLocal，ByteBuf &#x3D;&gt; ByteBuffer</li>\n</ul>\n</li>\n<li>Netty vs 其它网络应用框架<ul>\n<li>Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀</li>\n<li>久经考验，16年，Netty 版本<ul>\n<li>2.x 2004</li>\n<li>3.x 2008</li>\n<li>4.x 2013</li>\n<li>5.x 已废弃（没有明显的性能提升，维护成本高）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-Hello-World\"><a href=\"#2-Hello-World\" class=\"headerlink\" title=\"2. Hello World\"></a>2. Hello World</h2><h3 id=\"2-1-目标\"><a href=\"#2-1-目标\" class=\"headerlink\" title=\"2.1 目标\"></a>2.1 目标</h3><p>开发一个简单的服务器端和客户端</p>\n<ul>\n<li>客户端向服务器端发送 hello, world</li>\n<li>服务器仅接收，不返回</li>\n</ul>\n<p>加入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.netty<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>netty-all<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.39.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-2-服务器端\"><a href=\"#2-2-服务器端\" class=\"headerlink\" title=\"2.2 服务器端\"></a>2.2 服务器端</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>()) <span class=\"hljs-comment\">// 1</span><br>    .channel(NioServerSocketChannel.class) <span class=\"hljs-comment\">// 2</span><br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123; <span class=\"hljs-comment\">// 3</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringDecoder</span>()); <span class=\"hljs-comment\">// 5</span><br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;String&gt;() &#123; <span class=\"hljs-comment\">// 6</span><br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, String msg)</span> &#123;<br>                    System.out.println(msg);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;)<br>    .bind(<span class=\"hljs-number\">8080</span>); <span class=\"hljs-comment\">// 4</span><br></code></pre></td></tr></table></figure>\n\n<p>代码解读</p>\n<ul>\n<li><p>1 处，创建 NioEventLoopGroup，可以简单理解为 <code>线程池 + Selector</code> 后面会详细展开</p>\n</li>\n<li><p>2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有</p>\n<p><img src=\"/img/0006.png\"></p>\n</li>\n<li><p>3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p>\n</li>\n<li><p>4 处，ServerSocketChannel 绑定的监听端口</p>\n</li>\n<li><p>5 处，SocketChannel 的处理器，解码 ByteBuf &#x3D;&gt; String</p>\n</li>\n<li><p>6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果</p>\n</li>\n</ul>\n<h3 id=\"2-3-客户端\"><a href=\"#2-3-客户端\" class=\"headerlink\" title=\"2.3 客户端\"></a>2.3 客户端</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>()) <span class=\"hljs-comment\">// 1</span><br>    .channel(NioSocketChannel.class) <span class=\"hljs-comment\">// 2</span><br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123; <span class=\"hljs-comment\">// 3</span><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>()); <span class=\"hljs-comment\">// 8</span><br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>) <span class=\"hljs-comment\">// 4</span><br>    .sync() <span class=\"hljs-comment\">// 5</span><br>    .channel() <span class=\"hljs-comment\">// 6</span><br>    .writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() + <span class=\"hljs-string\">&quot;: hello world!&quot;</span>); <span class=\"hljs-comment\">// 7</span><br></code></pre></td></tr></table></figure>\n\n<p>代码解读</p>\n<ul>\n<li><p>1 处，创建 NioEventLoopGroup，同 Server</p>\n</li>\n<li><p>2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有</p>\n<p><img src=\"/img/0007.png\"></p>\n</li>\n<li><p>3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p>\n</li>\n<li><p>4 处，指定要连接的服务器和端口</p>\n</li>\n<li><p>5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕</p>\n</li>\n<li><p>6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作</p>\n</li>\n<li><p>7 处，写入消息并清空缓冲区</p>\n</li>\n<li><p>8 处，消息会经过通道 handler 处理，这里是将 String &#x3D;&gt; ByteBuf 发出</p>\n</li>\n<li><p>数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程</p>\n</li>\n</ul>\n<h3 id=\"2-4-流程梳理\"><a href=\"#2-4-流程梳理\" class=\"headerlink\" title=\"2.4 流程梳理\"></a>2.4 流程梳理</h3><p><img src=\"/img/0040.png\"></p>\n<h4 id=\"💡-提示\"><a href=\"#💡-提示\" class=\"headerlink\" title=\"💡 提示\"></a>💡 提示</h4><blockquote>\n<p>一开始需要树立正确的观念</p>\n<ul>\n<li>把 channel 理解为数据的通道</li>\n<li>把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf</li>\n<li>把 handler 理解为数据的处理工序<ul>\n<li>工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成…）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）</li>\n<li>handler 分 Inbound 和 Outbound 两类</li>\n</ul>\n</li>\n<li>把 eventLoop 理解为处理数据的工人<ul>\n<li>工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定）</li>\n<li>工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务</li>\n<li>工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"3-组件\"><a href=\"#3-组件\" class=\"headerlink\" title=\"3. 组件\"></a>3. 组件</h2><h3 id=\"3-1-EventLoop\"><a href=\"#3-1-EventLoop\" class=\"headerlink\" title=\"3.1 EventLoop\"></a>3.1 EventLoop</h3><p>事件循环对象</p>\n<p>EventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。</p>\n<p>它的继承关系比较复杂</p>\n<ul>\n<li>一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法</li>\n<li>另一条线是继承自 netty 自己的 OrderedEventExecutor，<ul>\n<li>提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop</li>\n<li>提供了 parent 方法来看看自己属于哪个 EventLoopGroup</li>\n</ul>\n</li>\n</ul>\n<p>事件循环组</p>\n<p>EventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）</p>\n<ul>\n<li>继承自 netty 自己的 EventExecutorGroup<ul>\n<li>实现了 Iterable 接口提供遍历 EventLoop 的能力</li>\n<li>另有 next 方法获取集合中下一个 EventLoop</li>\n</ul>\n</li>\n</ul>\n<p>以一个简单的实现为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程</span><br><span class=\"hljs-type\">DefaultEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br>System.out.println(group.next());<br>System.out.println(group.next());<br>System.out.println(group.next());<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">60</span>f82f98<br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">35</span>f983a6<br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">60</span>f82f98<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用 for 循环</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">for</span> (EventExecutor eventLoop : group) &#123;<br>    System.out.println(eventLoop);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">60</span>f82f98<br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">35</span>f983a6<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-优雅关闭\"><a href=\"#💡-优雅关闭\" class=\"headerlink\" title=\"💡 优雅关闭\"></a>💡 优雅关闭</h4><p>优雅关闭 <code>shutdownGracefully</code> 方法。该方法会首先切换 <code>EventLoopGroup</code> 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的</p>\n<h4 id=\"演示-NioEventLoop-处理-io-事件\"><a href=\"#演示-NioEventLoop-处理-io-事件\" class=\"headerlink\" title=\"演示 NioEventLoop 处理 io 事件\"></a>演示 NioEventLoop 处理 io 事件</h4><p>服务器端两个 nio worker 工人</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>))<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">byteBuf</span> <span class=\"hljs-operator\">=</span> msg <span class=\"hljs-keyword\">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class=\"hljs-literal\">null</span>;<br>                    <span class=\"hljs-keyword\">if</span> (byteBuf != <span class=\"hljs-literal\">null</span>) &#123;<br>                        <span class=\"hljs-type\">byte</span>[] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">16</span>];<br>                        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> byteBuf.readBytes(buf, <span class=\"hljs-number\">0</span>, byteBuf.readableBytes());<br>                        log.debug(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(buf));<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).bind(<span class=\"hljs-number\">8080</span>).sync();<br></code></pre></td></tr></table></figure>\n\n<p>客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>    <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>            .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>))<br>            .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    System.out.println(<span class=\"hljs-string\">&quot;init...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                &#125;<br>            &#125;)<br>            .channel(NioSocketChannel.class).connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>)<br>            .sync()<br>            .channel();<br><br>    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class=\"hljs-string\">&quot;wangwu&quot;</span>.getBytes()));<br>    Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class=\"hljs-string\">&quot;wangwu&quot;</span>.getBytes()));<br></code></pre></td></tr></table></figure>\n\n<p>最后输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">03</span>:<span class=\"hljs-number\">34</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - zhangsan       <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">03</span>:<span class=\"hljs-number\">36</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - zhangsan       <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">05</span>:<span class=\"hljs-number\">36</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-2]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - lisi           <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">05</span>:<span class=\"hljs-number\">38</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-2]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - lisi           <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">09</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - wangwu        <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">11</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - wangwu         <br></code></pre></td></tr></table></figure>\n\n<p>可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定</p>\n<p><img src=\"/img/0042.png\"></p>\n<p>再增加两个非 nio 工人</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoopGroup</span> <span class=\"hljs-variable\">normalWorkers</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>))<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span>  &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>            ch.pipeline().addLast(normalWorkers,<span class=\"hljs-string\">&quot;myhandler&quot;</span>,<br>              <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">byteBuf</span> <span class=\"hljs-operator\">=</span> msg <span class=\"hljs-keyword\">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class=\"hljs-literal\">null</span>;<br>                    <span class=\"hljs-keyword\">if</span> (byteBuf != <span class=\"hljs-literal\">null</span>) &#123;<br>                        <span class=\"hljs-type\">byte</span>[] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">16</span>];<br>                        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> byteBuf.readBytes(buf, <span class=\"hljs-number\">0</span>, byteBuf.readableBytes());<br>                        log.debug(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(buf));<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).bind(<span class=\"hljs-number\">8080</span>).sync();<br></code></pre></td></tr></table></figure>\n\n<p>客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p>\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED<br>22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE<br>22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE<br>22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        <br>22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE<br>22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        <br>22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED<br>22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE<br>22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6c 69 73 69                                     |lisi            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE<br>22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            <br>22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6c 69 73 69                                     |lisi            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE<br>22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            <br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED<br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE<br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 77 61 6e 67 77 75                               |wangwu          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE<br>22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          <br>22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 77 61 6e 67 77 75                               |wangwu          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE<br>22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          <br></code></pre></td></tr></table></figure>\n\n<p>可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）</p>\n<p><img src=\"/img/0041.png\"></p>\n<h4 id=\"💡-handler-执行中如何换人？\"><a href=\"#💡-handler-执行中如何换人？\" class=\"headerlink\" title=\"💡 handler 执行中如何换人？\"></a>💡 handler 执行中如何换人？</h4><p>关键代码 <code>io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">invokeChannelRead</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> AbstractChannelHandlerContext next, Object msg)</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class=\"hljs-string\">&quot;msg&quot;</span>), next);<br>    <span class=\"hljs-comment\">// 下一个 handler 的事件循环是否与当前的事件循环是同一个线程</span><br>    <span class=\"hljs-type\">EventExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> next.executor();<br>    <br>    <span class=\"hljs-comment\">// 是，直接调用</span><br>    <span class=\"hljs-keyword\">if</span> (executor.inEventLoop()) &#123;<br>        next.invokeChannelRead(m);<br>    &#125; <br>    <span class=\"hljs-comment\">// 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）</span><br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        executor.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                next.invokeChannelRead(m);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果两个 handler 绑定的是同一个线程，那么就直接调用</li>\n<li>否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用</li>\n</ul>\n<h4 id=\"演示-NioEventLoop-处理普通任务\"><a href=\"#演示-NioEventLoop-处理普通任务\" class=\"headerlink\" title=\"演示 NioEventLoop 处理普通任务\"></a>演示 NioEventLoop 处理普通任务</h4><p>NioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">nioWorkers</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br><br>log.debug(<span class=\"hljs-string\">&quot;server start...&quot;</span>);<br>Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>nioWorkers.execute(()-&gt;&#123;<br>    log.debug(<span class=\"hljs-string\">&quot;normal task...&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\"><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">36</span> [<span class=\"hljs-symbol\">DEBUG</span>] [main] c.i.o.<span class=\"hljs-symbol\">EventLoopTest2</span> - server start...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">38</span> [<span class=\"hljs-symbol\">DEBUG</span>] [nioEventLoopGroup<span class=\"hljs-number\">-2</span><span class=\"hljs-number\">-1</span>] c.i.o.<span class=\"hljs-symbol\">EventLoopTest2</span> - normal task...<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以用来执行耗时较长的任务</p>\n</blockquote>\n<h4 id=\"演示-NioEventLoop-处理定时任务\"><a href=\"#演示-NioEventLoop-处理定时任务\" class=\"headerlink\" title=\"演示 NioEventLoop 处理定时任务\"></a>演示 NioEventLoop 处理定时任务</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">nioWorkers</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br><br>log.debug(<span class=\"hljs-string\">&quot;server start...&quot;</span>);<br>Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>nioWorkers.scheduleAtFixedRate(() -&gt; &#123;<br>    log.debug(<span class=\"hljs-string\">&quot;running...&quot;</span>);<br>&#125;, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, TimeUnit.SECONDS);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">15</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - server start...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">17</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-2-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - running...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">18</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-2-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - running...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">19</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-2-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - running...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">20</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-2-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - running...<br>...<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以用来执行定时任务</p>\n</blockquote>\n<h3 id=\"3-2-Channel\"><a href=\"#3-2-Channel\" class=\"headerlink\" title=\"3.2 Channel\"></a>3.2 Channel</h3><p>channel 的主要作用</p>\n<ul>\n<li>close() 可以用来关闭 channel</li>\n<li>closeFuture() 用来处理 channel 的关闭<ul>\n<li>sync 方法作用是同步等待 channel 关闭</li>\n<li>而 addListener 方法是异步等待 channel 关闭</li>\n</ul>\n</li>\n<li>pipeline() 方法添加处理器</li>\n<li>write() 方法将数据写入</li>\n<li>writeAndFlush() 方法将数据写入并刷出</li>\n</ul>\n<h4 id=\"ChannelFuture\"><a href=\"#ChannelFuture\" class=\"headerlink\" title=\"ChannelFuture\"></a>ChannelFuture</h4><p>这时刚才的客户端代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>)<br>    .sync()<br>    .channel()<br>    .writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() + <span class=\"hljs-string\">&quot;: hello world!&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>现在把它拆开来看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>); <span class=\"hljs-comment\">// 1</span><br><br>channelFuture.sync().channel().writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() + <span class=\"hljs-string\">&quot;: hello world!&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象</li>\n</ul>\n<p><strong>注意</strong> connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象</p>\n<p>实验如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>);<br><br>System.out.println(channelFuture.channel()); <span class=\"hljs-comment\">// 1</span><br>channelFuture.sync(); <span class=\"hljs-comment\">// 2</span><br>System.out.println(channelFuture.channel()); <span class=\"hljs-comment\">// 3</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行到 1 时，连接未建立，打印 <code>[id: 0x2e1884dd]</code></li>\n<li>执行到 2 时，sync 方法是同步等待连接建立完成</li>\n<li>执行到 3 时，连接肯定建立了，打印 <code>[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]</code></li>\n</ul>\n<p>除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>);<br>System.out.println(channelFuture.channel()); <span class=\"hljs-comment\">// 1</span><br>channelFuture.addListener((ChannelFutureListener) future -&gt; &#123;<br>    System.out.println(future.channel()); <span class=\"hljs-comment\">// 2</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行到 1 时，连接未建立，打印 <code>[id: 0x749124ba]</code></li>\n<li>ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 <code>[id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]</code></li>\n</ul>\n<h4 id=\"CloseFuture\"><a href=\"#CloseFuture\" class=\"headerlink\" title=\"CloseFuture\"></a>CloseFuture</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CloseFutureClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        NioEventLoopGroup group <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>                .group(group)<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                    <span class=\"hljs-meta\">@Override</span> <span class=\"hljs-comment\">// 在连接建立后被调用</span><br>                    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                        ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                        ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>                    &#125;<br>                &#125;)<br>                .connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>));<br>        <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> channelFuture.sync().channel();<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, channel);<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(()-&gt;&#123;<br>            <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);<br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">line</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;q&quot;</span>.equals(line)) &#123;<br>                    channel.close(); <span class=\"hljs-comment\">// close 异步操作 1s 之后</span><br><span class=\"hljs-comment\">//                    log.debug(&quot;处理关闭之后的操作&quot;); // 不能在这里善后</span><br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>                channel.writeAndFlush(line);<br>            &#125;<br>        &#125;, <span class=\"hljs-string\">&quot;input&quot;</span>).start();<br><br>        <span class=\"hljs-comment\">// 获取 CloseFuture 对象， 1) 同步处理关闭， 2) 异步处理关闭</span><br>        <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">closeFuture</span> <span class=\"hljs-operator\">=</span> channel.closeFuture();<br>        <span class=\"hljs-comment\">/*log.debug(&quot;waiting close...&quot;);</span><br><span class=\"hljs-comment\">        closeFuture.sync();</span><br><span class=\"hljs-comment\">        log.debug(&quot;处理关闭之后的操作&quot;);*/</span><br>        closeFuture.addListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelFutureListener</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                log.debug(<span class=\"hljs-string\">&quot;处理关闭之后的操作&quot;</span>);<br>                group.shutdownGracefully();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"💡-异步提升的是什么\"><a href=\"#💡-异步提升的是什么\" class=\"headerlink\" title=\"💡 异步提升的是什么\"></a>💡 异步提升的是什么</h4><ul>\n<li><p>有些同学看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接</p>\n</li>\n<li><p>还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的</p>\n</li>\n</ul>\n<p>思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：<code>4 * 8 * 3 = 96</code></p>\n<p><img src=\"/img/0044.png\"></p>\n<p>经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下</p>\n<p><img src=\"/img/0048.png\"></p>\n<p>因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 <code>4 * 8 * 12</code> 效率几乎是原来的四倍</p>\n<p><img src=\"/img/0047.png\"></p>\n<p>要点</p>\n<ul>\n<li>单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势</li>\n<li>异步并没有缩短响应时间，反而有所增加</li>\n<li>合理进行任务拆分，也是利用异步的关键</li>\n</ul>\n<h3 id=\"3-3-Future-amp-Promise\"><a href=\"#3-3-Future-amp-Promise\" class=\"headerlink\" title=\"3.3 Future &amp; Promise\"></a>3.3 Future &amp; Promise</h3><p>在异步处理时，经常用到这两个接口</p>\n<p>首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展</p>\n<ul>\n<li>jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果</li>\n<li>netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束</li>\n<li>netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能&#x2F;名称</th>\n<th>jdk Future</th>\n<th>netty Future</th>\n<th>Promise</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cancel</td>\n<td>取消任务</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isCanceled</td>\n<td>任务是否取消</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isDone</td>\n<td>任务是否完成，不能区分成功失败</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>get</td>\n<td>获取任务结果，阻塞等待</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getNow</td>\n<td>-</td>\n<td>获取任务结果，非阻塞，还未产生结果时返回 null</td>\n<td>-</td>\n</tr>\n<tr>\n<td>await</td>\n<td>-</td>\n<td>等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断</td>\n<td>-</td>\n</tr>\n<tr>\n<td>sync</td>\n<td>-</td>\n<td>等待任务结束，如果任务失败，抛出异常</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isSuccess</td>\n<td>-</td>\n<td>判断任务是否成功</td>\n<td>-</td>\n</tr>\n<tr>\n<td>cause</td>\n<td>-</td>\n<td>获取失败信息，非阻塞，如果没有失败，返回null</td>\n<td>-</td>\n</tr>\n<tr>\n<td>addLinstener</td>\n<td>-</td>\n<td>添加回调，异步接收结果</td>\n<td>-</td>\n</tr>\n<tr>\n<td>setSuccess</td>\n<td>-</td>\n<td>-</td>\n<td>设置成功结果</td>\n</tr>\n<tr>\n<td>setFailure</td>\n<td>-</td>\n<td>-</td>\n<td>设置失败结果</td>\n</tr>\n</tbody></table>\n<h4 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h4><p>同步处理任务成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>eventExecutors.execute(()-&gt;&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    log.debug(<span class=\"hljs-string\">&quot;set success, &#123;&#125;&quot;</span>,<span class=\"hljs-number\">10</span>);<br>    promise.setSuccess(<span class=\"hljs-number\">10</span>);<br>&#125;);<br><br>log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br>log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>,promise.getNow()); <span class=\"hljs-comment\">// 还没有结果</span><br>log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>,promise.get());<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">53</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">53</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - null<br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">54</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set success, <span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">54</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - <span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h4><p>异步处理任务成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br><span class=\"hljs-comment\">// 设置回调，异步接收结果</span><br>promise.addListener(future -&gt; &#123;<br>    <span class=\"hljs-comment\">// 这里的 future 就是上面的 promise</span><br>    log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>,future.getNow());<br>&#125;);<br><br><span class=\"hljs-comment\">// 等待 1000 后设置成功结果</span><br>eventExecutors.execute(()-&gt;&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    log.debug(<span class=\"hljs-string\">&quot;set success, &#123;&#125;&quot;</span>,<span class=\"hljs-number\">10</span>);<br>    promise.setSuccess(<span class=\"hljs-number\">10</span>);<br>&#125;);<br><br>log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">30</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set success, <span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - <span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例3\"><a href=\"#例3\" class=\"headerlink\" title=\"例3\"></a>例3</h4><p>同步处理任务失败 - sync &amp; get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>        DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>        eventExecutors.execute(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class=\"hljs-type\">RuntimeException</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;error...&quot;</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());<br>            promise.setFailure(e);<br>        &#125;);<br><br>        log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, promise.getNow());<br>        promise.get(); <span class=\"hljs-comment\">// sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常</span><br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">07</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">07</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - null<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">08</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set failure, java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br>Exception <span class=\"hljs-keyword\">in</span> thread <span class=\"hljs-string\">&quot;main&quot;</span> java<span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.ExecutionException</span>: java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.AbstractFuture</span><span class=\"hljs-selector-class\">.get</span>(AbstractFuture<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">41</span>)<br>\tat com<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.oio</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span><span class=\"hljs-selector-class\">.main</span>(DefaultPromiseTest2<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">34</span>)<br>Caused by: java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br>\tat com<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.oio</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span>.lambda<span class=\"hljs-variable\">$main</span>$<span class=\"hljs-number\">0</span>(DefaultPromiseTest2<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">27</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span><span class=\"hljs-selector-class\">.DefaultEventLoop</span><span class=\"hljs-selector-class\">.run</span>(DefaultEventLoop<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">54</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.SingleThreadEventExecutor$<span class=\"hljs-number\">5</span><span class=\"hljs-selector-class\">.run</span>(SingleThreadEventExecutor<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">918</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.internal</span>.ThreadExecutorMap$<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.run</span>(ThreadExecutorMap<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">74</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.FastThreadLocalRunnable</span><span class=\"hljs-selector-class\">.run</span>(FastThreadLocalRunnable<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">30</span>)<br>\tat java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.Thread</span><span class=\"hljs-selector-class\">.run</span>(Thread<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">745</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例4\"><a href=\"#例4\" class=\"headerlink\" title=\"例4\"></a>例4</h4><p>同步处理任务失败 - await</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>eventExecutors.execute(() -&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class=\"hljs-type\">RuntimeException</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;error...&quot;</span>);<br>    log.debug(<span class=\"hljs-string\">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());<br>    promise.setFailure(e);<br>&#125;);<br><br>log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br>log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, promise.getNow());<br>promise.await(); <span class=\"hljs-comment\">// 与 sync 和 get 区别在于，不会抛异常</span><br>log.debug(<span class=\"hljs-string\">&quot;result &#123;&#125;&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">53</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">53</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - null<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">54</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set failure, java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">54</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - result java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例5\"><a href=\"#例5\" class=\"headerlink\" title=\"例5\"></a>例5</h4><p>异步处理任务失败</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>promise.addListener(future -&gt; &#123;<br>    log.debug(<span class=\"hljs-string\">&quot;result &#123;&#125;&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());<br>&#125;);<br><br>eventExecutors.execute(() -&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class=\"hljs-type\">RuntimeException</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;error...&quot;</span>);<br>    log.debug(<span class=\"hljs-string\">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());<br>    promise.setFailure(e);<br>&#125;);<br><br>log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">57</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">58</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set failure, java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">58</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - result java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例6\"><a href=\"#例6\" class=\"headerlink\" title=\"例6\"></a>例6</h4><p>await 死锁检查</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>eventExecutors.submit(()-&gt;&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        promise.await();<br>        <span class=\"hljs-comment\">// 注意不能仅捕获 InterruptedException 异常</span><br>        <span class=\"hljs-comment\">// 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播</span><br>        <span class=\"hljs-comment\">// 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123; <br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class=\"hljs-string\">&quot;2&quot;</span>);<br>&#125;);<br>eventExecutors.submit(()-&gt;&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;3&quot;</span>);<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        promise.await();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class=\"hljs-string\">&quot;4&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">4</span><br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.BlockingOperationException</span>: DefaultPromise@<span class=\"hljs-number\">47499</span><span class=\"hljs-built_in\">c2a</span>(incomplete)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.DefaultPromise</span><span class=\"hljs-selector-class\">.checkDeadLock</span>(DefaultPromise<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">384</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.DefaultPromise</span><span class=\"hljs-selector-class\">.await</span>(DefaultPromise<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">212</span>)<br>\tat com<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.oio</span><span class=\"hljs-selector-class\">.DefaultPromiseTest</span>.lambda<span class=\"hljs-variable\">$main</span>$<span class=\"hljs-number\">0</span>(DefaultPromiseTest<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">27</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.PromiseTask<span class=\"hljs-variable\">$RunnableAdapter</span><span class=\"hljs-selector-class\">.call</span>(PromiseTask<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">38</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.PromiseTask</span><span class=\"hljs-selector-class\">.run</span>(PromiseTask<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">73</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span><span class=\"hljs-selector-class\">.DefaultEventLoop</span><span class=\"hljs-selector-class\">.run</span>(DefaultEventLoop<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">54</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.SingleThreadEventExecutor$<span class=\"hljs-number\">5</span><span class=\"hljs-selector-class\">.run</span>(SingleThreadEventExecutor<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">918</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.internal</span>.ThreadExecutorMap$<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.run</span>(ThreadExecutorMap<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">74</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.FastThreadLocalRunnable</span><span class=\"hljs-selector-class\">.run</span>(FastThreadLocalRunnable<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">30</span>)<br>\tat java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.Thread</span><span class=\"hljs-selector-class\">.run</span>(Thread<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">745</span>)<br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.BlockingOperationException</span>: DefaultPromise@<span class=\"hljs-number\">47499</span><span class=\"hljs-built_in\">c2a</span>(incomplete)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.DefaultPromise</span><span class=\"hljs-selector-class\">.checkDeadLock</span>(DefaultPromise<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">384</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.DefaultPromise</span><span class=\"hljs-selector-class\">.await</span>(DefaultPromise<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">212</span>)<br>\tat com<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.oio</span><span class=\"hljs-selector-class\">.DefaultPromiseTest</span>.lambda<span class=\"hljs-variable\">$main</span>$<span class=\"hljs-number\">1</span>(DefaultPromiseTest<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">36</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.PromiseTask<span class=\"hljs-variable\">$RunnableAdapter</span><span class=\"hljs-selector-class\">.call</span>(PromiseTask<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">38</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.PromiseTask</span><span class=\"hljs-selector-class\">.run</span>(PromiseTask<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">73</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span><span class=\"hljs-selector-class\">.DefaultEventLoop</span><span class=\"hljs-selector-class\">.run</span>(DefaultEventLoop<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">54</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.SingleThreadEventExecutor$<span class=\"hljs-number\">5</span><span class=\"hljs-selector-class\">.run</span>(SingleThreadEventExecutor<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">918</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.internal</span>.ThreadExecutorMap$<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.run</span>(ThreadExecutorMap<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">74</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.FastThreadLocalRunnable</span><span class=\"hljs-selector-class\">.run</span>(FastThreadLocalRunnable<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">30</span>)<br>\tat java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.Thread</span><span class=\"hljs-selector-class\">.run</span>(Thread<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">745</span>)<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"3-4-Handler-amp-Pipeline\"><a href=\"#3-4-Handler-amp-Pipeline\" class=\"headerlink\" title=\"3.4 Handler &amp; Pipeline\"></a>3.4 Handler &amp; Pipeline</h3><p>ChannelHandler 用来处理 Channel 上的各种事件，分为入站、出站两种。所有 ChannelHandler 被连成一串，就是 Pipeline</p>\n<ul>\n<li>入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来读取客户端数据，写回结果</li>\n<li>出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对写回结果进行加工</li>\n</ul>\n<p>打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品</p>\n<p>先搞清楚顺序，服务端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">1</span>);<br>                    ctx.fireChannelRead(msg); <span class=\"hljs-comment\">// 1</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">2</span>);<br>                    ctx.fireChannelRead(msg); <span class=\"hljs-comment\">// 2</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">3</span>);<br>                    ctx.channel().write(msg); <span class=\"hljs-comment\">// 3</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelOutboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg, </span><br><span class=\"hljs-params\">                                  ChannelPromise promise)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">4</span>);<br>                    ctx.write(msg, promise); <span class=\"hljs-comment\">// 4</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelOutboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg, </span><br><span class=\"hljs-params\">                                  ChannelPromise promise)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">5</span>);<br>                    ctx.write(msg, promise); <span class=\"hljs-comment\">// 5</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelOutboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg, </span><br><span class=\"hljs-params\">                                  ChannelPromise promise)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">6</span>);<br>                    ctx.write(msg, promise); <span class=\"hljs-comment\">// 6</span><br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;)<br>    .bind(<span class=\"hljs-number\">8080</span>);<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>)<br>    .addListener((ChannelFutureListener) future -&gt; &#123;<br>        future.channel().writeAndFlush(<span class=\"hljs-string\">&quot;hello,world&quot;</span>);<br>    &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>服务器端打印：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">1<br>2<br>3<br>6<br>5<br>4<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表</p>\n<p><img src=\"/img/0008.png\"></p>\n<ul>\n<li>入站处理器中，ctx.fireChannelRead(msg) 是 <strong>调用下一个入站处理器</strong><ul>\n<li>如果注释掉 1 处代码，则仅会打印 1</li>\n<li>如果注释掉 2 处代码，则仅会打印 1 2</li>\n</ul>\n</li>\n<li>3 处的 ctx.channel().write(msg) 会 <strong>从尾部开始触发</strong> 后续出站处理器的执行<ul>\n<li>如果注释掉 3 处代码，则仅会打印 1 2 3</li>\n</ul>\n</li>\n<li>类似的，出站处理器中，ctx.write(msg, promise) 的调用也会 <strong>触发上一个出站处理器</strong><ul>\n<li>如果注释掉 6 处代码，则仅会打印 1 2 3 6</li>\n</ul>\n</li>\n<li>ctx.channel().write(msg) vs ctx.write(msg)<ul>\n<li>都是触发出站处理器的执行</li>\n<li>ctx.channel().write(msg) 从尾部开始查找出站处理器</li>\n<li>ctx.write(msg) 是从当前节点找上一个出站处理器</li>\n<li>3 处的 ctx.channel().write(msg) 如果改为 ctx.write(msg) 仅会打印 1 2 3，因为节点3 之前没有其它出站处理器了</li>\n<li>6 处的 ctx.write(msg, promise) 如果改为 ctx.channel().write(msg) 会打印 1 2 3 6 6 6… 因为 ctx.channel().write() 是从尾部开始查找，结果又是节点6 自己</li>\n</ul>\n</li>\n</ul>\n<p>图1 - 服务端 pipeline 触发的原始流程，图中数字代表了处理步骤的先后次序</p>\n<p><img src=\"/img/0009.png\"></p>\n<h3 id=\"3-5-ByteBuf\"><a href=\"#3-5-ByteBuf\" class=\"headerlink\" title=\"3.5 ByteBuf\"></a>3.5 ByteBuf</h3><p>是对字节数据的封装</p>\n<h4 id=\"1）创建\"><a href=\"#1）创建\" class=\"headerlink\" title=\"1）创建\"></a>1）创建</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">10</span>);<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>上面代码创建了一个默认的 ByteBuf（池化基于直接内存的 ByteBuf），初始容量是 10</p>\n<p>输出</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">index</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">write</span> <span class=\"hljs-keyword\">index</span>:<span class=\"hljs-number\">0</span> capacity:<span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n\n<p>其中 log 方法参考如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">log</span><span class=\"hljs-params\">(ByteBuf buffer)</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> buffer.readableBytes();<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rows</span> <span class=\"hljs-operator\">=</span> length / <span class=\"hljs-number\">16</span> + (length % <span class=\"hljs-number\">15</span> == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">4</span>;<br>    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(rows * <span class=\"hljs-number\">80</span> * <span class=\"hljs-number\">2</span>)<br>        .append(<span class=\"hljs-string\">&quot;read index:&quot;</span>).append(buffer.readerIndex())<br>        .append(<span class=\"hljs-string\">&quot; write index:&quot;</span>).append(buffer.writerIndex())<br>        .append(<span class=\"hljs-string\">&quot; capacity:&quot;</span>).append(buffer.capacity())<br>        .append(NEWLINE);<br>    appendPrettyHexDump(buf, buffer);<br>    System.out.println(buf.toString());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2）直接内存-vs-堆内存\"><a href=\"#2）直接内存-vs-堆内存\" class=\"headerlink\" title=\"2）直接内存 vs 堆内存\"></a>2）直接内存 vs 堆内存</h4><p>可以使用下面的代码来创建池化基于堆的 ByteBuf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.heapBuffer(<span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用下面的代码来创建池化基于直接内存的 ByteBuf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.directBuffer(<span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用</li>\n<li>直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放</li>\n</ul>\n<h4 id=\"3）池化-vs-非池化\"><a href=\"#3）池化-vs-非池化\" class=\"headerlink\" title=\"3）池化 vs 非池化\"></a>3）池化 vs 非池化</h4><p>池化的最大意义在于可以重用 ByteBuf，优点有</p>\n<ul>\n<li>没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力</li>\n<li>有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率</li>\n<li>高并发时，池化功能更节约内存，减少内存溢出的可能</li>\n</ul>\n<p>池化功能是否开启，可以通过下面的系统环境变量来设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">-Dio.netty.allocator.type=&#123;unpooled|pooled&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>4.1 以后，非 Android 平台默认启用池化实现，Android 平台启用非池化实现</li>\n<li>4.1 之前，池化功能还不成熟，默认是非池化实现</li>\n</ul>\n<h4 id=\"4）组成\"><a href=\"#4）组成\" class=\"headerlink\" title=\"4）组成\"></a>4）组成</h4><p>ByteBuf 由四部分组成</p>\n<p><img src=\"/img/0010.png\"></p>\n<p>最开始读写指针都在 0 位置</p>\n<h4 id=\"5）写入\"><a href=\"#5）写入\" class=\"headerlink\" title=\"5）写入\"></a>5）写入</h4><p>方法列表，省略一些不重要的方法</p>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>writeBoolean(boolean value)</td>\n<td>写入 boolean 值</td>\n<td>用一字节 01|00 代表 true|false</td>\n</tr>\n<tr>\n<td>writeByte(int value)</td>\n<td>写入 byte 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeShort(int value)</td>\n<td>写入 short 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeInt(int value)</td>\n<td>写入 int 值</td>\n<td>Big Endian，即 0x250，写入后 00 00 02 50</td>\n</tr>\n<tr>\n<td>writeIntLE(int value)</td>\n<td>写入 int 值</td>\n<td>Little Endian，即 0x250，写入后 50 02 00 00</td>\n</tr>\n<tr>\n<td>writeLong(long value)</td>\n<td>写入 long 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeChar(int value)</td>\n<td>写入 char 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeFloat(float value)</td>\n<td>写入 float 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeDouble(double value)</td>\n<td>写入 double 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeBytes(ByteBuf src)</td>\n<td>写入 netty 的 ByteBuf</td>\n<td></td>\n</tr>\n<tr>\n<td>writeBytes(byte[] src)</td>\n<td>写入 byte[]</td>\n<td></td>\n</tr>\n<tr>\n<td>writeBytes(ByteBuffer src)</td>\n<td>写入 nio 的 ByteBuffer</td>\n<td></td>\n</tr>\n<tr>\n<td>int writeCharSequence(CharSequence sequence, Charset charset)</td>\n<td>写入字符串</td>\n<td></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意</p>\n<ul>\n<li>这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用</li>\n<li>网络传输，默认习惯是 Big Endian</li>\n</ul>\n</blockquote>\n<p>先写入 4 个字节</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>结果是</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">read index:0 write index:4 capacity:10<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04                                     |....            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>再写入一个 int 整数，也是 4 个字节</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.writeInt(<span class=\"hljs-number\">5</span>);<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>结果是</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">read index:0 write index:8 capacity:10<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 00 00 00 05                         |........        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置</p>\n<h4 id=\"6）扩容\"><a href=\"#6）扩容\" class=\"headerlink\" title=\"6）扩容\"></a>6）扩容</h4><p>再写入一个 int 整数时，容量不够了（初始容量是 10），这时会引发扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.writeInt(<span class=\"hljs-number\">6</span>);<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>扩容规则是</p>\n<ul>\n<li>如何写入后数据大小未超过 512，则选择下一个 16 的整数倍，例如写入后大小为 12 ，则扩容后 capacity 是 16</li>\n<li>如果写入后数据大小超过 512，则选择下一个 2^n，例如写入后大小为 513，则扩容后 capacity 是 2^10&#x3D;1024（2^9&#x3D;512 已经不够了）</li>\n<li>扩容不能超过 max capacity 会报错</li>\n</ul>\n<p>结果是</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">read index:0 write index:12 capacity:16<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 00 00 00 05 00 00 00 06             |............    |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"7）读取\"><a href=\"#7）读取\" class=\"headerlink\" title=\"7）读取\"></a>7）读取</h4><p>例如读了 4 次，每次一个字节</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(buffer.readByte());<br>System.out.println(buffer.readByte());<br>System.out.println(buffer.readByte());<br>System.out.println(buffer.readByte());<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>读过的内容，就属于废弃部分了，再读只能读那些尚未读取的部分</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">1<br>2<br>3<br>4<br>read index:4 write index:12 capacity:16<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 00 00 00 05 00 00 00 06                         |........        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>如果需要重复读取 int 整数 5，怎么办？</p>\n<p>可以在 read 前先做个标记 mark</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.markReaderIndex();<br>System.out.println(buffer.readInt());<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">5<br>read index:8 write index:12 capacity:16<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 00 00 00 06                                     |....            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这时要重复读取的话，重置到标记位置 reset</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.resetReaderIndex();<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>这时</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">read index:4 write index:12 capacity:16<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 00 00 00 05 00 00 00 06                         |........        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>还有种办法是采用 get 开头的一系列方法，这些方法不会改变 read index</p>\n<h4 id=\"8）retain-amp-release\"><a href=\"#8）retain-amp-release\" class=\"headerlink\" title=\"8）retain &amp; release\"></a>8）retain &amp; release</h4><p>由于 Netty 中有堆外内存的 ByteBuf 实现，堆外内存最好是手动来释放，而不是等 GC 垃圾回收。</p>\n<ul>\n<li>UnpooledHeapByteBuf 使用的是 JVM 内存，只需等 GC 回收内存即可</li>\n<li>UnpooledDirectByteBuf 使用的就是直接内存了，需要特殊的方法来回收内存</li>\n<li>PooledByteBuf 和它的子类使用了池化机制，需要更复杂的规则来回收内存</li>\n</ul>\n<blockquote>\n<p>回收内存的源码实现，请关注下面方法的不同实现</p>\n<p><code>protected abstract void deallocate()</code></p>\n</blockquote>\n<p>Netty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口</p>\n<ul>\n<li>每个 ByteBuf 对象的初始计数为 1</li>\n<li>调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收</li>\n<li>调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收</li>\n<li>当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用</li>\n</ul>\n<p>谁来负责 release 呢？</p>\n<p>不是我们想象的（一般情况下）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ...<br><span class=\"hljs-keyword\">try</span> &#123;<br>    ...<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>    buf.release();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>请思考，因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，如果在 finally 中 release 了，就失去了传递性（当然，如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）</p>\n<p>基本规则是，<strong>谁是最后使用者，谁负责 release</strong>，详细分析如下</p>\n<ul>\n<li>起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）</li>\n<li>入站 ByteBuf 处理原则<ul>\n<li>对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release</li>\n<li>将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release</li>\n<li>如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release</li>\n<li>注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release</li>\n<li>假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）</li>\n</ul>\n</li>\n<li>出站 ByteBuf 处理原则<ul>\n<li>出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release</li>\n</ul>\n</li>\n<li>异常处理原则<ul>\n<li>有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true</li>\n</ul>\n</li>\n</ul>\n<p>TailContext 释放未处理消息逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// io.netty.channel.DefaultChannelPipeline#onUnhandledInboundMessage(java.lang.Object)</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onUnhandledInboundMessage</span><span class=\"hljs-params\">(Object msg)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        logger.debug(<br>            <span class=\"hljs-string\">&quot;Discarded inbound message &#123;&#125; that reached at the tail of the pipeline. &quot;</span> +<br>            <span class=\"hljs-string\">&quot;Please check your pipeline configuration.&quot;</span>, msg);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        ReferenceCountUtil.release(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>具体代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// io.netty.util.ReferenceCountUtil#release(java.lang.Object)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">release</span><span class=\"hljs-params\">(Object msg)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (msg <span class=\"hljs-keyword\">instanceof</span> ReferenceCounted) &#123;<br>        <span class=\"hljs-keyword\">return</span> ((ReferenceCounted) msg).release();<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"9）slice\"><a href=\"#9）slice\" class=\"headerlink\" title=\"9）slice\"></a>9）slice</h4><p>【零拷贝】的体现之一，对原始 ByteBuf 进行切片成多个 ByteBuf，切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存，切片后的 ByteBuf 维护独立的 read，write 指针</p>\n<p><img src=\"/img/0011.png\"></p>\n<p>例，原始 ByteBuf 进行一些初始操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">origin</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">10</span>);<br>origin.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>origin.readByte();<br>System.out.println(ByteBufUtil.prettyHexDump(origin));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 02 03 04                                        |...             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这时调用 slice 进行切片，无参 slice 是从原始 ByteBuf 的 read index 到 write index 之间的内容进行切片，切片后的 max capacity 被固定为这个区间的大小，因此不能追加 write</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">slice</span> <span class=\"hljs-operator\">=</span> origin.slice();<br>System.out.println(ByteBufUtil.prettyHexDump(slice));<br><span class=\"hljs-comment\">// slice.writeByte(5); 如果执行，会报 IndexOutOfBoundsException 异常</span><br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 02 03 04                                        |...             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>如果原始 ByteBuf 再次读操作（又读了一个字节）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">origin.readByte();<br>System.out.println(ByteBufUtil.prettyHexDump(origin));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 03 04                                           |..              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这时的 slice 不受影响，因为它有独立的读写指针</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(ByteBufUtil.prettyHexDump(slice));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 02 03 04                                        |...             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>如果 slice 的内容发生了更改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">slice.setByte(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);<br>System.out.println(ByteBufUtil.prettyHexDump(slice));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 02 03 05                                        |...             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这时，原始 ByteBuf 也会受影响，因为底层都是同一块内存</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ByteBufUtil</span>.</span></span>pretty<span class=\"hljs-constructor\">HexDump(<span class=\"hljs-params\">origin</span>)</span>);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 03 05                                           |..              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"10）duplicate\"><a href=\"#10）duplicate\" class=\"headerlink\" title=\"10）duplicate\"></a>10）duplicate</h4><p>【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的</p>\n<p><img src=\"/img/0012.png\"></p>\n<h4 id=\"11）copy\"><a href=\"#11）copy\" class=\"headerlink\" title=\"11）copy\"></a>11）copy</h4><p>会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关</p>\n<h4 id=\"12）CompositeByteBuf\"><a href=\"#12）CompositeByteBuf\" class=\"headerlink\" title=\"12）CompositeByteBuf\"></a>12）CompositeByteBuf</h4><p>【零拷贝】的体现之一，可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免拷贝</p>\n<p>有两个 ByteBuf 如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf1</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);<br>buf1.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;);<br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf2</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);<br>buf2.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;);<br>System.out.println(ByteBufUtil.prettyHexDump(buf1));<br>System.out.println(ByteBufUtil.prettyHexDump(buf2));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05                                  |.....           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 06 07 08 09 0a                                  |.....           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>现在需要一个新的 ByteBuf，内容来自于刚才的 buf1 和 buf2，如何实现？</p>\n<p>方法1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf3</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT<br>    .buffer(buf1.readableBytes()+buf2.readableBytes());<br>buf3.writeBytes(buf1);<br>buf3.writeBytes(buf2);<br>System.out.println(ByteBufUtil.prettyHexDump(buf3));<br></code></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这种方法好不好？回答是不太好，因为进行了数据的内存复制操作</p>\n<p>方法2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">CompositeByteBuf</span> <span class=\"hljs-variable\">buf3</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.compositeBuffer();<br><span class=\"hljs-comment\">// true 表示增加新的 ByteBuf 自动递增 write index, 否则 write index 会始终为 0</span><br>buf3.addComponents(<span class=\"hljs-literal\">true</span>, buf1, buf2);<br></code></pre></td></tr></table></figure>\n\n<p>结果是一样的</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>CompositeByteBuf 是一个组合的 ByteBuf，它内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量等信息，代表着整体中某一段的数据。</p>\n<ul>\n<li>优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制</li>\n<li>缺点，复杂了很多，多次操作会带来性能的损耗</li>\n</ul>\n<h4 id=\"13）Unpooled\"><a href=\"#13）Unpooled\" class=\"headerlink\" title=\"13）Unpooled\"></a>13）Unpooled</h4><p>Unpooled 是一个工具类，类如其名，提供了非池化的 ByteBuf 创建、组合、复制等操作</p>\n<p>这里仅介绍其跟【零拷贝】相关的 wrappedBuffer 方法，可以用来包装 ByteBuf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf1</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);<br>buf1.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;);<br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf2</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);<br>buf2.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;);<br><br><span class=\"hljs-comment\">// 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf</span><br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf3</span> <span class=\"hljs-operator\">=</span> Unpooled.wrappedBuffer(buf1, buf2);<br>System.out.println(ByteBufUtil.prettyHexDump(buf3));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以用来包装普通字节数组，底层也不会有拷贝操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf4</span> <span class=\"hljs-operator\">=</span> Unpooled.wrappedBuffer(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>&#125;);<br>System.out.println(buf4.getClass());<br>System.out.println(ByteBufUtil.prettyHexDump(buf4));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">class io.netty.buffer.CompositeByteBuf<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05 06                               |......          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-ByteBuf-优势\"><a href=\"#💡-ByteBuf-优势\" class=\"headerlink\" title=\"💡 ByteBuf 优势\"></a>💡 ByteBuf 优势</h4><ul>\n<li>池化 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能</li>\n<li>读写指针分离，不需要像 ByteBuffer 一样切换读写模式</li>\n<li>可以自动扩容</li>\n<li>支持链式调用，使用更流畅</li>\n<li>很多地方体现零拷贝，例如 slice、duplicate、CompositeByteBuf</li>\n</ul>\n<h2 id=\"4-双向通信\"><a href=\"#4-双向通信\" class=\"headerlink\" title=\"4. 双向通信\"></a>4. 双向通信</h2><h3 id=\"4-1-练习\"><a href=\"#4-1-练习\" class=\"headerlink\" title=\"4.1 练习\"></a>4.1 练习</h3><p>实现一个 echo server</p>\n<p>编写 server</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuf) msg;<br>                    System.out.println(buffer.toString(Charset.defaultCharset()));<br><br>                    <span class=\"hljs-comment\">// 建议使用 ctx.alloc() 创建 ByteBuf</span><br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                    response.writeBytes(buffer);<br>                    ctx.writeAndFlush(response);<br><br>                    <span class=\"hljs-comment\">// 思考：需要释放 buffer 吗</span><br>                    <span class=\"hljs-comment\">// 思考：需要释放 response 吗</span><br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).bind(<span class=\"hljs-number\">8080</span>);<br></code></pre></td></tr></table></figure>\n\n<p>编写 client</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br><span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(group)<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuf) msg;<br>                    System.out.println(buffer.toString(Charset.defaultCharset()));<br><br>                    <span class=\"hljs-comment\">// 思考：需要释放 buffer 吗</span><br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br><br>channel.closeFuture().addListener(future -&gt; &#123;<br>    group.shutdownGracefully();<br>&#125;);<br><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">line</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;q&quot;</span>.equals(line)) &#123;<br>            channel.close();<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>        channel.writeAndFlush(line);<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"💡-读和写的误解\"><a href=\"#💡-读和写的误解\" class=\"headerlink\" title=\"💡 读和写的误解\"></a>💡 读和写的误解</h3><p>我最初在认识上有这样的误区，认为只有在 netty，nio 这样的多路复用 IO 模型时，读写才不会相互阻塞，才可以实现高效的双向通信，但实际上，Java Socket 是全双工的：在任意时刻，线路上存在<code>A 到 B</code> 和 <code>B 到 A</code> 的双向信号传输。即使是阻塞 IO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读</p>\n<p>例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">ServerSocket</span> <span class=\"hljs-variable\">ss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerSocket</span>(<span class=\"hljs-number\">8888</span>);<br>        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> ss.accept();<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(s.getInputStream()));<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                    System.out.println(reader.readLine());<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">BufferedWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedWriter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutputStreamWriter</span>(s.getOutputStream()));<br>                <span class=\"hljs-comment\">// 例如在这个位置加入 thread 级别断点，可以发现即使不写入数据，也不妨碍前面线程读取客户端数据</span><br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>                    writer.write(String.valueOf(i));<br>                    writer.newLine();<br>                    writer.flush();<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8888</span>);<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(s.getInputStream()));<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                    System.out.println(reader.readLine());<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">BufferedWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedWriter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutputStreamWriter</span>(s.getOutputStream()));<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>                    writer.write(String.valueOf(i));<br>                    writer.newLine();<br>                    writer.flush();<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>该笔记是B站黑马的Netty视频的配套笔记2。</p>","more":"<h1 id=\"二-Netty-入门\"><a href=\"#二-Netty-入门\" class=\"headerlink\" title=\"二. Netty 入门\"></a>二. Netty 入门</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><h3 id=\"1-1-Netty-是什么？\"><a href=\"#1-1-Netty-是什么？\" class=\"headerlink\" title=\"1.1 Netty 是什么？\"></a>1.1 Netty 是什么？</h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">Netty <span class=\"hljs-keyword\">is</span> an asynchronous event-driven network <span class=\"hljs-built_in\">application</span> framework<br><span class=\"hljs-keyword\">for</span> rapid development <span class=\"hljs-keyword\">of</span> maintainable high performance protocol servers &amp; clients.<br></code></pre></td></tr></table></figure>\n\n<p>Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端</p>\n<h3 id=\"1-2-Netty-的作者\"><a href=\"#1-2-Netty-的作者\" class=\"headerlink\" title=\"1.2 Netty 的作者\"></a>1.2 Netty 的作者</h3><p><img src=\"/img/0005.png\"></p>\n<p>他还是另一个著名网络应用框架 Mina 的重要贡献者</p>\n<h3 id=\"1-3-Netty-的地位\"><a href=\"#1-3-Netty-的地位\" class=\"headerlink\" title=\"1.3 Netty 的地位\"></a>1.3 Netty 的地位</h3><p>Netty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位</p>\n<p>以下的框架都使用了 Netty，因为它们有网络通信需求！</p>\n<ul>\n<li>Cassandra - nosql 数据库</li>\n<li>Spark - 大数据分布式计算框架</li>\n<li>Hadoop - 大数据分布式存储框架</li>\n<li>RocketMQ - ali 开源的消息队列</li>\n<li>ElasticSearch - 搜索引擎</li>\n<li>gRPC - rpc 框架</li>\n<li>Dubbo - rpc 框架</li>\n<li>Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端</li>\n<li>Zookeeper - 分布式协调框架</li>\n</ul>\n<h3 id=\"1-4-Netty-的优势\"><a href=\"#1-4-Netty-的优势\" class=\"headerlink\" title=\"1.4 Netty 的优势\"></a>1.4 Netty 的优势</h3><ul>\n<li>Netty vs NIO，工作量大，bug 多<ul>\n<li>需要自己构建协议</li>\n<li>解决 TCP 传输问题，如粘包、半包</li>\n<li>epoll 空轮询导致 CPU 100%</li>\n<li>对 API 进行增强，使之更易用，如 FastThreadLocal &#x3D;&gt; ThreadLocal，ByteBuf &#x3D;&gt; ByteBuffer</li>\n</ul>\n</li>\n<li>Netty vs 其它网络应用框架<ul>\n<li>Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀</li>\n<li>久经考验，16年，Netty 版本<ul>\n<li>2.x 2004</li>\n<li>3.x 2008</li>\n<li>4.x 2013</li>\n<li>5.x 已废弃（没有明显的性能提升，维护成本高）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-Hello-World\"><a href=\"#2-Hello-World\" class=\"headerlink\" title=\"2. Hello World\"></a>2. Hello World</h2><h3 id=\"2-1-目标\"><a href=\"#2-1-目标\" class=\"headerlink\" title=\"2.1 目标\"></a>2.1 目标</h3><p>开发一个简单的服务器端和客户端</p>\n<ul>\n<li>客户端向服务器端发送 hello, world</li>\n<li>服务器仅接收，不返回</li>\n</ul>\n<p>加入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.netty<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>netty-all<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.1.39.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-2-服务器端\"><a href=\"#2-2-服务器端\" class=\"headerlink\" title=\"2.2 服务器端\"></a>2.2 服务器端</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>()) <span class=\"hljs-comment\">// 1</span><br>    .channel(NioServerSocketChannel.class) <span class=\"hljs-comment\">// 2</span><br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123; <span class=\"hljs-comment\">// 3</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringDecoder</span>()); <span class=\"hljs-comment\">// 5</span><br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;String&gt;() &#123; <span class=\"hljs-comment\">// 6</span><br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, String msg)</span> &#123;<br>                    System.out.println(msg);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;)<br>    .bind(<span class=\"hljs-number\">8080</span>); <span class=\"hljs-comment\">// 4</span><br></code></pre></td></tr></table></figure>\n\n<p>代码解读</p>\n<ul>\n<li><p>1 处，创建 NioEventLoopGroup，可以简单理解为 <code>线程池 + Selector</code> 后面会详细展开</p>\n</li>\n<li><p>2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有</p>\n<p><img src=\"/img/0006.png\"></p>\n</li>\n<li><p>3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p>\n</li>\n<li><p>4 处，ServerSocketChannel 绑定的监听端口</p>\n</li>\n<li><p>5 处，SocketChannel 的处理器，解码 ByteBuf &#x3D;&gt; String</p>\n</li>\n<li><p>6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果</p>\n</li>\n</ul>\n<h3 id=\"2-3-客户端\"><a href=\"#2-3-客户端\" class=\"headerlink\" title=\"2.3 客户端\"></a>2.3 客户端</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>()) <span class=\"hljs-comment\">// 1</span><br>    .channel(NioSocketChannel.class) <span class=\"hljs-comment\">// 2</span><br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123; <span class=\"hljs-comment\">// 3</span><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>()); <span class=\"hljs-comment\">// 8</span><br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>) <span class=\"hljs-comment\">// 4</span><br>    .sync() <span class=\"hljs-comment\">// 5</span><br>    .channel() <span class=\"hljs-comment\">// 6</span><br>    .writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() + <span class=\"hljs-string\">&quot;: hello world!&quot;</span>); <span class=\"hljs-comment\">// 7</span><br></code></pre></td></tr></table></figure>\n\n<p>代码解读</p>\n<ul>\n<li><p>1 处，创建 NioEventLoopGroup，同 Server</p>\n</li>\n<li><p>2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有</p>\n<p><img src=\"/img/0007.png\"></p>\n</li>\n<li><p>3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p>\n</li>\n<li><p>4 处，指定要连接的服务器和端口</p>\n</li>\n<li><p>5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕</p>\n</li>\n<li><p>6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作</p>\n</li>\n<li><p>7 处，写入消息并清空缓冲区</p>\n</li>\n<li><p>8 处，消息会经过通道 handler 处理，这里是将 String &#x3D;&gt; ByteBuf 发出</p>\n</li>\n<li><p>数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程</p>\n</li>\n</ul>\n<h3 id=\"2-4-流程梳理\"><a href=\"#2-4-流程梳理\" class=\"headerlink\" title=\"2.4 流程梳理\"></a>2.4 流程梳理</h3><p><img src=\"/img/0040.png\"></p>\n<h4 id=\"💡-提示\"><a href=\"#💡-提示\" class=\"headerlink\" title=\"💡 提示\"></a>💡 提示</h4><blockquote>\n<p>一开始需要树立正确的观念</p>\n<ul>\n<li>把 channel 理解为数据的通道</li>\n<li>把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf</li>\n<li>把 handler 理解为数据的处理工序<ul>\n<li>工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成…）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）</li>\n<li>handler 分 Inbound 和 Outbound 两类</li>\n</ul>\n</li>\n<li>把 eventLoop 理解为处理数据的工人<ul>\n<li>工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定）</li>\n<li>工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务</li>\n<li>工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"3-组件\"><a href=\"#3-组件\" class=\"headerlink\" title=\"3. 组件\"></a>3. 组件</h2><h3 id=\"3-1-EventLoop\"><a href=\"#3-1-EventLoop\" class=\"headerlink\" title=\"3.1 EventLoop\"></a>3.1 EventLoop</h3><p>事件循环对象</p>\n<p>EventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。</p>\n<p>它的继承关系比较复杂</p>\n<ul>\n<li>一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法</li>\n<li>另一条线是继承自 netty 自己的 OrderedEventExecutor，<ul>\n<li>提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop</li>\n<li>提供了 parent 方法来看看自己属于哪个 EventLoopGroup</li>\n</ul>\n</li>\n</ul>\n<p>事件循环组</p>\n<p>EventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）</p>\n<ul>\n<li>继承自 netty 自己的 EventExecutorGroup<ul>\n<li>实现了 Iterable 接口提供遍历 EventLoop 的能力</li>\n<li>另有 next 方法获取集合中下一个 EventLoop</li>\n</ul>\n</li>\n</ul>\n<p>以一个简单的实现为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程</span><br><span class=\"hljs-type\">DefaultEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br>System.out.println(group.next());<br>System.out.println(group.next());<br>System.out.println(group.next());<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">60</span>f82f98<br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">35</span>f983a6<br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">60</span>f82f98<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用 for 循环</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">for</span> (EventExecutor eventLoop : group) &#123;<br>    System.out.println(eventLoop);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">60</span>f82f98<br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span>.DefaultEventLoop@<span class=\"hljs-number\">35</span>f983a6<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-优雅关闭\"><a href=\"#💡-优雅关闭\" class=\"headerlink\" title=\"💡 优雅关闭\"></a>💡 优雅关闭</h4><p>优雅关闭 <code>shutdownGracefully</code> 方法。该方法会首先切换 <code>EventLoopGroup</code> 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的</p>\n<h4 id=\"演示-NioEventLoop-处理-io-事件\"><a href=\"#演示-NioEventLoop-处理-io-事件\" class=\"headerlink\" title=\"演示 NioEventLoop 处理 io 事件\"></a>演示 NioEventLoop 处理 io 事件</h4><p>服务器端两个 nio worker 工人</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>))<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">byteBuf</span> <span class=\"hljs-operator\">=</span> msg <span class=\"hljs-keyword\">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class=\"hljs-literal\">null</span>;<br>                    <span class=\"hljs-keyword\">if</span> (byteBuf != <span class=\"hljs-literal\">null</span>) &#123;<br>                        <span class=\"hljs-type\">byte</span>[] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">16</span>];<br>                        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> byteBuf.readBytes(buf, <span class=\"hljs-number\">0</span>, byteBuf.readableBytes());<br>                        log.debug(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(buf));<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).bind(<span class=\"hljs-number\">8080</span>).sync();<br></code></pre></td></tr></table></figure>\n\n<p>客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>    <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>            .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>))<br>            .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    System.out.println(<span class=\"hljs-string\">&quot;init...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                &#125;<br>            &#125;)<br>            .channel(NioSocketChannel.class).connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>)<br>            .sync()<br>            .channel();<br><br>    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class=\"hljs-string\">&quot;wangwu&quot;</span>.getBytes()));<br>    Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class=\"hljs-string\">&quot;wangwu&quot;</span>.getBytes()));<br></code></pre></td></tr></table></figure>\n\n<p>最后输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">03</span>:<span class=\"hljs-number\">34</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - zhangsan       <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">03</span>:<span class=\"hljs-number\">36</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - zhangsan       <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">05</span>:<span class=\"hljs-number\">36</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-2]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - lisi           <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">05</span>:<span class=\"hljs-number\">38</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-2]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - lisi           <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">09</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - wangwu        <br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">11</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-3-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest</span> - wangwu         <br></code></pre></td></tr></table></figure>\n\n<p>可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定</p>\n<p><img src=\"/img/0042.png\"></p>\n<p>再增加两个非 nio 工人</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoopGroup</span> <span class=\"hljs-variable\">normalWorkers</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>))<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span>  &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>            ch.pipeline().addLast(normalWorkers,<span class=\"hljs-string\">&quot;myhandler&quot;</span>,<br>              <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">byteBuf</span> <span class=\"hljs-operator\">=</span> msg <span class=\"hljs-keyword\">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class=\"hljs-literal\">null</span>;<br>                    <span class=\"hljs-keyword\">if</span> (byteBuf != <span class=\"hljs-literal\">null</span>) &#123;<br>                        <span class=\"hljs-type\">byte</span>[] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">16</span>];<br>                        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> byteBuf.readBytes(buf, <span class=\"hljs-number\">0</span>, byteBuf.readableBytes());<br>                        log.debug(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(buf));<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).bind(<span class=\"hljs-number\">8080</span>).sync();<br></code></pre></td></tr></table></figure>\n\n<p>客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p>\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED<br>22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE<br>22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE<br>22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        <br>22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE<br>22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        <br>22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED<br>22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE<br>22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6c 69 73 69                                     |lisi            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE<br>22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            <br>22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6c 69 73 69                                     |lisi            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE<br>22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            <br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED<br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE<br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 77 61 6e 67 77 75                               |wangwu          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE<br>22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          <br>22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 77 61 6e 67 77 75                               |wangwu          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE<br>22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          <br></code></pre></td></tr></table></figure>\n\n<p>可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）</p>\n<p><img src=\"/img/0041.png\"></p>\n<h4 id=\"💡-handler-执行中如何换人？\"><a href=\"#💡-handler-执行中如何换人？\" class=\"headerlink\" title=\"💡 handler 执行中如何换人？\"></a>💡 handler 执行中如何换人？</h4><p>关键代码 <code>io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">invokeChannelRead</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> AbstractChannelHandlerContext next, Object msg)</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class=\"hljs-string\">&quot;msg&quot;</span>), next);<br>    <span class=\"hljs-comment\">// 下一个 handler 的事件循环是否与当前的事件循环是同一个线程</span><br>    <span class=\"hljs-type\">EventExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> next.executor();<br>    <br>    <span class=\"hljs-comment\">// 是，直接调用</span><br>    <span class=\"hljs-keyword\">if</span> (executor.inEventLoop()) &#123;<br>        next.invokeChannelRead(m);<br>    &#125; <br>    <span class=\"hljs-comment\">// 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）</span><br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        executor.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                next.invokeChannelRead(m);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>如果两个 handler 绑定的是同一个线程，那么就直接调用</li>\n<li>否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用</li>\n</ul>\n<h4 id=\"演示-NioEventLoop-处理普通任务\"><a href=\"#演示-NioEventLoop-处理普通任务\" class=\"headerlink\" title=\"演示 NioEventLoop 处理普通任务\"></a>演示 NioEventLoop 处理普通任务</h4><p>NioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">nioWorkers</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br><br>log.debug(<span class=\"hljs-string\">&quot;server start...&quot;</span>);<br>Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>nioWorkers.execute(()-&gt;&#123;<br>    log.debug(<span class=\"hljs-string\">&quot;normal task...&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\"><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">36</span> [<span class=\"hljs-symbol\">DEBUG</span>] [main] c.i.o.<span class=\"hljs-symbol\">EventLoopTest2</span> - server start...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">38</span> [<span class=\"hljs-symbol\">DEBUG</span>] [nioEventLoopGroup<span class=\"hljs-number\">-2</span><span class=\"hljs-number\">-1</span>] c.i.o.<span class=\"hljs-symbol\">EventLoopTest2</span> - normal task...<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以用来执行耗时较长的任务</p>\n</blockquote>\n<h4 id=\"演示-NioEventLoop-处理定时任务\"><a href=\"#演示-NioEventLoop-处理定时任务\" class=\"headerlink\" title=\"演示 NioEventLoop 处理定时任务\"></a>演示 NioEventLoop 处理定时任务</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">nioWorkers</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">2</span>);<br><br>log.debug(<span class=\"hljs-string\">&quot;server start...&quot;</span>);<br>Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>nioWorkers.scheduleAtFixedRate(() -&gt; &#123;<br>    log.debug(<span class=\"hljs-string\">&quot;running...&quot;</span>);<br>&#125;, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, TimeUnit.SECONDS);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">15</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - server start...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">17</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-2-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - running...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">18</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-2-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - running...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">19</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-2-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - running...<br><span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">20</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[nioEventLoopGroup-2-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.EventLoopTest2</span> - running...<br>...<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以用来执行定时任务</p>\n</blockquote>\n<h3 id=\"3-2-Channel\"><a href=\"#3-2-Channel\" class=\"headerlink\" title=\"3.2 Channel\"></a>3.2 Channel</h3><p>channel 的主要作用</p>\n<ul>\n<li>close() 可以用来关闭 channel</li>\n<li>closeFuture() 用来处理 channel 的关闭<ul>\n<li>sync 方法作用是同步等待 channel 关闭</li>\n<li>而 addListener 方法是异步等待 channel 关闭</li>\n</ul>\n</li>\n<li>pipeline() 方法添加处理器</li>\n<li>write() 方法将数据写入</li>\n<li>writeAndFlush() 方法将数据写入并刷出</li>\n</ul>\n<h4 id=\"ChannelFuture\"><a href=\"#ChannelFuture\" class=\"headerlink\" title=\"ChannelFuture\"></a>ChannelFuture</h4><p>这时刚才的客户端代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>)<br>    .sync()<br>    .channel()<br>    .writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() + <span class=\"hljs-string\">&quot;: hello world!&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>现在把它拆开来看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>); <span class=\"hljs-comment\">// 1</span><br><br>channelFuture.sync().channel().writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() + <span class=\"hljs-string\">&quot;: hello world!&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象</li>\n</ul>\n<p><strong>注意</strong> connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象</p>\n<p>实验如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>);<br><br>System.out.println(channelFuture.channel()); <span class=\"hljs-comment\">// 1</span><br>channelFuture.sync(); <span class=\"hljs-comment\">// 2</span><br>System.out.println(channelFuture.channel()); <span class=\"hljs-comment\">// 3</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行到 1 时，连接未建立，打印 <code>[id: 0x2e1884dd]</code></li>\n<li>执行到 2 时，sync 方法是同步等待连接建立完成</li>\n<li>执行到 3 时，连接肯定建立了，打印 <code>[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]</code></li>\n</ul>\n<p>除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>);<br>System.out.println(channelFuture.channel()); <span class=\"hljs-comment\">// 1</span><br>channelFuture.addListener((ChannelFutureListener) future -&gt; &#123;<br>    System.out.println(future.channel()); <span class=\"hljs-comment\">// 2</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行到 1 时，连接未建立，打印 <code>[id: 0x749124ba]</code></li>\n<li>ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 <code>[id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]</code></li>\n</ul>\n<h4 id=\"CloseFuture\"><a href=\"#CloseFuture\" class=\"headerlink\" title=\"CloseFuture\"></a>CloseFuture</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CloseFutureClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        NioEventLoopGroup group <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>                .group(group)<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                    <span class=\"hljs-meta\">@Override</span> <span class=\"hljs-comment\">// 在连接建立后被调用</span><br>                    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                        ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                        ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>                    &#125;<br>                &#125;)<br>                .connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>));<br>        <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> channelFuture.sync().channel();<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, channel);<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(()-&gt;&#123;<br>            <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);<br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">line</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;q&quot;</span>.equals(line)) &#123;<br>                    channel.close(); <span class=\"hljs-comment\">// close 异步操作 1s 之后</span><br><span class=\"hljs-comment\">//                    log.debug(&quot;处理关闭之后的操作&quot;); // 不能在这里善后</span><br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>                channel.writeAndFlush(line);<br>            &#125;<br>        &#125;, <span class=\"hljs-string\">&quot;input&quot;</span>).start();<br><br>        <span class=\"hljs-comment\">// 获取 CloseFuture 对象， 1) 同步处理关闭， 2) 异步处理关闭</span><br>        <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">closeFuture</span> <span class=\"hljs-operator\">=</span> channel.closeFuture();<br>        <span class=\"hljs-comment\">/*log.debug(&quot;waiting close...&quot;);</span><br><span class=\"hljs-comment\">        closeFuture.sync();</span><br><span class=\"hljs-comment\">        log.debug(&quot;处理关闭之后的操作&quot;);*/</span><br>        closeFuture.addListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelFutureListener</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                log.debug(<span class=\"hljs-string\">&quot;处理关闭之后的操作&quot;</span>);<br>                group.shutdownGracefully();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"💡-异步提升的是什么\"><a href=\"#💡-异步提升的是什么\" class=\"headerlink\" title=\"💡 异步提升的是什么\"></a>💡 异步提升的是什么</h4><ul>\n<li><p>有些同学看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接</p>\n</li>\n<li><p>还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的</p>\n</li>\n</ul>\n<p>思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：<code>4 * 8 * 3 = 96</code></p>\n<p><img src=\"/img/0044.png\"></p>\n<p>经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下</p>\n<p><img src=\"/img/0048.png\"></p>\n<p>因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 <code>4 * 8 * 12</code> 效率几乎是原来的四倍</p>\n<p><img src=\"/img/0047.png\"></p>\n<p>要点</p>\n<ul>\n<li>单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势</li>\n<li>异步并没有缩短响应时间，反而有所增加</li>\n<li>合理进行任务拆分，也是利用异步的关键</li>\n</ul>\n<h3 id=\"3-3-Future-amp-Promise\"><a href=\"#3-3-Future-amp-Promise\" class=\"headerlink\" title=\"3.3 Future &amp; Promise\"></a>3.3 Future &amp; Promise</h3><p>在异步处理时，经常用到这两个接口</p>\n<p>首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展</p>\n<ul>\n<li>jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果</li>\n<li>netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束</li>\n<li>netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能&#x2F;名称</th>\n<th>jdk Future</th>\n<th>netty Future</th>\n<th>Promise</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cancel</td>\n<td>取消任务</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isCanceled</td>\n<td>任务是否取消</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isDone</td>\n<td>任务是否完成，不能区分成功失败</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>get</td>\n<td>获取任务结果，阻塞等待</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getNow</td>\n<td>-</td>\n<td>获取任务结果，非阻塞，还未产生结果时返回 null</td>\n<td>-</td>\n</tr>\n<tr>\n<td>await</td>\n<td>-</td>\n<td>等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断</td>\n<td>-</td>\n</tr>\n<tr>\n<td>sync</td>\n<td>-</td>\n<td>等待任务结束，如果任务失败，抛出异常</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isSuccess</td>\n<td>-</td>\n<td>判断任务是否成功</td>\n<td>-</td>\n</tr>\n<tr>\n<td>cause</td>\n<td>-</td>\n<td>获取失败信息，非阻塞，如果没有失败，返回null</td>\n<td>-</td>\n</tr>\n<tr>\n<td>addLinstener</td>\n<td>-</td>\n<td>添加回调，异步接收结果</td>\n<td>-</td>\n</tr>\n<tr>\n<td>setSuccess</td>\n<td>-</td>\n<td>-</td>\n<td>设置成功结果</td>\n</tr>\n<tr>\n<td>setFailure</td>\n<td>-</td>\n<td>-</td>\n<td>设置失败结果</td>\n</tr>\n</tbody></table>\n<h4 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h4><p>同步处理任务成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>eventExecutors.execute(()-&gt;&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    log.debug(<span class=\"hljs-string\">&quot;set success, &#123;&#125;&quot;</span>,<span class=\"hljs-number\">10</span>);<br>    promise.setSuccess(<span class=\"hljs-number\">10</span>);<br>&#125;);<br><br>log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br>log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>,promise.getNow()); <span class=\"hljs-comment\">// 还没有结果</span><br>log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>,promise.get());<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">53</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">53</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - null<br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">54</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set success, <span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">54</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - <span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h4><p>异步处理任务成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br><span class=\"hljs-comment\">// 设置回调，异步接收结果</span><br>promise.addListener(future -&gt; &#123;<br>    <span class=\"hljs-comment\">// 这里的 future 就是上面的 promise</span><br>    log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>,future.getNow());<br>&#125;);<br><br><span class=\"hljs-comment\">// 等待 1000 后设置成功结果</span><br>eventExecutors.execute(()-&gt;&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    log.debug(<span class=\"hljs-string\">&quot;set success, &#123;&#125;&quot;</span>,<span class=\"hljs-number\">10</span>);<br>    promise.setSuccess(<span class=\"hljs-number\">10</span>);<br>&#125;);<br><br>log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">30</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set success, <span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - <span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例3\"><a href=\"#例3\" class=\"headerlink\" title=\"例3\"></a>例3</h4><p>同步处理任务失败 - sync &amp; get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>        DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>        eventExecutors.execute(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class=\"hljs-type\">RuntimeException</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;error...&quot;</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());<br>            promise.setFailure(e);<br>        &#125;);<br><br>        log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, promise.getNow());<br>        promise.get(); <span class=\"hljs-comment\">// sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常</span><br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">07</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">07</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - null<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">08</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set failure, java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br>Exception <span class=\"hljs-keyword\">in</span> thread <span class=\"hljs-string\">&quot;main&quot;</span> java<span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.ExecutionException</span>: java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.AbstractFuture</span><span class=\"hljs-selector-class\">.get</span>(AbstractFuture<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">41</span>)<br>\tat com<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.oio</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span><span class=\"hljs-selector-class\">.main</span>(DefaultPromiseTest2<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">34</span>)<br>Caused by: java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br>\tat com<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.oio</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span>.lambda<span class=\"hljs-variable\">$main</span>$<span class=\"hljs-number\">0</span>(DefaultPromiseTest2<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">27</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span><span class=\"hljs-selector-class\">.DefaultEventLoop</span><span class=\"hljs-selector-class\">.run</span>(DefaultEventLoop<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">54</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.SingleThreadEventExecutor$<span class=\"hljs-number\">5</span><span class=\"hljs-selector-class\">.run</span>(SingleThreadEventExecutor<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">918</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.internal</span>.ThreadExecutorMap$<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.run</span>(ThreadExecutorMap<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">74</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.FastThreadLocalRunnable</span><span class=\"hljs-selector-class\">.run</span>(FastThreadLocalRunnable<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">30</span>)<br>\tat java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.Thread</span><span class=\"hljs-selector-class\">.run</span>(Thread<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">745</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例4\"><a href=\"#例4\" class=\"headerlink\" title=\"例4\"></a>例4</h4><p>同步处理任务失败 - await</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>eventExecutors.execute(() -&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class=\"hljs-type\">RuntimeException</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;error...&quot;</span>);<br>    log.debug(<span class=\"hljs-string\">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());<br>    promise.setFailure(e);<br>&#125;);<br><br>log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br>log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, promise.getNow());<br>promise.await(); <span class=\"hljs-comment\">// 与 sync 和 get 区别在于，不会抛异常</span><br>log.debug(<span class=\"hljs-string\">&quot;result &#123;&#125;&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">53</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">53</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - null<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">54</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set failure, java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">54</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - result java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例5\"><a href=\"#例5\" class=\"headerlink\" title=\"例5\"></a>例5</h4><p>异步处理任务失败</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>promise.addListener(future -&gt; &#123;<br>    log.debug(<span class=\"hljs-string\">&quot;result &#123;&#125;&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());<br>&#125;);<br><br>eventExecutors.execute(() -&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class=\"hljs-type\">RuntimeException</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;error...&quot;</span>);<br>    log.debug(<span class=\"hljs-string\">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());<br>    promise.setFailure(e);<br>&#125;);<br><br>log.debug(<span class=\"hljs-string\">&quot;start...&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">57</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[main]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - start...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">58</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - set failure, java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br><span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">58</span> <span class=\"hljs-selector-attr\">[DEBUG]</span> <span class=\"hljs-selector-attr\">[defaultEventLoop-1-1]</span> c<span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.o</span><span class=\"hljs-selector-class\">.DefaultPromiseTest2</span> - result java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.RuntimeException</span>: error...<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"例6\"><a href=\"#例6\" class=\"headerlink\" title=\"例6\"></a>例6</h4><p>await 死锁检查</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DefaultEventLoop</span> <span class=\"hljs-variable\">eventExecutors</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>eventExecutors.submit(()-&gt;&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        promise.await();<br>        <span class=\"hljs-comment\">// 注意不能仅捕获 InterruptedException 异常</span><br>        <span class=\"hljs-comment\">// 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播</span><br>        <span class=\"hljs-comment\">// 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123; <br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class=\"hljs-string\">&quot;2&quot;</span>);<br>&#125;);<br>eventExecutors.submit(()-&gt;&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;3&quot;</span>);<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        promise.await();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class=\"hljs-string\">&quot;4&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">4</span><br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.BlockingOperationException</span>: DefaultPromise@<span class=\"hljs-number\">47499</span><span class=\"hljs-built_in\">c2a</span>(incomplete)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.DefaultPromise</span><span class=\"hljs-selector-class\">.checkDeadLock</span>(DefaultPromise<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">384</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.DefaultPromise</span><span class=\"hljs-selector-class\">.await</span>(DefaultPromise<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">212</span>)<br>\tat com<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.oio</span><span class=\"hljs-selector-class\">.DefaultPromiseTest</span>.lambda<span class=\"hljs-variable\">$main</span>$<span class=\"hljs-number\">0</span>(DefaultPromiseTest<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">27</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.PromiseTask<span class=\"hljs-variable\">$RunnableAdapter</span><span class=\"hljs-selector-class\">.call</span>(PromiseTask<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">38</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.PromiseTask</span><span class=\"hljs-selector-class\">.run</span>(PromiseTask<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">73</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span><span class=\"hljs-selector-class\">.DefaultEventLoop</span><span class=\"hljs-selector-class\">.run</span>(DefaultEventLoop<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">54</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.SingleThreadEventExecutor$<span class=\"hljs-number\">5</span><span class=\"hljs-selector-class\">.run</span>(SingleThreadEventExecutor<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">918</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.internal</span>.ThreadExecutorMap$<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.run</span>(ThreadExecutorMap<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">74</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.FastThreadLocalRunnable</span><span class=\"hljs-selector-class\">.run</span>(FastThreadLocalRunnable<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">30</span>)<br>\tat java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.Thread</span><span class=\"hljs-selector-class\">.run</span>(Thread<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">745</span>)<br>io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.BlockingOperationException</span>: DefaultPromise@<span class=\"hljs-number\">47499</span><span class=\"hljs-built_in\">c2a</span>(incomplete)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.DefaultPromise</span><span class=\"hljs-selector-class\">.checkDeadLock</span>(DefaultPromise<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">384</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.DefaultPromise</span><span class=\"hljs-selector-class\">.await</span>(DefaultPromise<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">212</span>)<br>\tat com<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.oio</span><span class=\"hljs-selector-class\">.DefaultPromiseTest</span>.lambda<span class=\"hljs-variable\">$main</span>$<span class=\"hljs-number\">1</span>(DefaultPromiseTest<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">36</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.PromiseTask<span class=\"hljs-variable\">$RunnableAdapter</span><span class=\"hljs-selector-class\">.call</span>(PromiseTask<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">38</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.PromiseTask</span><span class=\"hljs-selector-class\">.run</span>(PromiseTask<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">73</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.channel</span><span class=\"hljs-selector-class\">.DefaultEventLoop</span><span class=\"hljs-selector-class\">.run</span>(DefaultEventLoop<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">54</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span>.SingleThreadEventExecutor$<span class=\"hljs-number\">5</span><span class=\"hljs-selector-class\">.run</span>(SingleThreadEventExecutor<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">918</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.internal</span>.ThreadExecutorMap$<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.run</span>(ThreadExecutorMap<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">74</span>)<br>\tat io<span class=\"hljs-selector-class\">.netty</span><span class=\"hljs-selector-class\">.util</span><span class=\"hljs-selector-class\">.concurrent</span><span class=\"hljs-selector-class\">.FastThreadLocalRunnable</span><span class=\"hljs-selector-class\">.run</span>(FastThreadLocalRunnable<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">30</span>)<br>\tat java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.Thread</span><span class=\"hljs-selector-class\">.run</span>(Thread<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">745</span>)<br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"3-4-Handler-amp-Pipeline\"><a href=\"#3-4-Handler-amp-Pipeline\" class=\"headerlink\" title=\"3.4 Handler &amp; Pipeline\"></a>3.4 Handler &amp; Pipeline</h3><p>ChannelHandler 用来处理 Channel 上的各种事件，分为入站、出站两种。所有 ChannelHandler 被连成一串，就是 Pipeline</p>\n<ul>\n<li>入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来读取客户端数据，写回结果</li>\n<li>出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对写回结果进行加工</li>\n</ul>\n<p>打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品</p>\n<p>先搞清楚顺序，服务端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">1</span>);<br>                    ctx.fireChannelRead(msg); <span class=\"hljs-comment\">// 1</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">2</span>);<br>                    ctx.fireChannelRead(msg); <span class=\"hljs-comment\">// 2</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">3</span>);<br>                    ctx.channel().write(msg); <span class=\"hljs-comment\">// 3</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelOutboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg, </span><br><span class=\"hljs-params\">                                  ChannelPromise promise)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">4</span>);<br>                    ctx.write(msg, promise); <span class=\"hljs-comment\">// 4</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelOutboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg, </span><br><span class=\"hljs-params\">                                  ChannelPromise promise)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">5</span>);<br>                    ctx.write(msg, promise); <span class=\"hljs-comment\">// 5</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelOutboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg, </span><br><span class=\"hljs-params\">                                  ChannelPromise promise)</span> &#123;<br>                    System.out.println(<span class=\"hljs-number\">6</span>);<br>                    ctx.write(msg, promise); <span class=\"hljs-comment\">// 6</span><br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;)<br>    .bind(<span class=\"hljs-number\">8080</span>);<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>)<br>    .addListener((ChannelFutureListener) future -&gt; &#123;<br>        future.channel().writeAndFlush(<span class=\"hljs-string\">&quot;hello,world&quot;</span>);<br>    &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>服务器端打印：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">1<br>2<br>3<br>6<br>5<br>4<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表</p>\n<p><img src=\"/img/0008.png\"></p>\n<ul>\n<li>入站处理器中，ctx.fireChannelRead(msg) 是 <strong>调用下一个入站处理器</strong><ul>\n<li>如果注释掉 1 处代码，则仅会打印 1</li>\n<li>如果注释掉 2 处代码，则仅会打印 1 2</li>\n</ul>\n</li>\n<li>3 处的 ctx.channel().write(msg) 会 <strong>从尾部开始触发</strong> 后续出站处理器的执行<ul>\n<li>如果注释掉 3 处代码，则仅会打印 1 2 3</li>\n</ul>\n</li>\n<li>类似的，出站处理器中，ctx.write(msg, promise) 的调用也会 <strong>触发上一个出站处理器</strong><ul>\n<li>如果注释掉 6 处代码，则仅会打印 1 2 3 6</li>\n</ul>\n</li>\n<li>ctx.channel().write(msg) vs ctx.write(msg)<ul>\n<li>都是触发出站处理器的执行</li>\n<li>ctx.channel().write(msg) 从尾部开始查找出站处理器</li>\n<li>ctx.write(msg) 是从当前节点找上一个出站处理器</li>\n<li>3 处的 ctx.channel().write(msg) 如果改为 ctx.write(msg) 仅会打印 1 2 3，因为节点3 之前没有其它出站处理器了</li>\n<li>6 处的 ctx.write(msg, promise) 如果改为 ctx.channel().write(msg) 会打印 1 2 3 6 6 6… 因为 ctx.channel().write() 是从尾部开始查找，结果又是节点6 自己</li>\n</ul>\n</li>\n</ul>\n<p>图1 - 服务端 pipeline 触发的原始流程，图中数字代表了处理步骤的先后次序</p>\n<p><img src=\"/img/0009.png\"></p>\n<h3 id=\"3-5-ByteBuf\"><a href=\"#3-5-ByteBuf\" class=\"headerlink\" title=\"3.5 ByteBuf\"></a>3.5 ByteBuf</h3><p>是对字节数据的封装</p>\n<h4 id=\"1）创建\"><a href=\"#1）创建\" class=\"headerlink\" title=\"1）创建\"></a>1）创建</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">10</span>);<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>上面代码创建了一个默认的 ByteBuf（池化基于直接内存的 ByteBuf），初始容量是 10</p>\n<p>输出</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">index</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">write</span> <span class=\"hljs-keyword\">index</span>:<span class=\"hljs-number\">0</span> capacity:<span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n\n<p>其中 log 方法参考如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">log</span><span class=\"hljs-params\">(ByteBuf buffer)</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> buffer.readableBytes();<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rows</span> <span class=\"hljs-operator\">=</span> length / <span class=\"hljs-number\">16</span> + (length % <span class=\"hljs-number\">15</span> == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">4</span>;<br>    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(rows * <span class=\"hljs-number\">80</span> * <span class=\"hljs-number\">2</span>)<br>        .append(<span class=\"hljs-string\">&quot;read index:&quot;</span>).append(buffer.readerIndex())<br>        .append(<span class=\"hljs-string\">&quot; write index:&quot;</span>).append(buffer.writerIndex())<br>        .append(<span class=\"hljs-string\">&quot; capacity:&quot;</span>).append(buffer.capacity())<br>        .append(NEWLINE);<br>    appendPrettyHexDump(buf, buffer);<br>    System.out.println(buf.toString());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2）直接内存-vs-堆内存\"><a href=\"#2）直接内存-vs-堆内存\" class=\"headerlink\" title=\"2）直接内存 vs 堆内存\"></a>2）直接内存 vs 堆内存</h4><p>可以使用下面的代码来创建池化基于堆的 ByteBuf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.heapBuffer(<span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用下面的代码来创建池化基于直接内存的 ByteBuf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.directBuffer(<span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用</li>\n<li>直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放</li>\n</ul>\n<h4 id=\"3）池化-vs-非池化\"><a href=\"#3）池化-vs-非池化\" class=\"headerlink\" title=\"3）池化 vs 非池化\"></a>3）池化 vs 非池化</h4><p>池化的最大意义在于可以重用 ByteBuf，优点有</p>\n<ul>\n<li>没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力</li>\n<li>有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率</li>\n<li>高并发时，池化功能更节约内存，减少内存溢出的可能</li>\n</ul>\n<p>池化功能是否开启，可以通过下面的系统环境变量来设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">-Dio.netty.allocator.type=&#123;unpooled|pooled&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>4.1 以后，非 Android 平台默认启用池化实现，Android 平台启用非池化实现</li>\n<li>4.1 之前，池化功能还不成熟，默认是非池化实现</li>\n</ul>\n<h4 id=\"4）组成\"><a href=\"#4）组成\" class=\"headerlink\" title=\"4）组成\"></a>4）组成</h4><p>ByteBuf 由四部分组成</p>\n<p><img src=\"/img/0010.png\"></p>\n<p>最开始读写指针都在 0 位置</p>\n<h4 id=\"5）写入\"><a href=\"#5）写入\" class=\"headerlink\" title=\"5）写入\"></a>5）写入</h4><p>方法列表，省略一些不重要的方法</p>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>writeBoolean(boolean value)</td>\n<td>写入 boolean 值</td>\n<td>用一字节 01|00 代表 true|false</td>\n</tr>\n<tr>\n<td>writeByte(int value)</td>\n<td>写入 byte 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeShort(int value)</td>\n<td>写入 short 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeInt(int value)</td>\n<td>写入 int 值</td>\n<td>Big Endian，即 0x250，写入后 00 00 02 50</td>\n</tr>\n<tr>\n<td>writeIntLE(int value)</td>\n<td>写入 int 值</td>\n<td>Little Endian，即 0x250，写入后 50 02 00 00</td>\n</tr>\n<tr>\n<td>writeLong(long value)</td>\n<td>写入 long 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeChar(int value)</td>\n<td>写入 char 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeFloat(float value)</td>\n<td>写入 float 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeDouble(double value)</td>\n<td>写入 double 值</td>\n<td></td>\n</tr>\n<tr>\n<td>writeBytes(ByteBuf src)</td>\n<td>写入 netty 的 ByteBuf</td>\n<td></td>\n</tr>\n<tr>\n<td>writeBytes(byte[] src)</td>\n<td>写入 byte[]</td>\n<td></td>\n</tr>\n<tr>\n<td>writeBytes(ByteBuffer src)</td>\n<td>写入 nio 的 ByteBuffer</td>\n<td></td>\n</tr>\n<tr>\n<td>int writeCharSequence(CharSequence sequence, Charset charset)</td>\n<td>写入字符串</td>\n<td></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意</p>\n<ul>\n<li>这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用</li>\n<li>网络传输，默认习惯是 Big Endian</li>\n</ul>\n</blockquote>\n<p>先写入 4 个字节</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>结果是</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">read index:0 write index:4 capacity:10<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04                                     |....            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>再写入一个 int 整数，也是 4 个字节</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.writeInt(<span class=\"hljs-number\">5</span>);<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>结果是</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">read index:0 write index:8 capacity:10<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 00 00 00 05                         |........        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置</p>\n<h4 id=\"6）扩容\"><a href=\"#6）扩容\" class=\"headerlink\" title=\"6）扩容\"></a>6）扩容</h4><p>再写入一个 int 整数时，容量不够了（初始容量是 10），这时会引发扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.writeInt(<span class=\"hljs-number\">6</span>);<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>扩容规则是</p>\n<ul>\n<li>如何写入后数据大小未超过 512，则选择下一个 16 的整数倍，例如写入后大小为 12 ，则扩容后 capacity 是 16</li>\n<li>如果写入后数据大小超过 512，则选择下一个 2^n，例如写入后大小为 513，则扩容后 capacity 是 2^10&#x3D;1024（2^9&#x3D;512 已经不够了）</li>\n<li>扩容不能超过 max capacity 会报错</li>\n</ul>\n<p>结果是</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">read index:0 write index:12 capacity:16<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 00 00 00 05 00 00 00 06             |............    |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"7）读取\"><a href=\"#7）读取\" class=\"headerlink\" title=\"7）读取\"></a>7）读取</h4><p>例如读了 4 次，每次一个字节</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(buffer.readByte());<br>System.out.println(buffer.readByte());<br>System.out.println(buffer.readByte());<br>System.out.println(buffer.readByte());<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>读过的内容，就属于废弃部分了，再读只能读那些尚未读取的部分</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">1<br>2<br>3<br>4<br>read index:4 write index:12 capacity:16<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 00 00 00 05 00 00 00 06                         |........        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>如果需要重复读取 int 整数 5，怎么办？</p>\n<p>可以在 read 前先做个标记 mark</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.markReaderIndex();<br>System.out.println(buffer.readInt());<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">5<br>read index:8 write index:12 capacity:16<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 00 00 00 06                                     |....            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这时要重复读取的话，重置到标记位置 reset</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">buffer.resetReaderIndex();<br>log(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>这时</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">read index:4 write index:12 capacity:16<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 00 00 00 05 00 00 00 06                         |........        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>还有种办法是采用 get 开头的一系列方法，这些方法不会改变 read index</p>\n<h4 id=\"8）retain-amp-release\"><a href=\"#8）retain-amp-release\" class=\"headerlink\" title=\"8）retain &amp; release\"></a>8）retain &amp; release</h4><p>由于 Netty 中有堆外内存的 ByteBuf 实现，堆外内存最好是手动来释放，而不是等 GC 垃圾回收。</p>\n<ul>\n<li>UnpooledHeapByteBuf 使用的是 JVM 内存，只需等 GC 回收内存即可</li>\n<li>UnpooledDirectByteBuf 使用的就是直接内存了，需要特殊的方法来回收内存</li>\n<li>PooledByteBuf 和它的子类使用了池化机制，需要更复杂的规则来回收内存</li>\n</ul>\n<blockquote>\n<p>回收内存的源码实现，请关注下面方法的不同实现</p>\n<p><code>protected abstract void deallocate()</code></p>\n</blockquote>\n<p>Netty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口</p>\n<ul>\n<li>每个 ByteBuf 对象的初始计数为 1</li>\n<li>调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收</li>\n<li>调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收</li>\n<li>当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用</li>\n</ul>\n<p>谁来负责 release 呢？</p>\n<p>不是我们想象的（一般情况下）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ...<br><span class=\"hljs-keyword\">try</span> &#123;<br>    ...<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>    buf.release();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>请思考，因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，如果在 finally 中 release 了，就失去了传递性（当然，如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）</p>\n<p>基本规则是，<strong>谁是最后使用者，谁负责 release</strong>，详细分析如下</p>\n<ul>\n<li>起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）</li>\n<li>入站 ByteBuf 处理原则<ul>\n<li>对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release</li>\n<li>将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release</li>\n<li>如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release</li>\n<li>注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release</li>\n<li>假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）</li>\n</ul>\n</li>\n<li>出站 ByteBuf 处理原则<ul>\n<li>出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release</li>\n</ul>\n</li>\n<li>异常处理原则<ul>\n<li>有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true</li>\n</ul>\n</li>\n</ul>\n<p>TailContext 释放未处理消息逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// io.netty.channel.DefaultChannelPipeline#onUnhandledInboundMessage(java.lang.Object)</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onUnhandledInboundMessage</span><span class=\"hljs-params\">(Object msg)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        logger.debug(<br>            <span class=\"hljs-string\">&quot;Discarded inbound message &#123;&#125; that reached at the tail of the pipeline. &quot;</span> +<br>            <span class=\"hljs-string\">&quot;Please check your pipeline configuration.&quot;</span>, msg);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        ReferenceCountUtil.release(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>具体代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// io.netty.util.ReferenceCountUtil#release(java.lang.Object)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">release</span><span class=\"hljs-params\">(Object msg)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (msg <span class=\"hljs-keyword\">instanceof</span> ReferenceCounted) &#123;<br>        <span class=\"hljs-keyword\">return</span> ((ReferenceCounted) msg).release();<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"9）slice\"><a href=\"#9）slice\" class=\"headerlink\" title=\"9）slice\"></a>9）slice</h4><p>【零拷贝】的体现之一，对原始 ByteBuf 进行切片成多个 ByteBuf，切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存，切片后的 ByteBuf 维护独立的 read，write 指针</p>\n<p><img src=\"/img/0011.png\"></p>\n<p>例，原始 ByteBuf 进行一些初始操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">origin</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">10</span>);<br>origin.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>origin.readByte();<br>System.out.println(ByteBufUtil.prettyHexDump(origin));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 02 03 04                                        |...             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这时调用 slice 进行切片，无参 slice 是从原始 ByteBuf 的 read index 到 write index 之间的内容进行切片，切片后的 max capacity 被固定为这个区间的大小，因此不能追加 write</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">slice</span> <span class=\"hljs-operator\">=</span> origin.slice();<br>System.out.println(ByteBufUtil.prettyHexDump(slice));<br><span class=\"hljs-comment\">// slice.writeByte(5); 如果执行，会报 IndexOutOfBoundsException 异常</span><br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 02 03 04                                        |...             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>如果原始 ByteBuf 再次读操作（又读了一个字节）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">origin.readByte();<br>System.out.println(ByteBufUtil.prettyHexDump(origin));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 03 04                                           |..              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这时的 slice 不受影响，因为它有独立的读写指针</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(ByteBufUtil.prettyHexDump(slice));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 02 03 04                                        |...             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>如果 slice 的内容发生了更改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">slice.setByte(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);<br>System.out.println(ByteBufUtil.prettyHexDump(slice));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 02 03 05                                        |...             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这时，原始 ByteBuf 也会受影响，因为底层都是同一块内存</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ByteBufUtil</span>.</span></span>pretty<span class=\"hljs-constructor\">HexDump(<span class=\"hljs-params\">origin</span>)</span>);<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 03 05                                           |..              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"10）duplicate\"><a href=\"#10）duplicate\" class=\"headerlink\" title=\"10）duplicate\"></a>10）duplicate</h4><p>【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的</p>\n<p><img src=\"/img/0012.png\"></p>\n<h4 id=\"11）copy\"><a href=\"#11）copy\" class=\"headerlink\" title=\"11）copy\"></a>11）copy</h4><p>会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关</p>\n<h4 id=\"12）CompositeByteBuf\"><a href=\"#12）CompositeByteBuf\" class=\"headerlink\" title=\"12）CompositeByteBuf\"></a>12）CompositeByteBuf</h4><p>【零拷贝】的体现之一，可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免拷贝</p>\n<p>有两个 ByteBuf 如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf1</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);<br>buf1.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;);<br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf2</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);<br>buf2.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;);<br>System.out.println(ByteBufUtil.prettyHexDump(buf1));<br>System.out.println(ByteBufUtil.prettyHexDump(buf2));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05                                  |.....           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 06 07 08 09 0a                                  |.....           |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>现在需要一个新的 ByteBuf，内容来自于刚才的 buf1 和 buf2，如何实现？</p>\n<p>方法1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf3</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT<br>    .buffer(buf1.readableBytes()+buf2.readableBytes());<br>buf3.writeBytes(buf1);<br>buf3.writeBytes(buf2);<br>System.out.println(ByteBufUtil.prettyHexDump(buf3));<br></code></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>这种方法好不好？回答是不太好，因为进行了数据的内存复制操作</p>\n<p>方法2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">CompositeByteBuf</span> <span class=\"hljs-variable\">buf3</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.compositeBuffer();<br><span class=\"hljs-comment\">// true 表示增加新的 ByteBuf 自动递增 write index, 否则 write index 会始终为 0</span><br>buf3.addComponents(<span class=\"hljs-literal\">true</span>, buf1, buf2);<br></code></pre></td></tr></table></figure>\n\n<p>结果是一样的</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>CompositeByteBuf 是一个组合的 ByteBuf，它内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量等信息，代表着整体中某一段的数据。</p>\n<ul>\n<li>优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制</li>\n<li>缺点，复杂了很多，多次操作会带来性能的损耗</li>\n</ul>\n<h4 id=\"13）Unpooled\"><a href=\"#13）Unpooled\" class=\"headerlink\" title=\"13）Unpooled\"></a>13）Unpooled</h4><p>Unpooled 是一个工具类，类如其名，提供了非池化的 ByteBuf 创建、组合、复制等操作</p>\n<p>这里仅介绍其跟【零拷贝】相关的 wrappedBuffer 方法，可以用来包装 ByteBuf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf1</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);<br>buf1.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;);<br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf2</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer(<span class=\"hljs-number\">5</span>);<br>buf2.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;);<br><br><span class=\"hljs-comment\">// 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf</span><br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf3</span> <span class=\"hljs-operator\">=</span> Unpooled.wrappedBuffer(buf1, buf2);<br>System.out.println(ByteBufUtil.prettyHexDump(buf3));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以用来包装普通字节数组，底层也不会有拷贝操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf4</span> <span class=\"hljs-operator\">=</span> Unpooled.wrappedBuffer(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>&#125;);<br>System.out.println(buf4.getClass());<br>System.out.println(ByteBufUtil.prettyHexDump(buf4));<br></code></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">class io.netty.buffer.CompositeByteBuf<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 01 02 03 04 05 06                               |......          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"💡-ByteBuf-优势\"><a href=\"#💡-ByteBuf-优势\" class=\"headerlink\" title=\"💡 ByteBuf 优势\"></a>💡 ByteBuf 优势</h4><ul>\n<li>池化 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能</li>\n<li>读写指针分离，不需要像 ByteBuffer 一样切换读写模式</li>\n<li>可以自动扩容</li>\n<li>支持链式调用，使用更流畅</li>\n<li>很多地方体现零拷贝，例如 slice、duplicate、CompositeByteBuf</li>\n</ul>\n<h2 id=\"4-双向通信\"><a href=\"#4-双向通信\" class=\"headerlink\" title=\"4. 双向通信\"></a>4. 双向通信</h2><h3 id=\"4-1-练习\"><a href=\"#4-1-练习\" class=\"headerlink\" title=\"4.1 练习\"></a>4.1 练习</h3><p>实现一个 echo server</p>\n<p>编写 server</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>()<br>    .group(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>())<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuf) msg;<br>                    System.out.println(buffer.toString(Charset.defaultCharset()));<br><br>                    <span class=\"hljs-comment\">// 建议使用 ctx.alloc() 创建 ByteBuf</span><br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                    response.writeBytes(buffer);<br>                    ctx.writeAndFlush(response);<br><br>                    <span class=\"hljs-comment\">// 思考：需要释放 buffer 吗</span><br>                    <span class=\"hljs-comment\">// 思考：需要释放 response 吗</span><br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).bind(<span class=\"hljs-number\">8080</span>);<br></code></pre></td></tr></table></figure>\n\n<p>编写 client</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br><span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>    .group(group)<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringEncoder</span>());<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> (ByteBuf) msg;<br>                    System.out.println(buffer.toString(Charset.defaultCharset()));<br><br>                    <span class=\"hljs-comment\">// 思考：需要释放 buffer 吗</span><br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br><br>channel.closeFuture().addListener(future -&gt; &#123;<br>    group.shutdownGracefully();<br>&#125;);<br><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">line</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;q&quot;</span>.equals(line)) &#123;<br>            channel.close();<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>        channel.writeAndFlush(line);<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"💡-读和写的误解\"><a href=\"#💡-读和写的误解\" class=\"headerlink\" title=\"💡 读和写的误解\"></a>💡 读和写的误解</h3><p>我最初在认识上有这样的误区，认为只有在 netty，nio 这样的多路复用 IO 模型时，读写才不会相互阻塞，才可以实现高效的双向通信，但实际上，Java Socket 是全双工的：在任意时刻，线路上存在<code>A 到 B</code> 和 <code>B 到 A</code> 的双向信号传输。即使是阻塞 IO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读</p>\n<p>例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">ServerSocket</span> <span class=\"hljs-variable\">ss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerSocket</span>(<span class=\"hljs-number\">8888</span>);<br>        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> ss.accept();<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(s.getInputStream()));<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                    System.out.println(reader.readLine());<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">BufferedWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedWriter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutputStreamWriter</span>(s.getOutputStream()));<br>                <span class=\"hljs-comment\">// 例如在这个位置加入 thread 级别断点，可以发现即使不写入数据，也不妨碍前面线程读取客户端数据</span><br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>                    writer.write(String.valueOf(i));<br>                    writer.newLine();<br>                    writer.flush();<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8888</span>);<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(s.getInputStream()));<br>                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                    System.out.println(reader.readLine());<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">BufferedWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedWriter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutputStreamWriter</span>(s.getOutputStream()));<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>                    writer.write(String.valueOf(i));<br>                    writer.newLine();<br>                    writer.flush();<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"Netty03-进阶","date":"2023-05-06T13:25:02.000Z","_content":"\n该笔记是B站黑马的Netty视频的配套笔记3。\n<!-- more -->\n# 三. Netty 进阶\n\n## 1. 粘包与半包\n\n### 1.1 粘包现象\n\n服务端代码\n\n```java\npublic class HelloWorldServer {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldServer.class);\n    void start() {\n        NioEventLoopGroup boss = new NioEventLoopGroup(1);\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.channel(NioServerSocketChannel.class);\n            serverBootstrap.group(boss, worker);\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"connected {}\", ctx.channel());\n                            super.channelActive(ctx);\n                        }\n\n                        @Override\n                        public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"disconnect {}\", ctx.channel());\n                            super.channelInactive(ctx);\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = serverBootstrap.bind(8080);\n            log.debug(\"{} binding...\", channelFuture.channel());\n            channelFuture.sync();\n            log.debug(\"{} bound...\", channelFuture.channel());\n            channelFuture.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            log.error(\"server error\", e);\n        } finally {\n            boss.shutdownGracefully();\n            worker.shutdownGracefully();\n            log.debug(\"stoped\");\n        }\n    }\n\n    public static void main(String[] args) {\n        new HelloWorldServer().start();\n    }\n}\n```\n\n客户端代码希望发送 10 个消息，每个消息是 16 字节\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n    public static void main(String[] args) {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"connetted...\");\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            Random r = new Random();\n                            char c = 'a';\n                            for (int i = 0; i < 10; i++) {\n                                ByteBuf buffer = ctx.alloc().buffer();\n                                buffer.writeBytes(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});\n                                ctx.writeAndFlush(buffer);\n                            }\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 8080).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n服务器端的某次输出，可以看到一次就接收了 160 个字节，而非分 10 次接收\n\n```\n08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5] binding...\n08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5, L:/0:0:0:0:0:0:0:0:8080] bound...\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] REGISTERED\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] ACTIVE\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177]\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ: 160B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000010| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000020| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000030| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000040| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000050| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000060| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000070| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000080| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000090| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n+--------+-------------------------------------------------+----------------+\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ COMPLETE\n```\n\n\n\n### 1.2 半包现象\n\n客户端代码希望发送 1 个消息，这个消息是 160 字节，代码改为\n\n```java\nByteBuf buffer = ctx.alloc().buffer();\nfor (int i = 0; i < 10; i++) {\n    buffer.writeBytes(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});\n}\nctx.writeAndFlush(buffer);\n```\n\n为现象明显，服务端修改一下接收缓冲区，其它代码不变\n\n```java\nserverBootstrap.option(ChannelOption.SO_RCVBUF, 10);\n```\n\n服务器端的某次输出，可以看到接收的消息被分为两节，第一次 20 字节，第二次 140 字节\n\n```\n08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84] binding...\n08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84, L:/0:0:0:0:0:0:0:0:8080] bound...\n08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] REGISTERED\n08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] ACTIVE\n08:44:23 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221]\n08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 20B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000010| 00 01 02 03                                     |....            |\n+--------+-------------------------------------------------+----------------+\n08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE\n08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 140B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000010| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000020| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000030| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000040| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000050| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000060| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000070| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000080| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f             |............    |\n+--------+-------------------------------------------------+----------------+\n08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE\n```\n\n> **注意**\n>\n> serverBootstrap.option(ChannelOption.SO_RCVBUF, 10) 影响的底层接收缓冲区（即滑动窗口）大小，仅决定了 netty 读取的最小单位，netty 实际每次读取的一般是它的整数倍\n\n\n\n### 1.3 现象分析\n\n粘包\n\n* 现象，发送 abc def，接收 abcdef\n* 原因\n  * 应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）\n  * 滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包\n  * Nagle 算法：会造成粘包\n\n半包\n\n* 现象，发送 abcdef，接收 abc def\n* 原因\n  * 应用层：接收方 ByteBuf 小于实际发送数据量\n  * 滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包\n  * MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包\n\n\n\n本质是因为 TCP 是流式协议，消息无边界\n\n\n\n> 滑动窗口\n>\n> * TCP 以一个段（segment）为单位，每发送一个段就需要进行一次确认应答（ack）处理，但如果这么做，缺点是包的往返时间越长性能就越差\n>\n>   ![](img/0049.png)\n>\n> \n>\n> * 为了解决此问题，引入了窗口概念，窗口大小即决定了无需等待应答而可以继续发送的数据最大值\n>\n>   ![](img/0051.png)\n>\n> * 窗口实际就起到一个缓冲区的作用，同时也能起到流量控制的作用\n>\n>   * 图中深色的部分即要发送的数据，高亮的部分即窗口\n>   * 窗口内的数据才允许被发送，当应答未到达前，窗口必须停止滑动\n>   * 如果 1001~2000 这个段的数据 ack 回来了，窗口就可以向前滑动\n>   * 接收方也会维护一个窗口，只有落在窗口内的数据才能允许接收\n>\n\n\n\n>  MSS 限制\n>\n>  * 链路层对一次能够发送的最大数据有限制，这个限制称之为 MTU（maximum transmission unit），不同的链路设备的 MTU 值也有所不同，例如\n>\n>   * 以太网的 MTU 是 1500\n>   * FDDI（光纤分布式数据接口）的 MTU 是 4352\n>   * 本地回环地址的 MTU 是 65535 - 本地测试不走网卡\n>\n>  * MSS 是最大段长度（maximum segment size），它是 MTU 刨去 tcp 头和 ip 头后剩余能够作为数据传输的字节数\n>\n>   * ipv4 tcp 头占用 20 bytes，ip 头占用 20 bytes，因此以太网 MSS 的值为 1500 - 40 = 1460\n>   * TCP 在传递大量数据时，会按照 MSS 大小将数据进行分割发送\n>   * MSS 的值在三次握手时通知对方自己 MSS 的值，然后在两者之间选择一个小值作为 MSS\n>\n>   <img src=\"img/0031.jpg\" style=\"zoom:50%;\" />\n\n\n\n> Nagle 算法\n>\n> * 即使发送一个字节，也需要加入 tcp 头和 ip 头，也就是总字节数会使用 41 bytes，非常不经济。因此为了提高网络利用率，tcp 希望尽可能发送足够大的数据，这就是 Nagle 算法产生的缘由\n> * 该算法是指发送端即使还有应该发送的数据，但如果这部分数据很少的话，则进行延迟发送\n>   * 如果 SO_SNDBUF 的数据达到 MSS，则需要发送\n>   * 如果 SO_SNDBUF 中含有 FIN（表示需要连接关闭）这时将剩余数据发送，再关闭\n>   * 如果 TCP_NODELAY = true，则需要发送\n>   * 已发送的数据都收到 ack 时，则需要发送\n>   * 上述条件不满足，但发生超时（一般为 200ms）则需要发送\n>   * 除上述情况，延迟发送\n\n\n\n### 1.4 解决方案\n\n1. 短链接，发一个包建立一次连接，这样连接建立到连接断开之间就是消息的边界，缺点效率太低\n2. 每一条消息采用固定长度，缺点浪费空间\n3. 每一条消息采用分隔符，例如 \\n，缺点需要转义\n4. 每一条消息分为 head 和 body，head 中包含 body 的长度\n\n\n\n#### 方法1，短链接\n\n以解决粘包为例\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n\n    public static void main(String[] args) {\n        // 分 10 次发送\n        for (int i = 0; i < 10; i++) {\n            send();\n        }\n    }\n\n    private static void send() {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"conneted...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            ByteBuf buffer = ctx.alloc().buffer();\n                            buffer.writeBytes(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});\n                            ctx.writeAndFlush(buffer);\n                            // 发完即关\n                            ctx.close();\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 8080).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n输出，略\n\n> 半包用这种办法还是不好解决，因为接收方的缓冲区大小是有限的\n\n\n\n#### 方法2，固定长度\n\n让所有数据包长度固定（假设长度为 8 字节），服务器端加入\n\n```java\nch.pipeline().addLast(new FixedLengthFrameDecoder(8));\n```\n\n客户端测试代码，注意, 采用这种方法后，客户端什么时候 flush 都可以\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n\n    public static void main(String[] args) {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"connetted...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            // 发送内容随机的数据包\n                            Random r = new Random();\n                            char c = 'a';\n                            ByteBuf buffer = ctx.alloc().buffer();\n                            for (int i = 0; i < 10; i++) {\n                                byte[] bytes = new byte[8];\n                                for (int j = 0; j < r.nextInt(8); j++) {\n                                    bytes[j] = (byte) c;\n                                }\n                                c++;\n                                buffer.writeBytes(bytes);\n                            }\n                            ctx.writeAndFlush(buffer);\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"192.168.0.103\", 9090).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n客户端输出\n\n```\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] REGISTERED\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] CONNECT: /192.168.0.103:9090\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] ACTIVE\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] WRITE: 80B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 61 61 61 00 00 00 00 62 00 00 00 00 00 00 00 |aaaa....b.......|\n|00000010| 63 63 00 00 00 00 00 00 64 00 00 00 00 00 00 00 |cc......d.......|\n|00000020| 00 00 00 00 00 00 00 00 66 66 66 66 00 00 00 00 |........ffff....|\n|00000030| 67 67 67 00 00 00 00 00 68 00 00 00 00 00 00 00 |ggg.....h.......|\n|00000040| 69 69 69 69 69 00 00 00 6a 6a 6a 6a 00 00 00 00 |iiiii...jjjj....|\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] FLUSH\n```\n\n服务端输出\n\n```\n12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f] binding...\n12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f, L:/192.168.0.103:9090] bound...\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] REGISTERED\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] ACTIVE\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155]\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 61 61 61 00 00 00 00                         |aaaa....        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 62 00 00 00 00 00 00 00                         |b.......        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 63 63 00 00 00 00 00 00                         |cc......        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 64 00 00 00 00 00 00 00                         |d.......        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 00 00 00 00 00                         |........        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 66 66 66 00 00 00 00                         |ffff....        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 67 67 67 00 00 00 00 00                         |ggg.....        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 00 00 00 00 00 00 00                         |h.......        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 69 69 69 69 69 00 00 00                         |iiiii...        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6a 6a 6a 6a 00 00 00 00                         |jjjj....        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ COMPLETE\n```\n\n缺点是，数据包的大小不好把握\n\n* 长度定的太大，浪费\n* 长度定的太小，对某些数据包又显得不够\n\n\n\n#### 方法3，固定分隔符\n\n服务端加入，默认以 \\n 或 \\r\\n 作为分隔符，如果超出指定长度仍未出现分隔符，则抛出异常\n\n```java\nch.pipeline().addLast(new LineBasedFrameDecoder(1024));\n```\n\n客户端在每条消息之后，加入 \\n 分隔符\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n\n    public static void main(String[] args) {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"connetted...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            Random r = new Random();\n                            char c = 'a';\n                            ByteBuf buffer = ctx.alloc().buffer();\n                            for (int i = 0; i < 10; i++) {\n                                for (int j = 1; j <= r.nextInt(16)+1; j++) {\n                                    buffer.writeByte((byte) c);\n                                }\n                                buffer.writeByte(10);\n                                c++;\n                            }\n                            ctx.writeAndFlush(buffer);\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"192.168.0.103\", 9090).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n客户端输出\n\n```\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] REGISTERED\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] CONNECT: /192.168.0.103:9090\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] ACTIVE\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] WRITE: 60B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 0a 62 62 62 0a 63 63 63 0a 64 64 0a 65 65 65 |a.bbb.ccc.dd.eee|\n|00000010| 65 65 65 65 65 65 65 0a 66 66 0a 67 67 67 67 67 |eeeeeee.ff.ggggg|\n|00000020| 67 67 0a 68 68 68 68 0a 69 69 69 69 69 69 69 0a |gg.hhhh.iiiiiii.|\n|00000030| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 0a             |jjjjjjjjjjj.    |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] FLUSH\n```\n\n\n\n服务端输出\n\n```\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] c.i.n.HelloWorldServer - connected [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641]\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 1B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61                                              |a               |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 62 62 62                                        |bbb             |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 63 63 63                                        |ccc             |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 64 64                                           |dd              |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 10B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 65 65 65 65 65 65 65 65 65 65                   |eeeeeeeeee      |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 66                                           |ff              |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 67 67 67 67 67 67 67                            |ggggggg         |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 68 68 68                                     |hhhh            |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 69 69 69 69 69 69 69                            |iiiiiii         |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 11B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a                |jjjjjjjjjjj     |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ COMPLETE\n```\n\n缺点，处理字符数据比较合适，但如果内容本身包含了分隔符（字节数据常常会有此情况），那么就会解析错误\n\n\n\n#### 方法4，预设长度\n\n在发送消息前，先约定用定长字节表示接下来数据的长度\n\n```java\n// 最大长度，长度偏移，长度占用字节，长度调整，剥离字节数\nch.pipeline().addLast(new LengthFieldBasedFrameDecoder(1024, 0, 1, 0, 1));\n```\n\n客户端代码\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n\n    public static void main(String[] args) {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"connetted...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            Random r = new Random();\n                            char c = 'a';\n                            ByteBuf buffer = ctx.alloc().buffer();\n                            for (int i = 0; i < 10; i++) {\n                                byte length = (byte) (r.nextInt(16) + 1);\n                                // 先写入长度\n                                buffer.writeByte(length);\n                                // 再\n                                for (int j = 1; j <= length; j++) {\n                                    buffer.writeByte((byte) c);\n                                }\n                                c++;\n                            }\n                            ctx.writeAndFlush(buffer);\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"192.168.0.103\", 9090).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n\n\n客户端输出\n\n```\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] REGISTERED\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] CONNECT: /192.168.0.103:9090\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] ACTIVE\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] WRITE: 97B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 09 61 61 61 61 61 61 61 61 61 09 62 62 62 62 62 |.aaaaaaaaa.bbbbb|\n|00000010| 62 62 62 62 06 63 63 63 63 63 63 08 64 64 64 64 |bbbb.cccccc.dddd|\n|00000020| 64 64 64 64 0f 65 65 65 65 65 65 65 65 65 65 65 |dddd.eeeeeeeeeee|\n|00000030| 65 65 65 65 0d 66 66 66 66 66 66 66 66 66 66 66 |eeee.fffffffffff|\n|00000040| 66 66 02 67 67 02 68 68 0e 69 69 69 69 69 69 69 |ff.gg.hh.iiiiiii|\n|00000050| 69 69 69 69 69 69 69 09 6a 6a 6a 6a 6a 6a 6a 6a |iiiiiii.jjjjjjjj|\n|00000060| 6a                                              |j               |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] FLUSH\n```\n\n\n\n服务端输出\n\n```\n14:36:50 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3] binding...\n14:36:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3, L:/192.168.0.103:9090] bound...\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] REGISTERED\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] ACTIVE\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979]\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 61 61 61 61 61 61 61 61                      |aaaaaaaaa       |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 62 62 62 62 62 62 62 62 62                      |bbbbbbbbb       |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 63 63 63 63 63 63                               |cccccc          |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 64 64 64 64 64 64 64 64                         |dddddddd        |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 15B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65    |eeeeeeeeeeeeeee |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 13B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 66 66 66 66 66 66 66 66 66 66 66 66          |fffffffffffff   |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 67 67                                           |gg              |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 68                                           |hh              |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 14B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 69 69 69 69 69 69 69 69 69 69 69 69 69 69       |iiiiiiiiiiiiii  |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a                      |jjjjjjjjj       |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ COMPLETE\n\n```\n\n\n\n## 2. 协议设计与解析\n\n### 2.1 为什么需要协议？\n\nTCP/IP 中消息传输基于流的方式，没有边界。\n\n协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则\n\n例如：在网络上传输\n\n```\n下雨天留客天留我不留\n```\n\n是中文一句著名的无标点符号句子，在没有标点符号情况下，这句话有数种拆解方式，而意思却是完全不同，所以常被用作讲述标点符号的重要性\n\n一种解读\n\n```\n下雨天留客，天留，我不留\n```\n\n另一种解读\n\n```\n下雨天，留客天，留我不？留\n```\n\n\n\n如何设计协议呢？其实就是给网络传输的信息加上“标点符号”。但通过分隔符来断句不是很好，因为分隔符本身如果用于传输，那么必须加以区分。因此，下面一种协议较为常用\n\n``` \n定长字节表示内容长度 + 实际内容\n```\n\n例如，假设一个中文字符长度为 3，按照上述协议的规则，发送信息方式如下，就不会被接收方弄错意思了\n\n```\n0f下雨天留客06天留09我不留\n```\n\n\n\n> 小故事\n>\n> 很久很久以前，一位私塾先生到一家任教。双方签订了一纸协议：“无鸡鸭亦可无鱼肉亦可白菜豆腐不可少不得束修金”。此后，私塾先生虽然认真教课，但主人家则总是给私塾先生以白菜豆腐为菜，丝毫未见鸡鸭鱼肉的款待。私塾先生先是很不解，可是后来也就想通了：主人把鸡鸭鱼肉的钱都会换为束修金的，也罢。至此双方相安无事。\n>\n> 年关将至，一个学年段亦告结束。私塾先生临行时，也不见主人家为他交付束修金，遂与主家理论。然主家亦振振有词：“有协议为证——无鸡鸭亦可，无鱼肉亦可，白菜豆腐不可少，不得束修金。这白纸黑字明摆着的，你有什么要说的呢？”\n>\n> 私塾先生据理力争：“协议是这样的——无鸡，鸭亦可；无鱼，肉亦可；白菜豆腐不可，少不得束修金。”\n>\n> 双方唇枪舌战，你来我往，真个是不亦乐乎！\n>\n> 这里的束修金，也作“束脩”，应当是泛指教师应当得到的报酬\n\n\n\n### 2.2 redis 协议举例\n\n```java\nNioEventLoopGroup worker = new NioEventLoopGroup();\nbyte[] LINE = {13, 10};\ntry {\n    Bootstrap bootstrap = new Bootstrap();\n    bootstrap.channel(NioSocketChannel.class);\n    bootstrap.group(worker);\n    bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        protected void initChannel(SocketChannel ch) {\n            ch.pipeline().addLast(new LoggingHandler());\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                // 会在连接 channel 建立成功后，会触发 active 事件\n                @Override\n                public void channelActive(ChannelHandlerContext ctx) {\n                    set(ctx);\n                    get(ctx);\n                }\n                private void get(ChannelHandlerContext ctx) {\n                    ByteBuf buf = ctx.alloc().buffer();\n                    buf.writeBytes(\"*2\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"get\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"aaa\".getBytes());\n                    buf.writeBytes(LINE);\n                    ctx.writeAndFlush(buf);\n                }\n                private void set(ChannelHandlerContext ctx) {\n                    ByteBuf buf = ctx.alloc().buffer();\n                    buf.writeBytes(\"*3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"set\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"aaa\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"bbb\".getBytes());\n                    buf.writeBytes(LINE);\n                    ctx.writeAndFlush(buf);\n                }\n\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n                    ByteBuf buf = (ByteBuf) msg;\n                    System.out.println(buf.toString(Charset.defaultCharset()));\n                }\n            });\n        }\n    });\n    ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 6379).sync();\n    channelFuture.channel().closeFuture().sync();\n} catch (InterruptedException e) {\n    log.error(\"client error\", e);\n} finally {\n    worker.shutdownGracefully();\n}\n```\n\n\n\n### 2.3 http 协议举例\n\n```java\nNioEventLoopGroup boss = new NioEventLoopGroup();\nNioEventLoopGroup worker = new NioEventLoopGroup();\ntry {\n    ServerBootstrap serverBootstrap = new ServerBootstrap();\n    serverBootstrap.channel(NioServerSocketChannel.class);\n    serverBootstrap.group(boss, worker);\n    serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        protected void initChannel(SocketChannel ch) throws Exception {\n            ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n            ch.pipeline().addLast(new HttpServerCodec());\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<HttpRequest>() {\n                @Override\n                protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {\n                    // 获取请求\n                    log.debug(msg.uri());\n\n                    // 返回响应\n                    DefaultFullHttpResponse response =\n                            new DefaultFullHttpResponse(msg.protocolVersion(), HttpResponseStatus.OK);\n\n                    byte[] bytes = \"<h1>Hello, world!</h1>\".getBytes();\n\n                    response.headers().setInt(CONTENT_LENGTH, bytes.length);\n                    response.content().writeBytes(bytes);\n\n                    // 写回响应\n                    ctx.writeAndFlush(response);\n                }\n            });\n            /*ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n                    log.debug(\"{}\", msg.getClass());\n\n                    if (msg instanceof HttpRequest) { // 请求行，请求头\n\n                    } else if (msg instanceof HttpContent) { //请求体\n\n                    }\n                }\n            });*/\n        }\n    });\n    ChannelFuture channelFuture = serverBootstrap.bind(8080).sync();\n    channelFuture.channel().closeFuture().sync();\n} catch (InterruptedException e) {\n    log.error(\"server error\", e);\n} finally {\n    boss.shutdownGracefully();\n    worker.shutdownGracefully();\n}\n```\n\n\n\n### 2.4 自定义协议要素\n\n* 魔数，用来在第一时间判定是否是无效数据包\n* 版本号，可以支持协议的升级\n* 序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk\n* 指令类型，是登录、注册、单聊、群聊... 跟业务相关\n* 请求序号，为了双工通信，提供异步能力\n* 正文长度\n* 消息正文\n\n\n\n#### 编解码器\n\n根据上面的要素，设计一个登录请求消息和登录响应消息，并使用 Netty 完成收发\n\n```java\n@Slf4j\npublic class MessageCodec extends ByteToMessageCodec<Message> {\n\n    @Override\n    protected void encode(ChannelHandlerContext ctx, Message msg, ByteBuf out) throws Exception {\n        // 1. 4 字节的魔数\n        out.writeBytes(new byte[]{1, 2, 3, 4});\n        // 2. 1 字节的版本,\n        out.writeByte(1);\n        // 3. 1 字节的序列化方式 jdk 0 , json 1\n        out.writeByte(0);\n        // 4. 1 字节的指令类型\n        out.writeByte(msg.getMessageType());\n        // 5. 4 个字节\n        out.writeInt(msg.getSequenceId());\n        // 无意义，对齐填充\n        out.writeByte(0xff);\n        // 6. 获取内容的字节数组\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(msg);\n        byte[] bytes = bos.toByteArray();\n        // 7. 长度\n        out.writeInt(bytes.length);\n        // 8. 写入内容\n        out.writeBytes(bytes);\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        int magicNum = in.readInt();\n        byte version = in.readByte();\n        byte serializerType = in.readByte();\n        byte messageType = in.readByte();\n        int sequenceId = in.readInt();\n        in.readByte();\n        int length = in.readInt();\n        byte[] bytes = new byte[length];\n        in.readBytes(bytes, 0, length);\n        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));\n        Message message = (Message) ois.readObject();\n        log.debug(\"{}, {}, {}, {}, {}, {}\", magicNum, version, serializerType, messageType, sequenceId, length);\n        log.debug(\"{}\", message);\n        out.add(message);\n    }\n}\n```\n\n测试\n\n```java\nEmbeddedChannel channel = new EmbeddedChannel(\n    new LoggingHandler(),\n    new LengthFieldBasedFrameDecoder(\n        1024, 12, 4, 0, 0),\n    new MessageCodec()\n);\n// encode\nLoginRequestMessage message = new LoginRequestMessage(\"zhangsan\", \"123\", \"张三\");\n//        channel.writeOutbound(message);\n// decode\nByteBuf buf = ByteBufAllocator.DEFAULT.buffer();\nnew MessageCodec().encode(null, message, buf);\n\nByteBuf s1 = buf.slice(0, 100);\nByteBuf s2 = buf.slice(100, buf.readableBytes() - 100);\ns1.retain(); // 引用计数 2\nchannel.writeInbound(s1); // release 1\nchannel.writeInbound(s2);\n```\n\n\n\n解读\n\n![](img/0013.png)\n\n\n\n#### 💡 什么时候可以加 @Sharable\n\n* 当 handler 不保存状态时，就可以安全地在多线程下被共享\n* 但要注意对于编解码器类，不能继承 ByteToMessageCodec 或 CombinedChannelDuplexHandler 父类，他们的构造方法对 @Sharable 有限制\n* 如果能确保编解码器不会保存状态，可以继承 MessageToMessageCodec 父类\n\n```java\n@Slf4j\n@ChannelHandler.Sharable\n/**\n * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的\n */\npublic class MessageCodecSharable extends MessageToMessageCodec<ByteBuf, Message> {\n    @Override\n    protected void encode(ChannelHandlerContext ctx, Message msg, List<Object> outList) throws Exception {\n        ByteBuf out = ctx.alloc().buffer();\n        // 1. 4 字节的魔数\n        out.writeBytes(new byte[]{1, 2, 3, 4});\n        // 2. 1 字节的版本,\n        out.writeByte(1);\n        // 3. 1 字节的序列化方式 jdk 0 , json 1\n        out.writeByte(0);\n        // 4. 1 字节的指令类型\n        out.writeByte(msg.getMessageType());\n        // 5. 4 个字节\n        out.writeInt(msg.getSequenceId());\n        // 无意义，对齐填充\n        out.writeByte(0xff);\n        // 6. 获取内容的字节数组\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(msg);\n        byte[] bytes = bos.toByteArray();\n        // 7. 长度\n        out.writeInt(bytes.length);\n        // 8. 写入内容\n        out.writeBytes(bytes);\n        outList.add(out);\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        int magicNum = in.readInt();\n        byte version = in.readByte();\n        byte serializerType = in.readByte();\n        byte messageType = in.readByte();\n        int sequenceId = in.readInt();\n        in.readByte();\n        int length = in.readInt();\n        byte[] bytes = new byte[length];\n        in.readBytes(bytes, 0, length);\n        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));\n        Message message = (Message) ois.readObject();\n        log.debug(\"{}, {}, {}, {}, {}, {}\", magicNum, version, serializerType, messageType, sequenceId, length);\n        log.debug(\"{}\", message);\n        out.add(message);\n    }\n}\n```\n\n\n\n## 3. 聊天室案例\n\n### 3.1 聊天室业务介绍\n\n```java\n/**\n * 用户管理接口\n */\npublic interface UserService {\n\n    /**\n     * 登录\n     * @param username 用户名\n     * @param password 密码\n     * @return 登录成功返回 true, 否则返回 false\n     */\n    boolean login(String username, String password);\n}\n```\n\n\n\n```java\n/**\n * 会话管理接口\n */\npublic interface Session {\n\n    /**\n     * 绑定会话\n     * @param channel 哪个 channel 要绑定会话\n     * @param username 会话绑定用户\n     */\n    void bind(Channel channel, String username);\n\n    /**\n     * 解绑会话\n     * @param channel 哪个 channel 要解绑会话\n     */\n    void unbind(Channel channel);\n\n    /**\n     * 获取属性\n     * @param channel 哪个 channel\n     * @param name 属性名\n     * @return 属性值\n     */\n    Object getAttribute(Channel channel, String name);\n\n    /**\n     * 设置属性\n     * @param channel 哪个 channel\n     * @param name 属性名\n     * @param value 属性值\n     */\n    void setAttribute(Channel channel, String name, Object value);\n\n    /**\n     * 根据用户名获取 channel\n     * @param username 用户名\n     * @return channel\n     */\n    Channel getChannel(String username);\n}\n```\n\n\n\n```java\n/**\n * 聊天组会话管理接口\n */\npublic interface GroupSession {\n\n    /**\n     * 创建一个聊天组, 如果不存在才能创建成功, 否则返回 null\n     * @param name 组名\n     * @param members 成员\n     * @return 成功时返回组对象, 失败返回 null\n     */\n    Group createGroup(String name, Set<String> members);\n\n    /**\n     * 加入聊天组\n     * @param name 组名\n     * @param member 成员名\n     * @return 如果组不存在返回 null, 否则返回组对象\n     */\n    Group joinMember(String name, String member);\n\n    /**\n     * 移除组成员\n     * @param name 组名\n     * @param member 成员名\n     * @return 如果组不存在返回 null, 否则返回组对象\n     */\n    Group removeMember(String name, String member);\n\n    /**\n     * 移除聊天组\n     * @param name 组名\n     * @return 如果组不存在返回 null, 否则返回组对象\n     */\n    Group removeGroup(String name);\n\n    /**\n     * 获取组成员\n     * @param name 组名\n     * @return 成员集合, 没有成员会返回 empty set\n     */\n    Set<String> getMembers(String name);\n\n    /**\n     * 获取组成员的 channel 集合, 只有在线的 channel 才会返回\n     * @param name 组名\n     * @return 成员 channel 集合\n     */\n    List<Channel> getMembersChannel(String name);\n}\n```\n\n\n\n### 3.2 聊天室业务-登录\n\n```java\n@Slf4j\npublic class ChatServer {\n    public static void main(String[] args) {\n        NioEventLoopGroup boss = new NioEventLoopGroup();\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.channel(NioServerSocketChannel.class);\n            serverBootstrap.group(boss, worker);\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(new SimpleChannelInboundHandler<LoginRequestMessage>() {\n                        @Override\n                        protected void channelRead0(ChannelHandlerContext ctx, LoginRequestMessage msg) throws Exception {\n                            String username = msg.getUsername();\n                            String password = msg.getPassword();\n                            boolean login = UserServiceFactory.getUserService().login(username, password);\n                            LoginResponseMessage message;\n                            if(login) {\n                                message = new LoginResponseMessage(true, \"登录成功\");\n                            } else {\n                                message = new LoginResponseMessage(false, \"用户名或密码不正确\");\n                            }\n                            ctx.writeAndFlush(message);\n                        }\n                    });\n                }\n            });\n            Channel channel = serverBootstrap.bind(8080).sync().channel();\n            channel.closeFuture().sync();\n        } catch (InterruptedException e) {\n            log.error(\"server error\", e);\n        } finally {\n            boss.shutdownGracefully();\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n\n\n```java\n@Slf4j\npublic class ChatClient {\n    public static void main(String[] args) {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        CountDownLatch WAIT_FOR_LOGIN = new CountDownLatch(1);\n        AtomicBoolean LOGIN = new AtomicBoolean(false);\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(group);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n//                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(\"client handler\", new ChannelInboundHandlerAdapter() {\n                        // 接收响应消息\n                        @Override\n                        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n                            log.debug(\"msg: {}\", msg);\n                            if ((msg instanceof LoginResponseMessage)) {\n                                LoginResponseMessage response = (LoginResponseMessage) msg;\n                                if (response.isSuccess()) {\n                                    // 如果登录成功\n                                    LOGIN.set(true);\n                                }\n                                // 唤醒 system in 线程\n                                WAIT_FOR_LOGIN.countDown();\n                            }\n                        }\n\n                        // 在连接建立后触发 active 事件\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            // 负责接收用户在控制台的输入，负责向服务器发送各种消息\n                            new Thread(() -> {\n                                Scanner scanner = new Scanner(System.in);\n                                System.out.println(\"请输入用户名:\");\n                                String username = scanner.nextLine();\n                                System.out.println(\"请输入密码:\");\n                                String password = scanner.nextLine();\n                                // 构造消息对象\n                                LoginRequestMessage message = new LoginRequestMessage(username, password);\n                                // 发送消息\n                                ctx.writeAndFlush(message);\n                                System.out.println(\"等待后续操作...\");\n                                try {\n                                    WAIT_FOR_LOGIN.await();\n                                } catch (InterruptedException e) {\n                                    e.printStackTrace();\n                                }\n                                // 如果登录失败\n                                if (!LOGIN.get()) {\n                                    ctx.channel().close();\n                                    return;\n                                }\n                                while (true) {\n                                    System.out.println(\"==================================\");\n                                    System.out.println(\"send [username] [content]\");\n                                    System.out.println(\"gsend [group name] [content]\");\n                                    System.out.println(\"gcreate [group name] [m1,m2,m3...]\");\n                                    System.out.println(\"gmembers [group name]\");\n                                    System.out.println(\"gjoin [group name]\");\n                                    System.out.println(\"gquit [group name]\");\n                                    System.out.println(\"quit\");\n                                    System.out.println(\"==================================\");\n                                    String command = scanner.nextLine();\n                                    String[] s = command.split(\" \");\n                                    switch (s[0]){\n                                        case \"send\":\n                                            ctx.writeAndFlush(new ChatRequestMessage(username, s[1], s[2]));\n                                            break;\n                                        case \"gsend\":\n                                            ctx.writeAndFlush(new GroupChatRequestMessage(username, s[1], s[2]));\n                                            break;\n                                        case \"gcreate\":\n                                            Set<String> set = new HashSet<>(Arrays.asList(s[2].split(\",\")));\n                                            set.add(username); // 加入自己\n                                            ctx.writeAndFlush(new GroupCreateRequestMessage(s[1], set));\n                                            break;\n                                        case \"gmembers\":\n                                            ctx.writeAndFlush(new GroupMembersRequestMessage(s[1]));\n                                            break;\n                                        case \"gjoin\":\n                                            ctx.writeAndFlush(new GroupJoinRequestMessage(username, s[1]));\n                                            break;\n                                        case \"gquit\":\n                                            ctx.writeAndFlush(new GroupQuitRequestMessage(username, s[1]));\n                                            break;\n                                        case \"quit\":\n                                            ctx.channel().close();\n                                            return;\n                                    }\n                                }\n                            }, \"system in\").start();\n                        }\n                    });\n                }\n            });\n            Channel channel = bootstrap.connect(\"localhost\", 8080).sync().channel();\n            channel.closeFuture().sync();\n        } catch (Exception e) {\n            log.error(\"client error\", e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n\n\n### 3.3 聊天室业务-单聊\n\n服务器端将 handler 独立出来\n\n登录 handler\n\n```java\n@ChannelHandler.Sharable\npublic class LoginRequestMessageHandler extends SimpleChannelInboundHandler<LoginRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, LoginRequestMessage msg) throws Exception {\n        String username = msg.getUsername();\n        String password = msg.getPassword();\n        boolean login = UserServiceFactory.getUserService().login(username, password);\n        LoginResponseMessage message;\n        if(login) {\n            SessionFactory.getSession().bind(ctx.channel(), username);\n            message = new LoginResponseMessage(true, \"登录成功\");\n        } else {\n            message = new LoginResponseMessage(false, \"用户名或密码不正确\");\n        }\n        ctx.writeAndFlush(message);\n    }\n}\n```\n\n单聊 handler\n\n```java\n@ChannelHandler.Sharable\npublic class ChatRequestMessageHandler extends SimpleChannelInboundHandler<ChatRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, ChatRequestMessage msg) throws Exception {\n        String to = msg.getTo();\n        Channel channel = SessionFactory.getSession().getChannel(to);\n        // 在线\n        if(channel != null) {\n            channel.writeAndFlush(new ChatResponseMessage(msg.getFrom(), msg.getContent()));\n        }\n        // 不在线\n        else {\n            ctx.writeAndFlush(new ChatResponseMessage(false, \"对方用户不存在或者不在线\"));\n        }\n    }\n}\n```\n\n\n\n### 3.4 聊天室业务-群聊\n\n创建群聊\n\n```java\n@ChannelHandler.Sharable\npublic class GroupCreateRequestMessageHandler extends SimpleChannelInboundHandler<GroupCreateRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupCreateRequestMessage msg) throws Exception {\n        String groupName = msg.getGroupName();\n        Set<String> members = msg.getMembers();\n        // 群管理器\n        GroupSession groupSession = GroupSessionFactory.getGroupSession();\n        Group group = groupSession.createGroup(groupName, members);\n        if (group == null) {\n            // 发生成功消息\n            ctx.writeAndFlush(new GroupCreateResponseMessage(true, groupName + \"创建成功\"));\n            // 发送拉群消息\n            List<Channel> channels = groupSession.getMembersChannel(groupName);\n            for (Channel channel : channels) {\n                channel.writeAndFlush(new GroupCreateResponseMessage(true, \"您已被拉入\" + groupName));\n            }\n        } else {\n            ctx.writeAndFlush(new GroupCreateResponseMessage(false, groupName + \"已经存在\"));\n        }\n    }\n}\n```\n\n群聊\n\n```java\n@ChannelHandler.Sharable\npublic class GroupChatRequestMessageHandler extends SimpleChannelInboundHandler<GroupChatRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupChatRequestMessage msg) throws Exception {\n        List<Channel> channels = GroupSessionFactory.getGroupSession()\n                .getMembersChannel(msg.getGroupName());\n\n        for (Channel channel : channels) {\n            channel.writeAndFlush(new GroupChatResponseMessage(msg.getFrom(), msg.getContent()));\n        }\n    }\n}\n```\n\n加入群聊\n\n```java\n@ChannelHandler.Sharable\npublic class GroupJoinRequestMessageHandler extends SimpleChannelInboundHandler<GroupJoinRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupJoinRequestMessage msg) throws Exception {\n        Group group = GroupSessionFactory.getGroupSession().joinMember(msg.getGroupName(), msg.getUsername());\n        if (group != null) {\n            ctx.writeAndFlush(new GroupJoinResponseMessage(true, msg.getGroupName() + \"群加入成功\"));\n        } else {\n            ctx.writeAndFlush(new GroupJoinResponseMessage(true, msg.getGroupName() + \"群不存在\"));\n        }\n    }\n}\n```\n\n退出群聊\n\n```java\n@ChannelHandler.Sharable\npublic class GroupQuitRequestMessageHandler extends SimpleChannelInboundHandler<GroupQuitRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupQuitRequestMessage msg) throws Exception {\n        Group group = GroupSessionFactory.getGroupSession().removeMember(msg.getGroupName(), msg.getUsername());\n        if (group != null) {\n            ctx.writeAndFlush(new GroupJoinResponseMessage(true, \"已退出群\" + msg.getGroupName()));\n        } else {\n            ctx.writeAndFlush(new GroupJoinResponseMessage(true, msg.getGroupName() + \"群不存在\"));\n        }\n    }\n}\n```\n\n查看成员\n\n```java\n@ChannelHandler.Sharable\npublic class GroupMembersRequestMessageHandler extends SimpleChannelInboundHandler<GroupMembersRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupMembersRequestMessage msg) throws Exception {\n        Set<String> members = GroupSessionFactory.getGroupSession()\n                .getMembers(msg.getGroupName());\n        ctx.writeAndFlush(new GroupMembersResponseMessage(members));\n    }\n}\n```\n\n\n\n### 3.5 聊天室业务-退出\n\n```\n@Slf4j\n@ChannelHandler.Sharable\npublic class QuitHandler extends ChannelInboundHandlerAdapter {\n\n    // 当连接断开时触发 inactive 事件\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        SessionFactory.getSession().unbind(ctx.channel());\n        log.debug(\"{} 已经断开\", ctx.channel());\n    }\n\n\t// 当出现异常时触发\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        SessionFactory.getSession().unbind(ctx.channel());\n        log.debug(\"{} 已经异常断开 异常是{}\", ctx.channel(), cause.getMessage());\n    }\n}\n```\n\n\n\n### 3.6 聊天室业务-空闲检测\n\n\n\n#### 连接假死\n\n原因\n\n* 网络设备出现故障，例如网卡，机房等，底层的 TCP 连接已经断开了，但应用程序没有感知到，仍然占用着资源。\n* 公网网络不稳定，出现丢包。如果连续出现丢包，这时现象就是客户端数据发不出去，服务端也一直收不到数据，就这么一直耗着\n* 应用程序线程阻塞，无法进行数据读写\n\n问题\n\n* 假死的连接占用的资源不能自动释放\n* 向假死的连接发送数据，得到的反馈是发送超时\n\n服务器端解决\n\n* 怎么判断客户端连接是否假死呢？如果能收到客户端数据，说明没有假死。因此策略就可以定为，每隔一段时间就检查这段时间内是否接收到客户端数据，没有就可以判定为连接假死\n\n```java\n// 用来判断是不是 读空闲时间过长，或 写空闲时间过长\n// 5s 内如果没有收到 channel 的数据，会触发一个 IdleState#READER_IDLE 事件\nch.pipeline().addLast(new IdleStateHandler(5, 0, 0));\n// ChannelDuplexHandler 可以同时作为入站和出站处理器\nch.pipeline().addLast(new ChannelDuplexHandler() {\n    // 用来触发特殊事件\n    @Override\n    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception{\n        IdleStateEvent event = (IdleStateEvent) evt;\n        // 触发了读空闲事件\n        if (event.state() == IdleState.READER_IDLE) {\n            log.debug(\"已经 5s 没有读到数据了\");\n            ctx.channel().close();\n        }\n    }\n});\n```\n\n\n\n客户端定时心跳\n\n* 客户端可以定时向服务器端发送数据，只要这个时间间隔小于服务器定义的空闲检测的时间间隔，那么就能防止前面提到的误判，客户端可以定义如下心跳处理器\n\n```java\n// 用来判断是不是 读空闲时间过长，或 写空闲时间过长\n// 3s 内如果没有向服务器写数据，会触发一个 IdleState#WRITER_IDLE 事件\nch.pipeline().addLast(new IdleStateHandler(0, 3, 0));\n// ChannelDuplexHandler 可以同时作为入站和出站处理器\nch.pipeline().addLast(new ChannelDuplexHandler() {\n    // 用来触发特殊事件\n    @Override\n    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception{\n        IdleStateEvent event = (IdleStateEvent) evt;\n        // 触发了写空闲事件\n        if (event.state() == IdleState.WRITER_IDLE) {\n            //                                log.debug(\"3s 没有写数据了，发送一个心跳包\");\n            ctx.writeAndFlush(new PingMessage());\n        }\n    }\n});\n```\n\n\n\n\n\n\n","source":"_posts/2023-05-06-Netty03-进阶.md","raw":"---\ntitle: Netty03-进阶\ndate: 2023-05-06 21:25:02\ntags: \n- Netty\n- programing\n- Java\ncategories: Netty\n---\n\n该笔记是B站黑马的Netty视频的配套笔记3。\n<!-- more -->\n# 三. Netty 进阶\n\n## 1. 粘包与半包\n\n### 1.1 粘包现象\n\n服务端代码\n\n```java\npublic class HelloWorldServer {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldServer.class);\n    void start() {\n        NioEventLoopGroup boss = new NioEventLoopGroup(1);\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.channel(NioServerSocketChannel.class);\n            serverBootstrap.group(boss, worker);\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"connected {}\", ctx.channel());\n                            super.channelActive(ctx);\n                        }\n\n                        @Override\n                        public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"disconnect {}\", ctx.channel());\n                            super.channelInactive(ctx);\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = serverBootstrap.bind(8080);\n            log.debug(\"{} binding...\", channelFuture.channel());\n            channelFuture.sync();\n            log.debug(\"{} bound...\", channelFuture.channel());\n            channelFuture.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            log.error(\"server error\", e);\n        } finally {\n            boss.shutdownGracefully();\n            worker.shutdownGracefully();\n            log.debug(\"stoped\");\n        }\n    }\n\n    public static void main(String[] args) {\n        new HelloWorldServer().start();\n    }\n}\n```\n\n客户端代码希望发送 10 个消息，每个消息是 16 字节\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n    public static void main(String[] args) {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"connetted...\");\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            Random r = new Random();\n                            char c = 'a';\n                            for (int i = 0; i < 10; i++) {\n                                ByteBuf buffer = ctx.alloc().buffer();\n                                buffer.writeBytes(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});\n                                ctx.writeAndFlush(buffer);\n                            }\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 8080).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n服务器端的某次输出，可以看到一次就接收了 160 个字节，而非分 10 次接收\n\n```\n08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5] binding...\n08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5, L:/0:0:0:0:0:0:0:0:8080] bound...\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] REGISTERED\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] ACTIVE\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177]\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ: 160B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000010| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000020| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000030| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000040| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000050| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000060| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000070| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000080| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000090| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n+--------+-------------------------------------------------+----------------+\n08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ COMPLETE\n```\n\n\n\n### 1.2 半包现象\n\n客户端代码希望发送 1 个消息，这个消息是 160 字节，代码改为\n\n```java\nByteBuf buffer = ctx.alloc().buffer();\nfor (int i = 0; i < 10; i++) {\n    buffer.writeBytes(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});\n}\nctx.writeAndFlush(buffer);\n```\n\n为现象明显，服务端修改一下接收缓冲区，其它代码不变\n\n```java\nserverBootstrap.option(ChannelOption.SO_RCVBUF, 10);\n```\n\n服务器端的某次输出，可以看到接收的消息被分为两节，第一次 20 字节，第二次 140 字节\n\n```\n08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84] binding...\n08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84, L:/0:0:0:0:0:0:0:0:8080] bound...\n08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] REGISTERED\n08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] ACTIVE\n08:44:23 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221]\n08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 20B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|\n|00000010| 00 01 02 03                                     |....            |\n+--------+-------------------------------------------------+----------------+\n08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE\n08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 140B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000010| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000020| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000030| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000040| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000050| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000060| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000070| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|\n|00000080| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f             |............    |\n+--------+-------------------------------------------------+----------------+\n08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE\n```\n\n> **注意**\n>\n> serverBootstrap.option(ChannelOption.SO_RCVBUF, 10) 影响的底层接收缓冲区（即滑动窗口）大小，仅决定了 netty 读取的最小单位，netty 实际每次读取的一般是它的整数倍\n\n\n\n### 1.3 现象分析\n\n粘包\n\n* 现象，发送 abc def，接收 abcdef\n* 原因\n  * 应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）\n  * 滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包\n  * Nagle 算法：会造成粘包\n\n半包\n\n* 现象，发送 abcdef，接收 abc def\n* 原因\n  * 应用层：接收方 ByteBuf 小于实际发送数据量\n  * 滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包\n  * MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包\n\n\n\n本质是因为 TCP 是流式协议，消息无边界\n\n\n\n> 滑动窗口\n>\n> * TCP 以一个段（segment）为单位，每发送一个段就需要进行一次确认应答（ack）处理，但如果这么做，缺点是包的往返时间越长性能就越差\n>\n>   ![](img/0049.png)\n>\n> \n>\n> * 为了解决此问题，引入了窗口概念，窗口大小即决定了无需等待应答而可以继续发送的数据最大值\n>\n>   ![](img/0051.png)\n>\n> * 窗口实际就起到一个缓冲区的作用，同时也能起到流量控制的作用\n>\n>   * 图中深色的部分即要发送的数据，高亮的部分即窗口\n>   * 窗口内的数据才允许被发送，当应答未到达前，窗口必须停止滑动\n>   * 如果 1001~2000 这个段的数据 ack 回来了，窗口就可以向前滑动\n>   * 接收方也会维护一个窗口，只有落在窗口内的数据才能允许接收\n>\n\n\n\n>  MSS 限制\n>\n>  * 链路层对一次能够发送的最大数据有限制，这个限制称之为 MTU（maximum transmission unit），不同的链路设备的 MTU 值也有所不同，例如\n>\n>   * 以太网的 MTU 是 1500\n>   * FDDI（光纤分布式数据接口）的 MTU 是 4352\n>   * 本地回环地址的 MTU 是 65535 - 本地测试不走网卡\n>\n>  * MSS 是最大段长度（maximum segment size），它是 MTU 刨去 tcp 头和 ip 头后剩余能够作为数据传输的字节数\n>\n>   * ipv4 tcp 头占用 20 bytes，ip 头占用 20 bytes，因此以太网 MSS 的值为 1500 - 40 = 1460\n>   * TCP 在传递大量数据时，会按照 MSS 大小将数据进行分割发送\n>   * MSS 的值在三次握手时通知对方自己 MSS 的值，然后在两者之间选择一个小值作为 MSS\n>\n>   <img src=\"img/0031.jpg\" style=\"zoom:50%;\" />\n\n\n\n> Nagle 算法\n>\n> * 即使发送一个字节，也需要加入 tcp 头和 ip 头，也就是总字节数会使用 41 bytes，非常不经济。因此为了提高网络利用率，tcp 希望尽可能发送足够大的数据，这就是 Nagle 算法产生的缘由\n> * 该算法是指发送端即使还有应该发送的数据，但如果这部分数据很少的话，则进行延迟发送\n>   * 如果 SO_SNDBUF 的数据达到 MSS，则需要发送\n>   * 如果 SO_SNDBUF 中含有 FIN（表示需要连接关闭）这时将剩余数据发送，再关闭\n>   * 如果 TCP_NODELAY = true，则需要发送\n>   * 已发送的数据都收到 ack 时，则需要发送\n>   * 上述条件不满足，但发生超时（一般为 200ms）则需要发送\n>   * 除上述情况，延迟发送\n\n\n\n### 1.4 解决方案\n\n1. 短链接，发一个包建立一次连接，这样连接建立到连接断开之间就是消息的边界，缺点效率太低\n2. 每一条消息采用固定长度，缺点浪费空间\n3. 每一条消息采用分隔符，例如 \\n，缺点需要转义\n4. 每一条消息分为 head 和 body，head 中包含 body 的长度\n\n\n\n#### 方法1，短链接\n\n以解决粘包为例\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n\n    public static void main(String[] args) {\n        // 分 10 次发送\n        for (int i = 0; i < 10; i++) {\n            send();\n        }\n    }\n\n    private static void send() {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"conneted...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            ByteBuf buffer = ctx.alloc().buffer();\n                            buffer.writeBytes(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});\n                            ctx.writeAndFlush(buffer);\n                            // 发完即关\n                            ctx.close();\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 8080).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n输出，略\n\n> 半包用这种办法还是不好解决，因为接收方的缓冲区大小是有限的\n\n\n\n#### 方法2，固定长度\n\n让所有数据包长度固定（假设长度为 8 字节），服务器端加入\n\n```java\nch.pipeline().addLast(new FixedLengthFrameDecoder(8));\n```\n\n客户端测试代码，注意, 采用这种方法后，客户端什么时候 flush 都可以\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n\n    public static void main(String[] args) {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"connetted...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            // 发送内容随机的数据包\n                            Random r = new Random();\n                            char c = 'a';\n                            ByteBuf buffer = ctx.alloc().buffer();\n                            for (int i = 0; i < 10; i++) {\n                                byte[] bytes = new byte[8];\n                                for (int j = 0; j < r.nextInt(8); j++) {\n                                    bytes[j] = (byte) c;\n                                }\n                                c++;\n                                buffer.writeBytes(bytes);\n                            }\n                            ctx.writeAndFlush(buffer);\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"192.168.0.103\", 9090).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n客户端输出\n\n```\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] REGISTERED\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] CONNECT: /192.168.0.103:9090\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] ACTIVE\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] WRITE: 80B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 61 61 61 00 00 00 00 62 00 00 00 00 00 00 00 |aaaa....b.......|\n|00000010| 63 63 00 00 00 00 00 00 64 00 00 00 00 00 00 00 |cc......d.......|\n|00000020| 00 00 00 00 00 00 00 00 66 66 66 66 00 00 00 00 |........ffff....|\n|00000030| 67 67 67 00 00 00 00 00 68 00 00 00 00 00 00 00 |ggg.....h.......|\n|00000040| 69 69 69 69 69 00 00 00 6a 6a 6a 6a 00 00 00 00 |iiiii...jjjj....|\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] FLUSH\n```\n\n服务端输出\n\n```\n12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f] binding...\n12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f, L:/192.168.0.103:9090] bound...\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] REGISTERED\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] ACTIVE\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155]\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 61 61 61 00 00 00 00                         |aaaa....        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 62 00 00 00 00 00 00 00                         |b.......        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 63 63 00 00 00 00 00 00                         |cc......        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 64 00 00 00 00 00 00 00                         |d.......        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 00 00 00 00 00 00 00 00                         |........        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 66 66 66 00 00 00 00                         |ffff....        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 67 67 67 00 00 00 00 00                         |ggg.....        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 00 00 00 00 00 00 00                         |h.......        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 69 69 69 69 69 00 00 00                         |iiiii...        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6a 6a 6a 6a 00 00 00 00                         |jjjj....        |\n+--------+-------------------------------------------------+----------------+\n12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ COMPLETE\n```\n\n缺点是，数据包的大小不好把握\n\n* 长度定的太大，浪费\n* 长度定的太小，对某些数据包又显得不够\n\n\n\n#### 方法3，固定分隔符\n\n服务端加入，默认以 \\n 或 \\r\\n 作为分隔符，如果超出指定长度仍未出现分隔符，则抛出异常\n\n```java\nch.pipeline().addLast(new LineBasedFrameDecoder(1024));\n```\n\n客户端在每条消息之后，加入 \\n 分隔符\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n\n    public static void main(String[] args) {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"connetted...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            Random r = new Random();\n                            char c = 'a';\n                            ByteBuf buffer = ctx.alloc().buffer();\n                            for (int i = 0; i < 10; i++) {\n                                for (int j = 1; j <= r.nextInt(16)+1; j++) {\n                                    buffer.writeByte((byte) c);\n                                }\n                                buffer.writeByte(10);\n                                c++;\n                            }\n                            ctx.writeAndFlush(buffer);\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"192.168.0.103\", 9090).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n客户端输出\n\n```\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] REGISTERED\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] CONNECT: /192.168.0.103:9090\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] ACTIVE\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] WRITE: 60B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 0a 62 62 62 0a 63 63 63 0a 64 64 0a 65 65 65 |a.bbb.ccc.dd.eee|\n|00000010| 65 65 65 65 65 65 65 0a 66 66 0a 67 67 67 67 67 |eeeeeee.ff.ggggg|\n|00000020| 67 67 0a 68 68 68 68 0a 69 69 69 69 69 69 69 0a |gg.hhhh.iiiiiii.|\n|00000030| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 0a             |jjjjjjjjjjj.    |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] FLUSH\n```\n\n\n\n服务端输出\n\n```\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] c.i.n.HelloWorldServer - connected [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641]\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 1B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61                                              |a               |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 62 62 62                                        |bbb             |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 63 63 63                                        |ccc             |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 64 64                                           |dd              |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 10B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 65 65 65 65 65 65 65 65 65 65                   |eeeeeeeeee      |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 66                                           |ff              |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 67 67 67 67 67 67 67                            |ggggggg         |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 4B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 68 68 68                                     |hhhh            |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 69 69 69 69 69 69 69                            |iiiiiii         |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 11B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a                |jjjjjjjjjjj     |\n+--------+-------------------------------------------------+----------------+\n14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ COMPLETE\n```\n\n缺点，处理字符数据比较合适，但如果内容本身包含了分隔符（字节数据常常会有此情况），那么就会解析错误\n\n\n\n#### 方法4，预设长度\n\n在发送消息前，先约定用定长字节表示接下来数据的长度\n\n```java\n// 最大长度，长度偏移，长度占用字节，长度调整，剥离字节数\nch.pipeline().addLast(new LengthFieldBasedFrameDecoder(1024, 0, 1, 0, 1));\n```\n\n客户端代码\n\n```java\npublic class HelloWorldClient {\n    static final Logger log = LoggerFactory.getLogger(HelloWorldClient.class);\n\n    public static void main(String[] args) {\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(worker);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    log.debug(\"connetted...\");\n                    ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            log.debug(\"sending...\");\n                            Random r = new Random();\n                            char c = 'a';\n                            ByteBuf buffer = ctx.alloc().buffer();\n                            for (int i = 0; i < 10; i++) {\n                                byte length = (byte) (r.nextInt(16) + 1);\n                                // 先写入长度\n                                buffer.writeByte(length);\n                                // 再\n                                for (int j = 1; j <= length; j++) {\n                                    buffer.writeByte((byte) c);\n                                }\n                                c++;\n                            }\n                            ctx.writeAndFlush(buffer);\n                        }\n                    });\n                }\n            });\n            ChannelFuture channelFuture = bootstrap.connect(\"192.168.0.103\", 9090).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            log.error(\"client error\", e);\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n\n\n客户端输出\n\n```\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] REGISTERED\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] CONNECT: /192.168.0.103:9090\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] ACTIVE\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] WRITE: 97B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 09 61 61 61 61 61 61 61 61 61 09 62 62 62 62 62 |.aaaaaaaaa.bbbbb|\n|00000010| 62 62 62 62 06 63 63 63 63 63 63 08 64 64 64 64 |bbbb.cccccc.dddd|\n|00000020| 64 64 64 64 0f 65 65 65 65 65 65 65 65 65 65 65 |dddd.eeeeeeeeeee|\n|00000030| 65 65 65 65 0d 66 66 66 66 66 66 66 66 66 66 66 |eeee.fffffffffff|\n|00000040| 66 66 02 67 67 02 68 68 0e 69 69 69 69 69 69 69 |ff.gg.hh.iiiiiii|\n|00000050| 69 69 69 69 69 69 69 09 6a 6a 6a 6a 6a 6a 6a 6a |iiiiiii.jjjjjjjj|\n|00000060| 6a                                              |j               |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] FLUSH\n```\n\n\n\n服务端输出\n\n```\n14:36:50 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3] binding...\n14:36:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3, L:/192.168.0.103:9090] bound...\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] REGISTERED\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] ACTIVE\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979]\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 61 61 61 61 61 61 61 61 61                      |aaaaaaaaa       |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 62 62 62 62 62 62 62 62 62                      |bbbbbbbbb       |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 6B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 63 63 63 63 63 63                               |cccccc          |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 8B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 64 64 64 64 64 64 64 64                         |dddddddd        |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 15B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65    |eeeeeeeeeeeeeee |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 13B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 66 66 66 66 66 66 66 66 66 66 66 66 66          |fffffffffffff   |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 67 67                                           |gg              |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 68 68                                           |hh              |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 14B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 69 69 69 69 69 69 69 69 69 69 69 69 69 69       |iiiiiiiiiiiiii  |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B\n         +-------------------------------------------------+\n         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n+--------+-------------------------------------------------+----------------+\n|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a                      |jjjjjjjjj       |\n+--------+-------------------------------------------------+----------------+\n14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ COMPLETE\n\n```\n\n\n\n## 2. 协议设计与解析\n\n### 2.1 为什么需要协议？\n\nTCP/IP 中消息传输基于流的方式，没有边界。\n\n协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则\n\n例如：在网络上传输\n\n```\n下雨天留客天留我不留\n```\n\n是中文一句著名的无标点符号句子，在没有标点符号情况下，这句话有数种拆解方式，而意思却是完全不同，所以常被用作讲述标点符号的重要性\n\n一种解读\n\n```\n下雨天留客，天留，我不留\n```\n\n另一种解读\n\n```\n下雨天，留客天，留我不？留\n```\n\n\n\n如何设计协议呢？其实就是给网络传输的信息加上“标点符号”。但通过分隔符来断句不是很好，因为分隔符本身如果用于传输，那么必须加以区分。因此，下面一种协议较为常用\n\n``` \n定长字节表示内容长度 + 实际内容\n```\n\n例如，假设一个中文字符长度为 3，按照上述协议的规则，发送信息方式如下，就不会被接收方弄错意思了\n\n```\n0f下雨天留客06天留09我不留\n```\n\n\n\n> 小故事\n>\n> 很久很久以前，一位私塾先生到一家任教。双方签订了一纸协议：“无鸡鸭亦可无鱼肉亦可白菜豆腐不可少不得束修金”。此后，私塾先生虽然认真教课，但主人家则总是给私塾先生以白菜豆腐为菜，丝毫未见鸡鸭鱼肉的款待。私塾先生先是很不解，可是后来也就想通了：主人把鸡鸭鱼肉的钱都会换为束修金的，也罢。至此双方相安无事。\n>\n> 年关将至，一个学年段亦告结束。私塾先生临行时，也不见主人家为他交付束修金，遂与主家理论。然主家亦振振有词：“有协议为证——无鸡鸭亦可，无鱼肉亦可，白菜豆腐不可少，不得束修金。这白纸黑字明摆着的，你有什么要说的呢？”\n>\n> 私塾先生据理力争：“协议是这样的——无鸡，鸭亦可；无鱼，肉亦可；白菜豆腐不可，少不得束修金。”\n>\n> 双方唇枪舌战，你来我往，真个是不亦乐乎！\n>\n> 这里的束修金，也作“束脩”，应当是泛指教师应当得到的报酬\n\n\n\n### 2.2 redis 协议举例\n\n```java\nNioEventLoopGroup worker = new NioEventLoopGroup();\nbyte[] LINE = {13, 10};\ntry {\n    Bootstrap bootstrap = new Bootstrap();\n    bootstrap.channel(NioSocketChannel.class);\n    bootstrap.group(worker);\n    bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        protected void initChannel(SocketChannel ch) {\n            ch.pipeline().addLast(new LoggingHandler());\n            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                // 会在连接 channel 建立成功后，会触发 active 事件\n                @Override\n                public void channelActive(ChannelHandlerContext ctx) {\n                    set(ctx);\n                    get(ctx);\n                }\n                private void get(ChannelHandlerContext ctx) {\n                    ByteBuf buf = ctx.alloc().buffer();\n                    buf.writeBytes(\"*2\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"get\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"aaa\".getBytes());\n                    buf.writeBytes(LINE);\n                    ctx.writeAndFlush(buf);\n                }\n                private void set(ChannelHandlerContext ctx) {\n                    ByteBuf buf = ctx.alloc().buffer();\n                    buf.writeBytes(\"*3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"set\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"aaa\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"$3\".getBytes());\n                    buf.writeBytes(LINE);\n                    buf.writeBytes(\"bbb\".getBytes());\n                    buf.writeBytes(LINE);\n                    ctx.writeAndFlush(buf);\n                }\n\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n                    ByteBuf buf = (ByteBuf) msg;\n                    System.out.println(buf.toString(Charset.defaultCharset()));\n                }\n            });\n        }\n    });\n    ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 6379).sync();\n    channelFuture.channel().closeFuture().sync();\n} catch (InterruptedException e) {\n    log.error(\"client error\", e);\n} finally {\n    worker.shutdownGracefully();\n}\n```\n\n\n\n### 2.3 http 协议举例\n\n```java\nNioEventLoopGroup boss = new NioEventLoopGroup();\nNioEventLoopGroup worker = new NioEventLoopGroup();\ntry {\n    ServerBootstrap serverBootstrap = new ServerBootstrap();\n    serverBootstrap.channel(NioServerSocketChannel.class);\n    serverBootstrap.group(boss, worker);\n    serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        protected void initChannel(SocketChannel ch) throws Exception {\n            ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));\n            ch.pipeline().addLast(new HttpServerCodec());\n            ch.pipeline().addLast(new SimpleChannelInboundHandler<HttpRequest>() {\n                @Override\n                protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {\n                    // 获取请求\n                    log.debug(msg.uri());\n\n                    // 返回响应\n                    DefaultFullHttpResponse response =\n                            new DefaultFullHttpResponse(msg.protocolVersion(), HttpResponseStatus.OK);\n\n                    byte[] bytes = \"<h1>Hello, world!</h1>\".getBytes();\n\n                    response.headers().setInt(CONTENT_LENGTH, bytes.length);\n                    response.content().writeBytes(bytes);\n\n                    // 写回响应\n                    ctx.writeAndFlush(response);\n                }\n            });\n            /*ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                @Override\n                public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n                    log.debug(\"{}\", msg.getClass());\n\n                    if (msg instanceof HttpRequest) { // 请求行，请求头\n\n                    } else if (msg instanceof HttpContent) { //请求体\n\n                    }\n                }\n            });*/\n        }\n    });\n    ChannelFuture channelFuture = serverBootstrap.bind(8080).sync();\n    channelFuture.channel().closeFuture().sync();\n} catch (InterruptedException e) {\n    log.error(\"server error\", e);\n} finally {\n    boss.shutdownGracefully();\n    worker.shutdownGracefully();\n}\n```\n\n\n\n### 2.4 自定义协议要素\n\n* 魔数，用来在第一时间判定是否是无效数据包\n* 版本号，可以支持协议的升级\n* 序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk\n* 指令类型，是登录、注册、单聊、群聊... 跟业务相关\n* 请求序号，为了双工通信，提供异步能力\n* 正文长度\n* 消息正文\n\n\n\n#### 编解码器\n\n根据上面的要素，设计一个登录请求消息和登录响应消息，并使用 Netty 完成收发\n\n```java\n@Slf4j\npublic class MessageCodec extends ByteToMessageCodec<Message> {\n\n    @Override\n    protected void encode(ChannelHandlerContext ctx, Message msg, ByteBuf out) throws Exception {\n        // 1. 4 字节的魔数\n        out.writeBytes(new byte[]{1, 2, 3, 4});\n        // 2. 1 字节的版本,\n        out.writeByte(1);\n        // 3. 1 字节的序列化方式 jdk 0 , json 1\n        out.writeByte(0);\n        // 4. 1 字节的指令类型\n        out.writeByte(msg.getMessageType());\n        // 5. 4 个字节\n        out.writeInt(msg.getSequenceId());\n        // 无意义，对齐填充\n        out.writeByte(0xff);\n        // 6. 获取内容的字节数组\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(msg);\n        byte[] bytes = bos.toByteArray();\n        // 7. 长度\n        out.writeInt(bytes.length);\n        // 8. 写入内容\n        out.writeBytes(bytes);\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        int magicNum = in.readInt();\n        byte version = in.readByte();\n        byte serializerType = in.readByte();\n        byte messageType = in.readByte();\n        int sequenceId = in.readInt();\n        in.readByte();\n        int length = in.readInt();\n        byte[] bytes = new byte[length];\n        in.readBytes(bytes, 0, length);\n        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));\n        Message message = (Message) ois.readObject();\n        log.debug(\"{}, {}, {}, {}, {}, {}\", magicNum, version, serializerType, messageType, sequenceId, length);\n        log.debug(\"{}\", message);\n        out.add(message);\n    }\n}\n```\n\n测试\n\n```java\nEmbeddedChannel channel = new EmbeddedChannel(\n    new LoggingHandler(),\n    new LengthFieldBasedFrameDecoder(\n        1024, 12, 4, 0, 0),\n    new MessageCodec()\n);\n// encode\nLoginRequestMessage message = new LoginRequestMessage(\"zhangsan\", \"123\", \"张三\");\n//        channel.writeOutbound(message);\n// decode\nByteBuf buf = ByteBufAllocator.DEFAULT.buffer();\nnew MessageCodec().encode(null, message, buf);\n\nByteBuf s1 = buf.slice(0, 100);\nByteBuf s2 = buf.slice(100, buf.readableBytes() - 100);\ns1.retain(); // 引用计数 2\nchannel.writeInbound(s1); // release 1\nchannel.writeInbound(s2);\n```\n\n\n\n解读\n\n![](img/0013.png)\n\n\n\n#### 💡 什么时候可以加 @Sharable\n\n* 当 handler 不保存状态时，就可以安全地在多线程下被共享\n* 但要注意对于编解码器类，不能继承 ByteToMessageCodec 或 CombinedChannelDuplexHandler 父类，他们的构造方法对 @Sharable 有限制\n* 如果能确保编解码器不会保存状态，可以继承 MessageToMessageCodec 父类\n\n```java\n@Slf4j\n@ChannelHandler.Sharable\n/**\n * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的\n */\npublic class MessageCodecSharable extends MessageToMessageCodec<ByteBuf, Message> {\n    @Override\n    protected void encode(ChannelHandlerContext ctx, Message msg, List<Object> outList) throws Exception {\n        ByteBuf out = ctx.alloc().buffer();\n        // 1. 4 字节的魔数\n        out.writeBytes(new byte[]{1, 2, 3, 4});\n        // 2. 1 字节的版本,\n        out.writeByte(1);\n        // 3. 1 字节的序列化方式 jdk 0 , json 1\n        out.writeByte(0);\n        // 4. 1 字节的指令类型\n        out.writeByte(msg.getMessageType());\n        // 5. 4 个字节\n        out.writeInt(msg.getSequenceId());\n        // 无意义，对齐填充\n        out.writeByte(0xff);\n        // 6. 获取内容的字节数组\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(msg);\n        byte[] bytes = bos.toByteArray();\n        // 7. 长度\n        out.writeInt(bytes.length);\n        // 8. 写入内容\n        out.writeBytes(bytes);\n        outList.add(out);\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        int magicNum = in.readInt();\n        byte version = in.readByte();\n        byte serializerType = in.readByte();\n        byte messageType = in.readByte();\n        int sequenceId = in.readInt();\n        in.readByte();\n        int length = in.readInt();\n        byte[] bytes = new byte[length];\n        in.readBytes(bytes, 0, length);\n        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));\n        Message message = (Message) ois.readObject();\n        log.debug(\"{}, {}, {}, {}, {}, {}\", magicNum, version, serializerType, messageType, sequenceId, length);\n        log.debug(\"{}\", message);\n        out.add(message);\n    }\n}\n```\n\n\n\n## 3. 聊天室案例\n\n### 3.1 聊天室业务介绍\n\n```java\n/**\n * 用户管理接口\n */\npublic interface UserService {\n\n    /**\n     * 登录\n     * @param username 用户名\n     * @param password 密码\n     * @return 登录成功返回 true, 否则返回 false\n     */\n    boolean login(String username, String password);\n}\n```\n\n\n\n```java\n/**\n * 会话管理接口\n */\npublic interface Session {\n\n    /**\n     * 绑定会话\n     * @param channel 哪个 channel 要绑定会话\n     * @param username 会话绑定用户\n     */\n    void bind(Channel channel, String username);\n\n    /**\n     * 解绑会话\n     * @param channel 哪个 channel 要解绑会话\n     */\n    void unbind(Channel channel);\n\n    /**\n     * 获取属性\n     * @param channel 哪个 channel\n     * @param name 属性名\n     * @return 属性值\n     */\n    Object getAttribute(Channel channel, String name);\n\n    /**\n     * 设置属性\n     * @param channel 哪个 channel\n     * @param name 属性名\n     * @param value 属性值\n     */\n    void setAttribute(Channel channel, String name, Object value);\n\n    /**\n     * 根据用户名获取 channel\n     * @param username 用户名\n     * @return channel\n     */\n    Channel getChannel(String username);\n}\n```\n\n\n\n```java\n/**\n * 聊天组会话管理接口\n */\npublic interface GroupSession {\n\n    /**\n     * 创建一个聊天组, 如果不存在才能创建成功, 否则返回 null\n     * @param name 组名\n     * @param members 成员\n     * @return 成功时返回组对象, 失败返回 null\n     */\n    Group createGroup(String name, Set<String> members);\n\n    /**\n     * 加入聊天组\n     * @param name 组名\n     * @param member 成员名\n     * @return 如果组不存在返回 null, 否则返回组对象\n     */\n    Group joinMember(String name, String member);\n\n    /**\n     * 移除组成员\n     * @param name 组名\n     * @param member 成员名\n     * @return 如果组不存在返回 null, 否则返回组对象\n     */\n    Group removeMember(String name, String member);\n\n    /**\n     * 移除聊天组\n     * @param name 组名\n     * @return 如果组不存在返回 null, 否则返回组对象\n     */\n    Group removeGroup(String name);\n\n    /**\n     * 获取组成员\n     * @param name 组名\n     * @return 成员集合, 没有成员会返回 empty set\n     */\n    Set<String> getMembers(String name);\n\n    /**\n     * 获取组成员的 channel 集合, 只有在线的 channel 才会返回\n     * @param name 组名\n     * @return 成员 channel 集合\n     */\n    List<Channel> getMembersChannel(String name);\n}\n```\n\n\n\n### 3.2 聊天室业务-登录\n\n```java\n@Slf4j\npublic class ChatServer {\n    public static void main(String[] args) {\n        NioEventLoopGroup boss = new NioEventLoopGroup();\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.channel(NioServerSocketChannel.class);\n            serverBootstrap.group(boss, worker);\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(new SimpleChannelInboundHandler<LoginRequestMessage>() {\n                        @Override\n                        protected void channelRead0(ChannelHandlerContext ctx, LoginRequestMessage msg) throws Exception {\n                            String username = msg.getUsername();\n                            String password = msg.getPassword();\n                            boolean login = UserServiceFactory.getUserService().login(username, password);\n                            LoginResponseMessage message;\n                            if(login) {\n                                message = new LoginResponseMessage(true, \"登录成功\");\n                            } else {\n                                message = new LoginResponseMessage(false, \"用户名或密码不正确\");\n                            }\n                            ctx.writeAndFlush(message);\n                        }\n                    });\n                }\n            });\n            Channel channel = serverBootstrap.bind(8080).sync().channel();\n            channel.closeFuture().sync();\n        } catch (InterruptedException e) {\n            log.error(\"server error\", e);\n        } finally {\n            boss.shutdownGracefully();\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n\n\n```java\n@Slf4j\npublic class ChatClient {\n    public static void main(String[] args) {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        CountDownLatch WAIT_FOR_LOGIN = new CountDownLatch(1);\n        AtomicBoolean LOGIN = new AtomicBoolean(false);\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(group);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n//                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(\"client handler\", new ChannelInboundHandlerAdapter() {\n                        // 接收响应消息\n                        @Override\n                        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n                            log.debug(\"msg: {}\", msg);\n                            if ((msg instanceof LoginResponseMessage)) {\n                                LoginResponseMessage response = (LoginResponseMessage) msg;\n                                if (response.isSuccess()) {\n                                    // 如果登录成功\n                                    LOGIN.set(true);\n                                }\n                                // 唤醒 system in 线程\n                                WAIT_FOR_LOGIN.countDown();\n                            }\n                        }\n\n                        // 在连接建立后触发 active 事件\n                        @Override\n                        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                            // 负责接收用户在控制台的输入，负责向服务器发送各种消息\n                            new Thread(() -> {\n                                Scanner scanner = new Scanner(System.in);\n                                System.out.println(\"请输入用户名:\");\n                                String username = scanner.nextLine();\n                                System.out.println(\"请输入密码:\");\n                                String password = scanner.nextLine();\n                                // 构造消息对象\n                                LoginRequestMessage message = new LoginRequestMessage(username, password);\n                                // 发送消息\n                                ctx.writeAndFlush(message);\n                                System.out.println(\"等待后续操作...\");\n                                try {\n                                    WAIT_FOR_LOGIN.await();\n                                } catch (InterruptedException e) {\n                                    e.printStackTrace();\n                                }\n                                // 如果登录失败\n                                if (!LOGIN.get()) {\n                                    ctx.channel().close();\n                                    return;\n                                }\n                                while (true) {\n                                    System.out.println(\"==================================\");\n                                    System.out.println(\"send [username] [content]\");\n                                    System.out.println(\"gsend [group name] [content]\");\n                                    System.out.println(\"gcreate [group name] [m1,m2,m3...]\");\n                                    System.out.println(\"gmembers [group name]\");\n                                    System.out.println(\"gjoin [group name]\");\n                                    System.out.println(\"gquit [group name]\");\n                                    System.out.println(\"quit\");\n                                    System.out.println(\"==================================\");\n                                    String command = scanner.nextLine();\n                                    String[] s = command.split(\" \");\n                                    switch (s[0]){\n                                        case \"send\":\n                                            ctx.writeAndFlush(new ChatRequestMessage(username, s[1], s[2]));\n                                            break;\n                                        case \"gsend\":\n                                            ctx.writeAndFlush(new GroupChatRequestMessage(username, s[1], s[2]));\n                                            break;\n                                        case \"gcreate\":\n                                            Set<String> set = new HashSet<>(Arrays.asList(s[2].split(\",\")));\n                                            set.add(username); // 加入自己\n                                            ctx.writeAndFlush(new GroupCreateRequestMessage(s[1], set));\n                                            break;\n                                        case \"gmembers\":\n                                            ctx.writeAndFlush(new GroupMembersRequestMessage(s[1]));\n                                            break;\n                                        case \"gjoin\":\n                                            ctx.writeAndFlush(new GroupJoinRequestMessage(username, s[1]));\n                                            break;\n                                        case \"gquit\":\n                                            ctx.writeAndFlush(new GroupQuitRequestMessage(username, s[1]));\n                                            break;\n                                        case \"quit\":\n                                            ctx.channel().close();\n                                            return;\n                                    }\n                                }\n                            }, \"system in\").start();\n                        }\n                    });\n                }\n            });\n            Channel channel = bootstrap.connect(\"localhost\", 8080).sync().channel();\n            channel.closeFuture().sync();\n        } catch (Exception e) {\n            log.error(\"client error\", e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n\n\n### 3.3 聊天室业务-单聊\n\n服务器端将 handler 独立出来\n\n登录 handler\n\n```java\n@ChannelHandler.Sharable\npublic class LoginRequestMessageHandler extends SimpleChannelInboundHandler<LoginRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, LoginRequestMessage msg) throws Exception {\n        String username = msg.getUsername();\n        String password = msg.getPassword();\n        boolean login = UserServiceFactory.getUserService().login(username, password);\n        LoginResponseMessage message;\n        if(login) {\n            SessionFactory.getSession().bind(ctx.channel(), username);\n            message = new LoginResponseMessage(true, \"登录成功\");\n        } else {\n            message = new LoginResponseMessage(false, \"用户名或密码不正确\");\n        }\n        ctx.writeAndFlush(message);\n    }\n}\n```\n\n单聊 handler\n\n```java\n@ChannelHandler.Sharable\npublic class ChatRequestMessageHandler extends SimpleChannelInboundHandler<ChatRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, ChatRequestMessage msg) throws Exception {\n        String to = msg.getTo();\n        Channel channel = SessionFactory.getSession().getChannel(to);\n        // 在线\n        if(channel != null) {\n            channel.writeAndFlush(new ChatResponseMessage(msg.getFrom(), msg.getContent()));\n        }\n        // 不在线\n        else {\n            ctx.writeAndFlush(new ChatResponseMessage(false, \"对方用户不存在或者不在线\"));\n        }\n    }\n}\n```\n\n\n\n### 3.4 聊天室业务-群聊\n\n创建群聊\n\n```java\n@ChannelHandler.Sharable\npublic class GroupCreateRequestMessageHandler extends SimpleChannelInboundHandler<GroupCreateRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupCreateRequestMessage msg) throws Exception {\n        String groupName = msg.getGroupName();\n        Set<String> members = msg.getMembers();\n        // 群管理器\n        GroupSession groupSession = GroupSessionFactory.getGroupSession();\n        Group group = groupSession.createGroup(groupName, members);\n        if (group == null) {\n            // 发生成功消息\n            ctx.writeAndFlush(new GroupCreateResponseMessage(true, groupName + \"创建成功\"));\n            // 发送拉群消息\n            List<Channel> channels = groupSession.getMembersChannel(groupName);\n            for (Channel channel : channels) {\n                channel.writeAndFlush(new GroupCreateResponseMessage(true, \"您已被拉入\" + groupName));\n            }\n        } else {\n            ctx.writeAndFlush(new GroupCreateResponseMessage(false, groupName + \"已经存在\"));\n        }\n    }\n}\n```\n\n群聊\n\n```java\n@ChannelHandler.Sharable\npublic class GroupChatRequestMessageHandler extends SimpleChannelInboundHandler<GroupChatRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupChatRequestMessage msg) throws Exception {\n        List<Channel> channels = GroupSessionFactory.getGroupSession()\n                .getMembersChannel(msg.getGroupName());\n\n        for (Channel channel : channels) {\n            channel.writeAndFlush(new GroupChatResponseMessage(msg.getFrom(), msg.getContent()));\n        }\n    }\n}\n```\n\n加入群聊\n\n```java\n@ChannelHandler.Sharable\npublic class GroupJoinRequestMessageHandler extends SimpleChannelInboundHandler<GroupJoinRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupJoinRequestMessage msg) throws Exception {\n        Group group = GroupSessionFactory.getGroupSession().joinMember(msg.getGroupName(), msg.getUsername());\n        if (group != null) {\n            ctx.writeAndFlush(new GroupJoinResponseMessage(true, msg.getGroupName() + \"群加入成功\"));\n        } else {\n            ctx.writeAndFlush(new GroupJoinResponseMessage(true, msg.getGroupName() + \"群不存在\"));\n        }\n    }\n}\n```\n\n退出群聊\n\n```java\n@ChannelHandler.Sharable\npublic class GroupQuitRequestMessageHandler extends SimpleChannelInboundHandler<GroupQuitRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupQuitRequestMessage msg) throws Exception {\n        Group group = GroupSessionFactory.getGroupSession().removeMember(msg.getGroupName(), msg.getUsername());\n        if (group != null) {\n            ctx.writeAndFlush(new GroupJoinResponseMessage(true, \"已退出群\" + msg.getGroupName()));\n        } else {\n            ctx.writeAndFlush(new GroupJoinResponseMessage(true, msg.getGroupName() + \"群不存在\"));\n        }\n    }\n}\n```\n\n查看成员\n\n```java\n@ChannelHandler.Sharable\npublic class GroupMembersRequestMessageHandler extends SimpleChannelInboundHandler<GroupMembersRequestMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, GroupMembersRequestMessage msg) throws Exception {\n        Set<String> members = GroupSessionFactory.getGroupSession()\n                .getMembers(msg.getGroupName());\n        ctx.writeAndFlush(new GroupMembersResponseMessage(members));\n    }\n}\n```\n\n\n\n### 3.5 聊天室业务-退出\n\n```\n@Slf4j\n@ChannelHandler.Sharable\npublic class QuitHandler extends ChannelInboundHandlerAdapter {\n\n    // 当连接断开时触发 inactive 事件\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        SessionFactory.getSession().unbind(ctx.channel());\n        log.debug(\"{} 已经断开\", ctx.channel());\n    }\n\n\t// 当出现异常时触发\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        SessionFactory.getSession().unbind(ctx.channel());\n        log.debug(\"{} 已经异常断开 异常是{}\", ctx.channel(), cause.getMessage());\n    }\n}\n```\n\n\n\n### 3.6 聊天室业务-空闲检测\n\n\n\n#### 连接假死\n\n原因\n\n* 网络设备出现故障，例如网卡，机房等，底层的 TCP 连接已经断开了，但应用程序没有感知到，仍然占用着资源。\n* 公网网络不稳定，出现丢包。如果连续出现丢包，这时现象就是客户端数据发不出去，服务端也一直收不到数据，就这么一直耗着\n* 应用程序线程阻塞，无法进行数据读写\n\n问题\n\n* 假死的连接占用的资源不能自动释放\n* 向假死的连接发送数据，得到的反馈是发送超时\n\n服务器端解决\n\n* 怎么判断客户端连接是否假死呢？如果能收到客户端数据，说明没有假死。因此策略就可以定为，每隔一段时间就检查这段时间内是否接收到客户端数据，没有就可以判定为连接假死\n\n```java\n// 用来判断是不是 读空闲时间过长，或 写空闲时间过长\n// 5s 内如果没有收到 channel 的数据，会触发一个 IdleState#READER_IDLE 事件\nch.pipeline().addLast(new IdleStateHandler(5, 0, 0));\n// ChannelDuplexHandler 可以同时作为入站和出站处理器\nch.pipeline().addLast(new ChannelDuplexHandler() {\n    // 用来触发特殊事件\n    @Override\n    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception{\n        IdleStateEvent event = (IdleStateEvent) evt;\n        // 触发了读空闲事件\n        if (event.state() == IdleState.READER_IDLE) {\n            log.debug(\"已经 5s 没有读到数据了\");\n            ctx.channel().close();\n        }\n    }\n});\n```\n\n\n\n客户端定时心跳\n\n* 客户端可以定时向服务器端发送数据，只要这个时间间隔小于服务器定义的空闲检测的时间间隔，那么就能防止前面提到的误判，客户端可以定义如下心跳处理器\n\n```java\n// 用来判断是不是 读空闲时间过长，或 写空闲时间过长\n// 3s 内如果没有向服务器写数据，会触发一个 IdleState#WRITER_IDLE 事件\nch.pipeline().addLast(new IdleStateHandler(0, 3, 0));\n// ChannelDuplexHandler 可以同时作为入站和出站处理器\nch.pipeline().addLast(new ChannelDuplexHandler() {\n    // 用来触发特殊事件\n    @Override\n    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception{\n        IdleStateEvent event = (IdleStateEvent) evt;\n        // 触发了写空闲事件\n        if (event.state() == IdleState.WRITER_IDLE) {\n            //                                log.debug(\"3s 没有写数据了，发送一个心跳包\");\n            ctx.writeAndFlush(new PingMessage());\n        }\n    }\n});\n```\n\n\n\n\n\n\n","slug":"Netty03-进阶","published":1,"updated":"2023-05-06T13:32:38.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clher6xwk000pocwehqv7hyyu","content":"<p>该笔记是B站黑马的Netty视频的配套笔记3。</p>\n<span id=\"more\"></span>\n<h1 id=\"三-Netty-进阶\"><a href=\"#三-Netty-进阶\" class=\"headerlink\" title=\"三. Netty 进阶\"></a>三. Netty 进阶</h1><h2 id=\"1-粘包与半包\"><a href=\"#1-粘包与半包\" class=\"headerlink\" title=\"1. 粘包与半包\"></a>1. 粘包与半包</h2><h3 id=\"1-1-粘包现象\"><a href=\"#1-1-粘包现象\" class=\"headerlink\" title=\"1.1 粘包现象\"></a>1.1 粘包现象</h3><p>服务端代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldServer</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldServer.class);<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">start</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">boss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">ServerBootstrap</span> <span class=\"hljs-variable\">serverBootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;connected &#123;&#125;&quot;</span>, ctx.channel());<br>                            <span class=\"hljs-built_in\">super</span>.channelActive(ctx);<br>                        &#125;<br><br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelInactive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;disconnect &#123;&#125;&quot;</span>, ctx.channel());<br>                            <span class=\"hljs-built_in\">super</span>.channelInactive(ctx);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> serverBootstrap.bind(<span class=\"hljs-number\">8080</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;&#123;&#125; binding...&quot;</span>, channelFuture.channel());<br>            channelFuture.sync();<br>            log.debug(<span class=\"hljs-string\">&quot;&#123;&#125; bound...&quot;</span>, channelFuture.channel());<br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;server error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>            log.debug(<span class=\"hljs-string\">&quot;stoped&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HelloWorldServer</span>().start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端代码希望发送 10 个消息，每个消息是 16 字节</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>                            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>                                <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                                buffer.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>&#125;);<br>                                ctx.writeAndFlush(buffer);<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>服务器端的某次输出，可以看到一次就接收了 160 个字节，而非分 10 次接收</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5] binding...<br>08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5, L:/0:0:0:0:0:0:0:0:8080] bound...<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] REGISTERED<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] ACTIVE<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177]<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ: 160B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000010|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000020|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000030|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000040|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000050|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000060|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000070|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000080|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000090|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>+--------+-------------------------------------------------+----------------+<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ COMPLETE<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-半包现象\"><a href=\"#1-2-半包现象\" class=\"headerlink\" title=\"1.2 半包现象\"></a>1.2 半包现象</h3><p>客户端代码希望发送 1 个消息，这个消息是 160 字节，代码改为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>    buffer.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>&#125;);<br>&#125;<br>ctx.writeAndFlush(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>为现象明显，服务端修改一下接收缓冲区，其它代码不变</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">serverBootstrap.option(ChannelOption.SO_RCVBUF, <span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>服务器端的某次输出，可以看到接收的消息被分为两节，第一次 20 字节，第二次 140 字节</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84] binding...<br>08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84, L:/0:0:0:0:0:0:0:0:8080] bound...<br>08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] REGISTERED<br>08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] ACTIVE<br>08:44:23 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221]<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 20B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000010|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 140B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000010|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000020|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000030|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000040|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000050|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000060|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000070|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000080|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f             |............    |<br>+--------+-------------------------------------------------+----------------+<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong></p>\n<p>serverBootstrap.option(ChannelOption.SO_RCVBUF, 10) 影响的底层接收缓冲区（即滑动窗口）大小，仅决定了 netty 读取的最小单位，netty 实际每次读取的一般是它的整数倍</p>\n</blockquote>\n<h3 id=\"1-3-现象分析\"><a href=\"#1-3-现象分析\" class=\"headerlink\" title=\"1.3 现象分析\"></a>1.3 现象分析</h3><p>粘包</p>\n<ul>\n<li>现象，发送 abc def，接收 abcdef</li>\n<li>原因<ul>\n<li>应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）</li>\n<li>滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包</li>\n<li>Nagle 算法：会造成粘包</li>\n</ul>\n</li>\n</ul>\n<p>半包</p>\n<ul>\n<li>现象，发送 abcdef，接收 abc def</li>\n<li>原因<ul>\n<li>应用层：接收方 ByteBuf 小于实际发送数据量</li>\n<li>滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包</li>\n<li>MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包</li>\n</ul>\n</li>\n</ul>\n<p>本质是因为 TCP 是流式协议，消息无边界</p>\n<blockquote>\n<p>滑动窗口</p>\n<ul>\n<li><p>TCP 以一个段（segment）为单位，每发送一个段就需要进行一次确认应答（ack）处理，但如果这么做，缺点是包的往返时间越长性能就越差</p>\n<p><img src=\"/img/0049.png\"></p>\n</li>\n<li><p>为了解决此问题，引入了窗口概念，窗口大小即决定了无需等待应答而可以继续发送的数据最大值</p>\n<p><img src=\"/img/0051.png\"></p>\n</li>\n<li><p>窗口实际就起到一个缓冲区的作用，同时也能起到流量控制的作用</p>\n<ul>\n<li>图中深色的部分即要发送的数据，高亮的部分即窗口</li>\n<li>窗口内的数据才允许被发送，当应答未到达前，窗口必须停止滑动</li>\n<li>如果 1001~2000 这个段的数据 ack 回来了，窗口就可以向前滑动</li>\n<li>接收方也会维护一个窗口，只有落在窗口内的数据才能允许接收</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p> MSS 限制</p>\n<ul>\n<li><p>链路层对一次能够发送的最大数据有限制，这个限制称之为 MTU（maximum transmission unit），不同的链路设备的 MTU 值也有所不同，例如</p>\n</li>\n<li><p>以太网的 MTU 是 1500</p>\n</li>\n<li><p>FDDI（光纤分布式数据接口）的 MTU 是 4352</p>\n</li>\n<li><p>本地回环地址的 MTU 是 65535 - 本地测试不走网卡</p>\n</li>\n<li><p>MSS 是最大段长度（maximum segment size），它是 MTU 刨去 tcp 头和 ip 头后剩余能够作为数据传输的字节数</p>\n</li>\n<li><p>ipv4 tcp 头占用 20 bytes，ip 头占用 20 bytes，因此以太网 MSS 的值为 1500 - 40 &#x3D; 1460</p>\n</li>\n<li><p>TCP 在传递大量数据时，会按照 MSS 大小将数据进行分割发送</p>\n</li>\n<li><p>MSS 的值在三次握手时通知对方自己 MSS 的值，然后在两者之间选择一个小值作为 MSS</p>\n</li>\n</ul>\n  <img src=\"img/0031.jpg\" style=\"zoom:50%;\" />\n</blockquote>\n<blockquote>\n<p>Nagle 算法</p>\n<ul>\n<li>即使发送一个字节，也需要加入 tcp 头和 ip 头，也就是总字节数会使用 41 bytes，非常不经济。因此为了提高网络利用率，tcp 希望尽可能发送足够大的数据，这就是 Nagle 算法产生的缘由</li>\n<li>该算法是指发送端即使还有应该发送的数据，但如果这部分数据很少的话，则进行延迟发送<ul>\n<li>如果 SO_SNDBUF 的数据达到 MSS，则需要发送</li>\n<li>如果 SO_SNDBUF 中含有 FIN（表示需要连接关闭）这时将剩余数据发送，再关闭</li>\n<li>如果 TCP_NODELAY &#x3D; true，则需要发送</li>\n<li>已发送的数据都收到 ack 时，则需要发送</li>\n<li>上述条件不满足，但发生超时（一般为 200ms）则需要发送</li>\n<li>除上述情况，延迟发送</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"1-4-解决方案\"><a href=\"#1-4-解决方案\" class=\"headerlink\" title=\"1.4 解决方案\"></a>1.4 解决方案</h3><ol>\n<li>短链接，发一个包建立一次连接，这样连接建立到连接断开之间就是消息的边界，缺点效率太低</li>\n<li>每一条消息采用固定长度，缺点浪费空间</li>\n<li>每一条消息采用分隔符，例如 \\n，缺点需要转义</li>\n<li>每一条消息分为 head 和 body，head 中包含 body 的长度</li>\n</ol>\n<h4 id=\"方法1，短链接\"><a href=\"#方法1，短链接\" class=\"headerlink\" title=\"方法1，短链接\"></a>方法1，短链接</h4><p>以解决粘包为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 分 10 次发送</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            send();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">send</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;conneted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                            buffer.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>&#125;);<br>                            ctx.writeAndFlush(buffer);<br>                            <span class=\"hljs-comment\">// 发完即关</span><br>                            ctx.close();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出，略</p>\n<blockquote>\n<p>半包用这种办法还是不好解决，因为接收方的缓冲区大小是有限的</p>\n</blockquote>\n<h4 id=\"方法2，固定长度\"><a href=\"#方法2，固定长度\" class=\"headerlink\" title=\"方法2，固定长度\"></a>方法2，固定长度</h4><p>让所有数据包长度固定（假设长度为 8 字节），服务器端加入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FixedLengthFrameDecoder</span>(<span class=\"hljs-number\">8</span>));<br></code></pre></td></tr></table></figure>\n\n<p>客户端测试代码，注意, 采用这种方法后，客户端什么时候 flush 都可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-comment\">// 发送内容随机的数据包</span><br>                            <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>                            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>                            <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>                                <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">8</span>];<br>                                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; r.nextInt(<span class=\"hljs-number\">8</span>); j++) &#123;<br>                                    bytes[j] = (<span class=\"hljs-type\">byte</span>) c;<br>                                &#125;<br>                                c++;<br>                                buffer.writeBytes(bytes);<br>                            &#125;<br>                            ctx.writeAndFlush(buffer);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;192.168.0.103&quot;</span>, <span class=\"hljs-number\">9090</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端输出</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] REGISTERED<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] CONNECT: /192.168.0.103:9090<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] ACTIVE<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] WRITE: 80B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 62 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |aaaa....b.......|<br>|00000010|<span class=\"hljs-number\"> 63 </span>63<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 64 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |cc......d.......|<br>|00000020|<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |........ffff....|<br>|00000030|<span class=\"hljs-number\"> 67 </span>67<span class=\"hljs-number\"> 67 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 68 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |ggg.....h.......|<br>|00000040|<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>00<span class=\"hljs-number\"> 00 </span>00 6a 6a 6a 6a<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |iiiii...jjjj....|<br>+--------+-------------------------------------------------+----------------+<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] FLUSH<br></code></pre></td></tr></table></figure>\n\n<p>服务端输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f] binding...<br>12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f, L:/192.168.0.103:9090] bound...<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] REGISTERED<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] ACTIVE<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155]<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 61 61 61 61 00 00 00 00                         |aaaa....        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 62 00 00 00 00 00 00 00                         |b.......        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 63 63 00 00 00 00 00 00                         |cc......        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 64 00 00 00 00 00 00 00                         |d.......        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 00 00 00 00 00 00 00 00                         |........        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 66 66 66 00 00 00 00                         |ffff....        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 67 67 67 00 00 00 00 00                         |ggg.....        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 00 00 00 00 00 00 00                         |h.......        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 69 69 69 69 69 00 00 00                         |iiiii...        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6a 6a 6a 6a 00 00 00 00                         |jjjj....        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ COMPLETE<br></code></pre></td></tr></table></figure>\n\n<p>缺点是，数据包的大小不好把握</p>\n<ul>\n<li>长度定的太大，浪费</li>\n<li>长度定的太小，对某些数据包又显得不够</li>\n</ul>\n<h4 id=\"方法3，固定分隔符\"><a href=\"#方法3，固定分隔符\" class=\"headerlink\" title=\"方法3，固定分隔符\"></a>方法3，固定分隔符</h4><p>服务端加入，默认以 \\n 或 \\r\\n 作为分隔符，如果超出指定长度仍未出现分隔符，则抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LineBasedFrameDecoder</span>(<span class=\"hljs-number\">1024</span>));<br></code></pre></td></tr></table></figure>\n\n<p>客户端在每条消息之后，加入 \\n 分隔符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>                            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>                            <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>                                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt;= r.nextInt(<span class=\"hljs-number\">16</span>)+<span class=\"hljs-number\">1</span>; j++) &#123;<br>                                    buffer.writeByte((<span class=\"hljs-type\">byte</span>) c);<br>                                &#125;<br>                                buffer.writeByte(<span class=\"hljs-number\">10</span>);<br>                                c++;<br>                            &#125;<br>                            ctx.writeAndFlush(buffer);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;192.168.0.103&quot;</span>, <span class=\"hljs-number\">9090</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端输出</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] REGISTERED<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] CONNECT: /192.168.0.103:9090<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] ACTIVE<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] WRITE: 60B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 61 </span>0a<span class=\"hljs-number\"> 62 </span>62<span class=\"hljs-number\"> 62 </span>0a<span class=\"hljs-number\"> 63 </span>63<span class=\"hljs-number\"> 63 </span>0a<span class=\"hljs-number\"> 64 </span>64 0a<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>|a.bbb.ccc.dd.eee|<br>|00000010|<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>0a<span class=\"hljs-number\"> 66 </span>66 0a<span class=\"hljs-number\"> 67 </span>67<span class=\"hljs-number\"> 67 </span>67<span class=\"hljs-number\"> 67 </span>|eeeeeee.ff.ggggg|<br>|00000020|<span class=\"hljs-number\"> 67 </span>67 0a<span class=\"hljs-number\"> 68 </span>68<span class=\"hljs-number\"> 68 </span>68 0a<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>0a |gg.hhhh.iiiiiii.|<br>|00000030| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 0a             |jjjjjjjjjjj.    |<br>+--------+-------------------------------------------------+----------------+<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] FLUSH<br></code></pre></td></tr></table></figure>\n\n\n\n<p>服务端输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] c.i.n.HelloWorldServer - connected [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641]<br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 1B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 61                                              |a               |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 62 62 62                                        |bbb             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 63 63 63                                        |ccc             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 64 64                                           |dd              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 10B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 65 65 65 65 65 65 65 65 65 65                   |eeeeeeeeee      |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 66                                           |ff              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 67 67 67 67 67 67 67                            |ggggggg         |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 4B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 68 68 68                                     |hhhh            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 69 69 69 69 69 69 69                            |iiiiiii         |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 11B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a                |jjjjjjjjjjj     |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ COMPLETE<br></code></pre></td></tr></table></figure>\n\n<p>缺点，处理字符数据比较合适，但如果内容本身包含了分隔符（字节数据常常会有此情况），那么就会解析错误</p>\n<h4 id=\"方法4，预设长度\"><a href=\"#方法4，预设长度\" class=\"headerlink\" title=\"方法4，预设长度\"></a>方法4，预设长度</h4><p>在发送消息前，先约定用定长字节表示接下来数据的长度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 最大长度，长度偏移，长度占用字节，长度调整，剥离字节数</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LengthFieldBasedFrameDecoder</span>(<span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>));<br></code></pre></td></tr></table></figure>\n\n<p>客户端代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>                            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>                            <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>                                <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">byte</span>) (r.nextInt(<span class=\"hljs-number\">16</span>) + <span class=\"hljs-number\">1</span>);<br>                                <span class=\"hljs-comment\">// 先写入长度</span><br>                                buffer.writeByte(length);<br>                                <span class=\"hljs-comment\">// 再</span><br>                                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt;= length; j++) &#123;<br>                                    buffer.writeByte((<span class=\"hljs-type\">byte</span>) c);<br>                                &#125;<br>                                c++;<br>                            &#125;<br>                            ctx.writeAndFlush(buffer);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;192.168.0.103&quot;</span>, <span class=\"hljs-number\">9090</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>客户端输出</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] REGISTERED<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] CONNECT: /192.168.0.103:9090<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] ACTIVE<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] WRITE: 97B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 09 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 09 </span>62<span class=\"hljs-number\"> 62 </span>62<span class=\"hljs-number\"> 62 </span>62 |.aaaaaaaaa.bbbbb|<br>|00000010|<span class=\"hljs-number\"> 62 </span>62<span class=\"hljs-number\"> 62 </span>62<span class=\"hljs-number\"> 06 </span>63<span class=\"hljs-number\"> 63 </span>63<span class=\"hljs-number\"> 63 </span>63<span class=\"hljs-number\"> 63 </span>08<span class=\"hljs-number\"> 64 </span>64<span class=\"hljs-number\"> 64 </span>64 |bbbb.cccccc.dddd|<br>|00000020|<span class=\"hljs-number\"> 64 </span>64<span class=\"hljs-number\"> 64 </span>64 0f<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>|dddd.eeeeeeeeeee|<br>|00000030|<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65 0d<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>|eeee.fffffffffff|<br>|00000040|<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 02 </span>67<span class=\"hljs-number\"> 67 </span>02<span class=\"hljs-number\"> 68 </span>68 0e<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>|ff.gg.hh.iiiiiii|<br>|00000050|<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>09 6a 6a 6a 6a 6a 6a 6a 6a |iiiiiii.jjjjjjjj|<br>|00000060| 6a                                              |j               |<br>+--------+-------------------------------------------------+----------------+<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] FLUSH<br></code></pre></td></tr></table></figure>\n\n\n\n<p>服务端输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">14:36:50 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3] binding...<br>14:36:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3, L:/192.168.0.103:9090] bound...<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] REGISTERED<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] ACTIVE<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979]<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 61 61 61 61 61 61 61 61 61                      |aaaaaaaaa       |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 62 62 62 62 62 62 62 62 62                      |bbbbbbbbb       |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 6B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 63 63 63 63 63 63                               |cccccc          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 64 64 64 64 64 64 64 64                         |dddddddd        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 15B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65    |eeeeeeeeeeeeeee |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 13B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 66 66 66 66 66 66 66 66 66 66 66 66          |fffffffffffff   |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 67 67                                           |gg              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 68                                           |hh              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 14B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 69 69 69 69 69 69 69 69 69 69 69 69 69 69       |iiiiiiiiiiiiii  |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a                      |jjjjjjjjj       |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ COMPLETE<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-协议设计与解析\"><a href=\"#2-协议设计与解析\" class=\"headerlink\" title=\"2. 协议设计与解析\"></a>2. 协议设计与解析</h2><h3 id=\"2-1-为什么需要协议？\"><a href=\"#2-1-为什么需要协议？\" class=\"headerlink\" title=\"2.1 为什么需要协议？\"></a>2.1 为什么需要协议？</h3><p>TCP&#x2F;IP 中消息传输基于流的方式，没有边界。</p>\n<p>协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则</p>\n<p>例如：在网络上传输</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">下雨天留客天留我不留<br></code></pre></td></tr></table></figure>\n\n<p>是中文一句著名的无标点符号句子，在没有标点符号情况下，这句话有数种拆解方式，而意思却是完全不同，所以常被用作讲述标点符号的重要性</p>\n<p>一种解读</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">下雨天留客，天留，我不留<br></code></pre></td></tr></table></figure>\n\n<p>另一种解读</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">下雨天，留客天，留我不？留<br></code></pre></td></tr></table></figure>\n\n\n\n<p>如何设计协议呢？其实就是给网络传输的信息加上“标点符号”。但通过分隔符来断句不是很好，因为分隔符本身如果用于传输，那么必须加以区分。因此，下面一种协议较为常用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">定长字节表示内容长度 + 实际内容<br></code></pre></td></tr></table></figure>\n\n<p>例如，假设一个中文字符长度为 3，按照上述协议的规则，发送信息方式如下，就不会被接收方弄错意思了</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">0f</span>下雨天留客<span class=\"hljs-number\">06</span>天留<span class=\"hljs-number\">09</span>我不留<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>小故事</p>\n<p>很久很久以前，一位私塾先生到一家任教。双方签订了一纸协议：“无鸡鸭亦可无鱼肉亦可白菜豆腐不可少不得束修金”。此后，私塾先生虽然认真教课，但主人家则总是给私塾先生以白菜豆腐为菜，丝毫未见鸡鸭鱼肉的款待。私塾先生先是很不解，可是后来也就想通了：主人把鸡鸭鱼肉的钱都会换为束修金的，也罢。至此双方相安无事。</p>\n<p>年关将至，一个学年段亦告结束。私塾先生临行时，也不见主人家为他交付束修金，遂与主家理论。然主家亦振振有词：“有协议为证——无鸡鸭亦可，无鱼肉亦可，白菜豆腐不可少，不得束修金。这白纸黑字明摆着的，你有什么要说的呢？”</p>\n<p>私塾先生据理力争：“协议是这样的——无鸡，鸭亦可；无鱼，肉亦可；白菜豆腐不可，少不得束修金。”</p>\n<p>双方唇枪舌战，你来我往，真个是不亦乐乎！</p>\n<p>这里的束修金，也作“束脩”，应当是泛指教师应当得到的报酬</p>\n</blockquote>\n<h3 id=\"2-2-redis-协议举例\"><a href=\"#2-2-redis-协议举例\" class=\"headerlink\" title=\"2.2 redis 协议举例\"></a>2.2 redis 协议举例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br><span class=\"hljs-type\">byte</span>[] LINE = &#123;<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">10</span>&#125;;<br><span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>    bootstrap.channel(NioSocketChannel.class);<br>    bootstrap.group(worker);<br>    bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>());<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class=\"hljs-comment\">// 会在连接 channel 建立成功后，会触发 active 事件</span><br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>                    set(ctx);<br>                    get(ctx);<br>                &#125;<br>                <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;*2&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;get&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;aaa&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    ctx.writeAndFlush(buf);<br>                &#125;<br>                <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;*3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;set&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;aaa&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;bbb&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    ctx.writeAndFlush(buf);<br>                &#125;<br><br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> (ByteBuf) msg;<br>                    System.out.println(buf.toString(Charset.defaultCharset()));<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>    <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">6379</span>).sync();<br>    channelFuture.channel().closeFuture().sync();<br>&#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>    log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>    worker.shutdownGracefully();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-http-协议举例\"><a href=\"#2-3-http-协议举例\" class=\"headerlink\" title=\"2.3 http 协议举例\"></a>2.3 http 协议举例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">boss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br><span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-type\">ServerBootstrap</span> <span class=\"hljs-variable\">serverBootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>();<br>    serverBootstrap.channel(NioServerSocketChannel.class);<br>    serverBootstrap.group(boss, worker);<br>    serverBootstrap.childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpServerCodec</span>());<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;HttpRequest&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, HttpRequest msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    <span class=\"hljs-comment\">// 获取请求</span><br>                    log.debug(msg.uri());<br><br>                    <span class=\"hljs-comment\">// 返回响应</span><br>                    <span class=\"hljs-type\">DefaultFullHttpResponse</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span><br>                            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultFullHttpResponse</span>(msg.protocolVersion(), HttpResponseStatus.OK);<br><br>                    <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-string\">&quot;&lt;h1&gt;Hello, world!&lt;/h1&gt;&quot;</span>.getBytes();<br><br>                    response.headers().setInt(CONTENT_LENGTH, bytes.length);<br>                    response.content().writeBytes(bytes);<br><br>                    <span class=\"hljs-comment\">// 写回响应</span><br>                    ctx.writeAndFlush(response);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-comment\">/*ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"hljs-comment\">                @Override</span><br><span class=\"hljs-comment\">                public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class=\"hljs-comment\">                    log.debug(&quot;&#123;&#125;&quot;, msg.getClass());</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                    if (msg instanceof HttpRequest) &#123; // 请求行，请求头</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                    &#125; else if (msg instanceof HttpContent) &#123; //请求体</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                    &#125;</span><br><span class=\"hljs-comment\">                &#125;</span><br><span class=\"hljs-comment\">            &#125;);*/</span><br>        &#125;<br>    &#125;);<br>    <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> serverBootstrap.bind(<span class=\"hljs-number\">8080</span>).sync();<br>    channelFuture.channel().closeFuture().sync();<br>&#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>    log.error(<span class=\"hljs-string\">&quot;server error&quot;</span>, e);<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>    boss.shutdownGracefully();<br>    worker.shutdownGracefully();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-自定义协议要素\"><a href=\"#2-4-自定义协议要素\" class=\"headerlink\" title=\"2.4 自定义协议要素\"></a>2.4 自定义协议要素</h3><ul>\n<li>魔数，用来在第一时间判定是否是无效数据包</li>\n<li>版本号，可以支持协议的升级</li>\n<li>序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk</li>\n<li>指令类型，是登录、注册、单聊、群聊… 跟业务相关</li>\n<li>请求序号，为了双工通信，提供异步能力</li>\n<li>正文长度</li>\n<li>消息正文</li>\n</ul>\n<h4 id=\"编解码器\"><a href=\"#编解码器\" class=\"headerlink\" title=\"编解码器\"></a>编解码器</h4><p>根据上面的要素，设计一个登录请求消息和登录响应消息，并使用 Netty 完成收发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MessageCodec</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ByteToMessageCodec</span>&lt;Message&gt; &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">encode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Message msg, ByteBuf out)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 1. 4 字节的魔数</span><br>        out.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>        <span class=\"hljs-comment\">// 2. 1 字节的版本,</span><br>        out.writeByte(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-comment\">// 3. 1 字节的序列化方式 jdk 0 , json 1</span><br>        out.writeByte(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-comment\">// 4. 1 字节的指令类型</span><br>        out.writeByte(msg.getMessageType());<br>        <span class=\"hljs-comment\">// 5. 4 个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class=\"hljs-comment\">// 无意义，对齐填充</span><br>        out.writeByte(<span class=\"hljs-number\">0xff</span>);<br>        <span class=\"hljs-comment\">// 6. 获取内容的字节数组</span><br>        <span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">bos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br>        <span class=\"hljs-type\">ObjectOutputStream</span> <span class=\"hljs-variable\">oos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectOutputStream</span>(bos);<br>        oos.writeObject(msg);<br>        <span class=\"hljs-type\">byte</span>[] bytes = bos.toByteArray();<br>        <span class=\"hljs-comment\">// 7. 长度</span><br>        out.writeInt(bytes.length);<br>        <span class=\"hljs-comment\">// 8. 写入内容</span><br>        out.writeBytes(bytes);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">magicNum</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">version</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">serializerType</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">messageType</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sequenceId</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[length];<br>        in.readBytes(bytes, <span class=\"hljs-number\">0</span>, length);<br>        <span class=\"hljs-type\">ObjectInputStream</span> <span class=\"hljs-variable\">ois</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(bytes));<br>        <span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> (Message) ois.readObject();<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, magicNum, version, serializerType, messageType, sequenceId, length);<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, message);<br>        out.add(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">EmbeddedChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EmbeddedChannel</span>(<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(),<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LengthFieldBasedFrameDecoder</span>(<br>        <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodec</span>()<br>);<br><span class=\"hljs-comment\">// encode</span><br><span class=\"hljs-type\">LoginRequestMessage</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginRequestMessage</span>(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>, <span class=\"hljs-string\">&quot;123&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>);<br><span class=\"hljs-comment\">//        channel.writeOutbound(message);</span><br><span class=\"hljs-comment\">// decode</span><br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer();<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodec</span>().encode(<span class=\"hljs-literal\">null</span>, message, buf);<br><br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">s1</span> <span class=\"hljs-operator\">=</span> buf.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>);<br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">s2</span> <span class=\"hljs-operator\">=</span> buf.slice(<span class=\"hljs-number\">100</span>, buf.readableBytes() - <span class=\"hljs-number\">100</span>);<br>s1.retain(); <span class=\"hljs-comment\">// 引用计数 2</span><br>channel.writeInbound(s1); <span class=\"hljs-comment\">// release 1</span><br>channel.writeInbound(s2);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>解读</p>\n<p><img src=\"/img/0013.png\"></p>\n<h4 id=\"💡-什么时候可以加-Sharable\"><a href=\"#💡-什么时候可以加-Sharable\" class=\"headerlink\" title=\"💡 什么时候可以加 @Sharable\"></a>💡 什么时候可以加 @Sharable</h4><ul>\n<li>当 handler 不保存状态时，就可以安全地在多线程下被共享</li>\n<li>但要注意对于编解码器类，不能继承 ByteToMessageCodec 或 CombinedChannelDuplexHandler 父类，他们的构造方法对 @Sharable 有限制</li>\n<li>如果能确保编解码器不会保存状态，可以继承 MessageToMessageCodec 父类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MessageCodecSharable</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MessageToMessageCodec</span>&lt;ByteBuf, Message&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">encode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Message msg, List&lt;Object&gt; outList)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>        <span class=\"hljs-comment\">// 1. 4 字节的魔数</span><br>        out.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>        <span class=\"hljs-comment\">// 2. 1 字节的版本,</span><br>        out.writeByte(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-comment\">// 3. 1 字节的序列化方式 jdk 0 , json 1</span><br>        out.writeByte(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-comment\">// 4. 1 字节的指令类型</span><br>        out.writeByte(msg.getMessageType());<br>        <span class=\"hljs-comment\">// 5. 4 个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class=\"hljs-comment\">// 无意义，对齐填充</span><br>        out.writeByte(<span class=\"hljs-number\">0xff</span>);<br>        <span class=\"hljs-comment\">// 6. 获取内容的字节数组</span><br>        <span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">bos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br>        <span class=\"hljs-type\">ObjectOutputStream</span> <span class=\"hljs-variable\">oos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectOutputStream</span>(bos);<br>        oos.writeObject(msg);<br>        <span class=\"hljs-type\">byte</span>[] bytes = bos.toByteArray();<br>        <span class=\"hljs-comment\">// 7. 长度</span><br>        out.writeInt(bytes.length);<br>        <span class=\"hljs-comment\">// 8. 写入内容</span><br>        out.writeBytes(bytes);<br>        outList.add(out);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">magicNum</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">version</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">serializerType</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">messageType</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sequenceId</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[length];<br>        in.readBytes(bytes, <span class=\"hljs-number\">0</span>, length);<br>        <span class=\"hljs-type\">ObjectInputStream</span> <span class=\"hljs-variable\">ois</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(bytes));<br>        <span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> (Message) ois.readObject();<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, magicNum, version, serializerType, messageType, sequenceId, length);<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, message);<br>        out.add(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-聊天室案例\"><a href=\"#3-聊天室案例\" class=\"headerlink\" title=\"3. 聊天室案例\"></a>3. 聊天室案例</h2><h3 id=\"3-1-聊天室业务介绍\"><a href=\"#3-1-聊天室业务介绍\" class=\"headerlink\" title=\"3.1 聊天室业务介绍\"></a>3.1 聊天室业务介绍</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 用户管理接口</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 登录</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> username 用户名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> password 密码</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 登录成功返回 true, 否则返回 false</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(String username, String password)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 会话管理接口</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Session</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 绑定会话</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> channel 哪个 channel 要绑定会话</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> username 会话绑定用户</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bind</span><span class=\"hljs-params\">(Channel channel, String username)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 解绑会话</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> channel 哪个 channel 要解绑会话</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">unbind</span><span class=\"hljs-params\">(Channel channel)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取属性</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> channel 哪个 channel</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 属性名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 属性值</span><br><span class=\"hljs-comment\">     */</span><br>    Object <span class=\"hljs-title function_\">getAttribute</span><span class=\"hljs-params\">(Channel channel, String name)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置属性</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> channel 哪个 channel</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 属性名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> value 属性值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAttribute</span><span class=\"hljs-params\">(Channel channel, String name, Object value)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 根据用户名获取 channel</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> username 用户名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> channel</span><br><span class=\"hljs-comment\">     */</span><br>    Channel <span class=\"hljs-title function_\">getChannel</span><span class=\"hljs-params\">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 聊天组会话管理接口</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GroupSession</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建一个聊天组, 如果不存在才能创建成功, 否则返回 null</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> members 成员</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 成功时返回组对象, 失败返回 null</span><br><span class=\"hljs-comment\">     */</span><br>    Group <span class=\"hljs-title function_\">createGroup</span><span class=\"hljs-params\">(String name, Set&lt;String&gt; members)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 加入聊天组</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> member 成员名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 如果组不存在返回 null, 否则返回组对象</span><br><span class=\"hljs-comment\">     */</span><br>    Group <span class=\"hljs-title function_\">joinMember</span><span class=\"hljs-params\">(String name, String member)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 移除组成员</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> member 成员名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 如果组不存在返回 null, 否则返回组对象</span><br><span class=\"hljs-comment\">     */</span><br>    Group <span class=\"hljs-title function_\">removeMember</span><span class=\"hljs-params\">(String name, String member)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 移除聊天组</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 如果组不存在返回 null, 否则返回组对象</span><br><span class=\"hljs-comment\">     */</span><br>    Group <span class=\"hljs-title function_\">removeGroup</span><span class=\"hljs-params\">(String name)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取组成员</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 成员集合, 没有成员会返回 empty set</span><br><span class=\"hljs-comment\">     */</span><br>    Set&lt;String&gt; <span class=\"hljs-title function_\">getMembers</span><span class=\"hljs-params\">(String name)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取组成员的 channel 集合, 只有在线的 channel 才会返回</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 成员 channel 集合</span><br><span class=\"hljs-comment\">     */</span><br>    List&lt;Channel&gt; <span class=\"hljs-title function_\">getMembersChannel</span><span class=\"hljs-params\">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-聊天室业务-登录\"><a href=\"#3-2-聊天室业务-登录\" class=\"headerlink\" title=\"3.2 聊天室业务-登录\"></a>3.2 聊天室业务-登录</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">boss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">ServerBootstrap</span> <span class=\"hljs-variable\">serverBootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;LoginRequestMessage&gt;() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, LoginRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">username</span> <span class=\"hljs-operator\">=</span> msg.getUsername();<br>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> msg.getPassword();<br>                            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">login</span> <span class=\"hljs-operator\">=</span> UserServiceFactory.getUserService().login(username, password);<br>                            LoginResponseMessage message;<br>                            <span class=\"hljs-keyword\">if</span>(login) &#123;<br>                                message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginResponseMessage</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;登录成功&quot;</span>);<br>                            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                                message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginResponseMessage</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&quot;用户名或密码不正确&quot;</span>);<br>                            &#125;<br>                            ctx.writeAndFlush(message);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> serverBootstrap.bind(<span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;server error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <span class=\"hljs-type\">CountDownLatch</span> <span class=\"hljs-variable\">WAIT_FOR_LOGIN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CountDownLatch</span>(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-type\">AtomicBoolean</span> <span class=\"hljs-variable\">LOGIN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicBoolean</span>(<span class=\"hljs-literal\">false</span>);<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(group);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br><span class=\"hljs-comment\">//                    ch.pipeline().addLast(LOGGING_HANDLER);</span><br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(<span class=\"hljs-string\">&quot;client handler&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-comment\">// 接收响应消息</span><br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;msg: &#123;&#125;&quot;</span>, msg);<br>                            <span class=\"hljs-keyword\">if</span> ((msg <span class=\"hljs-keyword\">instanceof</span> LoginResponseMessage)) &#123;<br>                                <span class=\"hljs-type\">LoginResponseMessage</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> (LoginResponseMessage) msg;<br>                                <span class=\"hljs-keyword\">if</span> (response.isSuccess()) &#123;<br>                                    <span class=\"hljs-comment\">// 如果登录成功</span><br>                                    LOGIN.set(<span class=\"hljs-literal\">true</span>);<br>                                &#125;<br>                                <span class=\"hljs-comment\">// 唤醒 system in 线程</span><br>                                WAIT_FOR_LOGIN.countDown();<br>                            &#125;<br>                        &#125;<br><br>                        <span class=\"hljs-comment\">// 在连接建立后触发 active 事件</span><br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            <span class=\"hljs-comment\">// 负责接收用户在控制台的输入，负责向服务器发送各种消息</span><br>                            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                                <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);<br>                                System.out.println(<span class=\"hljs-string\">&quot;请输入用户名:&quot;</span>);<br>                                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">username</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>                                System.out.println(<span class=\"hljs-string\">&quot;请输入密码:&quot;</span>);<br>                                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>                                <span class=\"hljs-comment\">// 构造消息对象</span><br>                                <span class=\"hljs-type\">LoginRequestMessage</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginRequestMessage</span>(username, password);<br>                                <span class=\"hljs-comment\">// 发送消息</span><br>                                ctx.writeAndFlush(message);<br>                                System.out.println(<span class=\"hljs-string\">&quot;等待后续操作...&quot;</span>);<br>                                <span class=\"hljs-keyword\">try</span> &#123;<br>                                    WAIT_FOR_LOGIN.await();<br>                                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                                    e.printStackTrace();<br>                                &#125;<br>                                <span class=\"hljs-comment\">// 如果登录失败</span><br>                                <span class=\"hljs-keyword\">if</span> (!LOGIN.get()) &#123;<br>                                    ctx.channel().close();<br>                                    <span class=\"hljs-keyword\">return</span>;<br>                                &#125;<br>                                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                                    System.out.println(<span class=\"hljs-string\">&quot;==================================&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;send [username] [content]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gsend [group name] [content]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gcreate [group name] [m1,m2,m3...]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gmembers [group name]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gjoin [group name]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gquit [group name]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;quit&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;==================================&quot;</span>);<br>                                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">command</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>                                    String[] s = command.split(<span class=\"hljs-string\">&quot; &quot;</span>);<br>                                    <span class=\"hljs-keyword\">switch</span> (s[<span class=\"hljs-number\">0</span>])&#123;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;send&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChatRequestMessage</span>(username, s[<span class=\"hljs-number\">1</span>], s[<span class=\"hljs-number\">2</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gsend&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupChatRequestMessage</span>(username, s[<span class=\"hljs-number\">1</span>], s[<span class=\"hljs-number\">2</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gcreate&quot;</span>:<br>                                            Set&lt;String&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;(Arrays.asList(s[<span class=\"hljs-number\">2</span>].split(<span class=\"hljs-string\">&quot;,&quot;</span>)));<br>                                            set.add(username); <span class=\"hljs-comment\">// 加入自己</span><br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupCreateRequestMessage</span>(s[<span class=\"hljs-number\">1</span>], set));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gmembers&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupMembersRequestMessage</span>(s[<span class=\"hljs-number\">1</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gjoin&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinRequestMessage</span>(username, s[<span class=\"hljs-number\">1</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gquit&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupQuitRequestMessage</span>(username, s[<span class=\"hljs-number\">1</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;quit&quot;</span>:<br>                                            ctx.channel().close();<br>                                            <span class=\"hljs-keyword\">return</span>;<br>                                    &#125;<br>                                &#125;<br>                            &#125;, <span class=\"hljs-string\">&quot;system in&quot;</span>).start();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-聊天室业务-单聊\"><a href=\"#3-3-聊天室业务-单聊\" class=\"headerlink\" title=\"3.3 聊天室业务-单聊\"></a>3.3 聊天室业务-单聊</h3><p>服务器端将 handler 独立出来</p>\n<p>登录 handler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;LoginRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, LoginRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">username</span> <span class=\"hljs-operator\">=</span> msg.getUsername();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> msg.getPassword();<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">login</span> <span class=\"hljs-operator\">=</span> UserServiceFactory.getUserService().login(username, password);<br>        LoginResponseMessage message;<br>        <span class=\"hljs-keyword\">if</span>(login) &#123;<br>            SessionFactory.getSession().bind(ctx.channel(), username);<br>            message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginResponseMessage</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;登录成功&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginResponseMessage</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&quot;用户名或密码不正确&quot;</span>);<br>        &#125;<br>        ctx.writeAndFlush(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>单聊 handler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;ChatRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, ChatRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">to</span> <span class=\"hljs-operator\">=</span> msg.getTo();<br>        <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> SessionFactory.getSession().getChannel(to);<br>        <span class=\"hljs-comment\">// 在线</span><br>        <span class=\"hljs-keyword\">if</span>(channel != <span class=\"hljs-literal\">null</span>) &#123;<br>            channel.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChatResponseMessage</span>(msg.getFrom(), msg.getContent()));<br>        &#125;<br>        <span class=\"hljs-comment\">// 不在线</span><br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChatResponseMessage</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&quot;对方用户不存在或者不在线&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-4-聊天室业务-群聊\"><a href=\"#3-4-聊天室业务-群聊\" class=\"headerlink\" title=\"3.4 聊天室业务-群聊\"></a>3.4 聊天室业务-群聊</h3><p>创建群聊</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupCreateRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupCreateRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupCreateRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">groupName</span> <span class=\"hljs-operator\">=</span> msg.getGroupName();<br>        Set&lt;String&gt; members = msg.getMembers();<br>        <span class=\"hljs-comment\">// 群管理器</span><br>        <span class=\"hljs-type\">GroupSession</span> <span class=\"hljs-variable\">groupSession</span> <span class=\"hljs-operator\">=</span> GroupSessionFactory.getGroupSession();<br>        <span class=\"hljs-type\">Group</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> groupSession.createGroup(groupName, members);<br>        <span class=\"hljs-keyword\">if</span> (group == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 发生成功消息</span><br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupCreateResponseMessage</span>(<span class=\"hljs-literal\">true</span>, groupName + <span class=\"hljs-string\">&quot;创建成功&quot;</span>));<br>            <span class=\"hljs-comment\">// 发送拉群消息</span><br>            List&lt;Channel&gt; channels = groupSession.getMembersChannel(groupName);<br>            <span class=\"hljs-keyword\">for</span> (Channel channel : channels) &#123;<br>                channel.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupCreateResponseMessage</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;您已被拉入&quot;</span> + groupName));<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupCreateResponseMessage</span>(<span class=\"hljs-literal\">false</span>, groupName + <span class=\"hljs-string\">&quot;已经存在&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>群聊</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupChatRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupChatRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupChatRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        List&lt;Channel&gt; channels = GroupSessionFactory.getGroupSession()<br>                .getMembersChannel(msg.getGroupName());<br><br>        <span class=\"hljs-keyword\">for</span> (Channel channel : channels) &#123;<br>            channel.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupChatResponseMessage</span>(msg.getFrom(), msg.getContent()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>加入群聊</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupJoinRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupJoinRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupJoinRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">Group</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> GroupSessionFactory.getGroupSession().joinMember(msg.getGroupName(), msg.getUsername());<br>        <span class=\"hljs-keyword\">if</span> (group != <span class=\"hljs-literal\">null</span>) &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinResponseMessage</span>(<span class=\"hljs-literal\">true</span>, msg.getGroupName() + <span class=\"hljs-string\">&quot;群加入成功&quot;</span>));<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinResponseMessage</span>(<span class=\"hljs-literal\">true</span>, msg.getGroupName() + <span class=\"hljs-string\">&quot;群不存在&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>退出群聊</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupQuitRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupQuitRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupQuitRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">Group</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> GroupSessionFactory.getGroupSession().removeMember(msg.getGroupName(), msg.getUsername());<br>        <span class=\"hljs-keyword\">if</span> (group != <span class=\"hljs-literal\">null</span>) &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinResponseMessage</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;已退出群&quot;</span> + msg.getGroupName()));<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinResponseMessage</span>(<span class=\"hljs-literal\">true</span>, msg.getGroupName() + <span class=\"hljs-string\">&quot;群不存在&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>查看成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupMembersRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupMembersRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupMembersRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        Set&lt;String&gt; members = GroupSessionFactory.getGroupSession()<br>                .getMembers(msg.getGroupName());<br>        ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupMembersResponseMessage</span>(members));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-5-聊天室业务-退出\"><a href=\"#3-5-聊天室业务-退出\" class=\"headerlink\" title=\"3.5 聊天室业务-退出\"></a>3.5 聊天室业务-退出</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-variable\">@Slf4j</span><br><span class=\"hljs-variable\">@ChannelHandler</span>.Sharable<br>public class QuitHandler extends ChannelInboundHandlerAdapter &#123;<br><br>    <span class=\"hljs-comment\">// 当连接断开时触发 inactive 事件</span><br>    <span class=\"hljs-variable\">@Override</span><br>    public void <span class=\"hljs-built_in\">channelInactive</span>(ChannelHandlerContext ctx) throws Exception &#123;<br>        <span class=\"hljs-selector-tag\">SessionFactory</span><span class=\"hljs-selector-class\">.getSession</span>()<span class=\"hljs-selector-class\">.unbind</span>(ctx.<span class=\"hljs-built_in\">channel</span>());<br>        <span class=\"hljs-selector-tag\">log</span><span class=\"hljs-selector-class\">.debug</span>(<span class=\"hljs-string\">&quot;&#123;&#125; 已经断开&quot;</span>, ctx.<span class=\"hljs-built_in\">channel</span>());<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 当出现异常时触发</span><br>    @<span class=\"hljs-selector-tag\">Override</span><br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">void</span> <span class=\"hljs-selector-tag\">exceptionCaught</span>(ChannelHandlerContext ctx, Throwable cause) <span class=\"hljs-selector-tag\">throws</span> <span class=\"hljs-selector-tag\">Exception</span> &#123;<br>        <span class=\"hljs-selector-tag\">SessionFactory</span><span class=\"hljs-selector-class\">.getSession</span>()<span class=\"hljs-selector-class\">.unbind</span>(ctx.<span class=\"hljs-built_in\">channel</span>());<br>        <span class=\"hljs-selector-tag\">log</span><span class=\"hljs-selector-class\">.debug</span>(<span class=\"hljs-string\">&quot;&#123;&#125; 已经异常断开 异常是&#123;&#125;&quot;</span>, ctx.<span class=\"hljs-built_in\">channel</span>(), cause.<span class=\"hljs-built_in\">getMessage</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-6-聊天室业务-空闲检测\"><a href=\"#3-6-聊天室业务-空闲检测\" class=\"headerlink\" title=\"3.6 聊天室业务-空闲检测\"></a>3.6 聊天室业务-空闲检测</h3><h4 id=\"连接假死\"><a href=\"#连接假死\" class=\"headerlink\" title=\"连接假死\"></a>连接假死</h4><p>原因</p>\n<ul>\n<li>网络设备出现故障，例如网卡，机房等，底层的 TCP 连接已经断开了，但应用程序没有感知到，仍然占用着资源。</li>\n<li>公网网络不稳定，出现丢包。如果连续出现丢包，这时现象就是客户端数据发不出去，服务端也一直收不到数据，就这么一直耗着</li>\n<li>应用程序线程阻塞，无法进行数据读写</li>\n</ul>\n<p>问题</p>\n<ul>\n<li>假死的连接占用的资源不能自动释放</li>\n<li>向假死的连接发送数据，得到的反馈是发送超时</li>\n</ul>\n<p>服务器端解决</p>\n<ul>\n<li>怎么判断客户端连接是否假死呢？如果能收到客户端数据，说明没有假死。因此策略就可以定为，每隔一段时间就检查这段时间内是否接收到客户端数据，没有就可以判定为连接假死</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 用来判断是不是 读空闲时间过长，或 写空闲时间过长</span><br><span class=\"hljs-comment\">// 5s 内如果没有收到 channel 的数据，会触发一个 IdleState#READER_IDLE 事件</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IdleStateHandler</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));<br><span class=\"hljs-comment\">// ChannelDuplexHandler 可以同时作为入站和出站处理器</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelDuplexHandler</span>() &#123;<br>    <span class=\"hljs-comment\">// 用来触发特殊事件</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">userEventTriggered</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object evt)</span> <span class=\"hljs-keyword\">throws</span> Exception&#123;<br>        <span class=\"hljs-type\">IdleStateEvent</span> <span class=\"hljs-variable\">event</span> <span class=\"hljs-operator\">=</span> (IdleStateEvent) evt;<br>        <span class=\"hljs-comment\">// 触发了读空闲事件</span><br>        <span class=\"hljs-keyword\">if</span> (event.state() == IdleState.READER_IDLE) &#123;<br>            log.debug(<span class=\"hljs-string\">&quot;已经 5s 没有读到数据了&quot;</span>);<br>            ctx.channel().close();<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>客户端定时心跳</p>\n<ul>\n<li>客户端可以定时向服务器端发送数据，只要这个时间间隔小于服务器定义的空闲检测的时间间隔，那么就能防止前面提到的误判，客户端可以定义如下心跳处理器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 用来判断是不是 读空闲时间过长，或 写空闲时间过长</span><br><span class=\"hljs-comment\">// 3s 内如果没有向服务器写数据，会触发一个 IdleState#WRITER_IDLE 事件</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IdleStateHandler</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>));<br><span class=\"hljs-comment\">// ChannelDuplexHandler 可以同时作为入站和出站处理器</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelDuplexHandler</span>() &#123;<br>    <span class=\"hljs-comment\">// 用来触发特殊事件</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">userEventTriggered</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object evt)</span> <span class=\"hljs-keyword\">throws</span> Exception&#123;<br>        <span class=\"hljs-type\">IdleStateEvent</span> <span class=\"hljs-variable\">event</span> <span class=\"hljs-operator\">=</span> (IdleStateEvent) evt;<br>        <span class=\"hljs-comment\">// 触发了写空闲事件</span><br>        <span class=\"hljs-keyword\">if</span> (event.state() == IdleState.WRITER_IDLE) &#123;<br>            <span class=\"hljs-comment\">//                                log.debug(&quot;3s 没有写数据了，发送一个心跳包&quot;);</span><br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PingMessage</span>());<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>该笔记是B站黑马的Netty视频的配套笔记3。</p>","more":"<h1 id=\"三-Netty-进阶\"><a href=\"#三-Netty-进阶\" class=\"headerlink\" title=\"三. Netty 进阶\"></a>三. Netty 进阶</h1><h2 id=\"1-粘包与半包\"><a href=\"#1-粘包与半包\" class=\"headerlink\" title=\"1. 粘包与半包\"></a>1. 粘包与半包</h2><h3 id=\"1-1-粘包现象\"><a href=\"#1-1-粘包现象\" class=\"headerlink\" title=\"1.1 粘包现象\"></a>1.1 粘包现象</h3><p>服务端代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldServer</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldServer.class);<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">start</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">boss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">ServerBootstrap</span> <span class=\"hljs-variable\">serverBootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;connected &#123;&#125;&quot;</span>, ctx.channel());<br>                            <span class=\"hljs-built_in\">super</span>.channelActive(ctx);<br>                        &#125;<br><br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelInactive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;disconnect &#123;&#125;&quot;</span>, ctx.channel());<br>                            <span class=\"hljs-built_in\">super</span>.channelInactive(ctx);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> serverBootstrap.bind(<span class=\"hljs-number\">8080</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;&#123;&#125; binding...&quot;</span>, channelFuture.channel());<br>            channelFuture.sync();<br>            log.debug(<span class=\"hljs-string\">&quot;&#123;&#125; bound...&quot;</span>, channelFuture.channel());<br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;server error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>            log.debug(<span class=\"hljs-string\">&quot;stoped&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HelloWorldServer</span>().start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端代码希望发送 10 个消息，每个消息是 16 字节</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>                            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>                                <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                                buffer.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>&#125;);<br>                                ctx.writeAndFlush(buffer);<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>服务器端的某次输出，可以看到一次就接收了 160 个字节，而非分 10 次接收</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5] binding...<br>08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5, L:/0:0:0:0:0:0:0:0:8080] bound...<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] REGISTERED<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] ACTIVE<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177]<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ: 160B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000010|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000020|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000030|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000040|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000050|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000060|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000070|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000080|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000090|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>+--------+-------------------------------------------------+----------------+<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ COMPLETE<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-半包现象\"><a href=\"#1-2-半包现象\" class=\"headerlink\" title=\"1.2 半包现象\"></a>1.2 半包现象</h3><p>客户端代码希望发送 1 个消息，这个消息是 160 字节，代码改为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>    buffer.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>&#125;);<br>&#125;<br>ctx.writeAndFlush(buffer);<br></code></pre></td></tr></table></figure>\n\n<p>为现象明显，服务端修改一下接收缓冲区，其它代码不变</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">serverBootstrap.option(ChannelOption.SO_RCVBUF, <span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>服务器端的某次输出，可以看到接收的消息被分为两节，第一次 20 字节，第二次 140 字节</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84] binding...<br>08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84, L:/0:0:0:0:0:0:0:0:8080] bound...<br>08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] REGISTERED<br>08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] ACTIVE<br>08:44:23 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221]<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 20B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000010|<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 140B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000010|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000020|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000030|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000040|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000050|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000060|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000070|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class=\"hljs-number\"> 00 </span>01<span class=\"hljs-number\"> 02 </span>03 |................|<br>|00000080|<span class=\"hljs-number\"> 04 </span>05<span class=\"hljs-number\"> 06 </span>07<span class=\"hljs-number\"> 08 </span>09 0a 0b 0c 0d 0e 0f             |............    |<br>+--------+-------------------------------------------------+----------------+<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong></p>\n<p>serverBootstrap.option(ChannelOption.SO_RCVBUF, 10) 影响的底层接收缓冲区（即滑动窗口）大小，仅决定了 netty 读取的最小单位，netty 实际每次读取的一般是它的整数倍</p>\n</blockquote>\n<h3 id=\"1-3-现象分析\"><a href=\"#1-3-现象分析\" class=\"headerlink\" title=\"1.3 现象分析\"></a>1.3 现象分析</h3><p>粘包</p>\n<ul>\n<li>现象，发送 abc def，接收 abcdef</li>\n<li>原因<ul>\n<li>应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）</li>\n<li>滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包</li>\n<li>Nagle 算法：会造成粘包</li>\n</ul>\n</li>\n</ul>\n<p>半包</p>\n<ul>\n<li>现象，发送 abcdef，接收 abc def</li>\n<li>原因<ul>\n<li>应用层：接收方 ByteBuf 小于实际发送数据量</li>\n<li>滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包</li>\n<li>MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包</li>\n</ul>\n</li>\n</ul>\n<p>本质是因为 TCP 是流式协议，消息无边界</p>\n<blockquote>\n<p>滑动窗口</p>\n<ul>\n<li><p>TCP 以一个段（segment）为单位，每发送一个段就需要进行一次确认应答（ack）处理，但如果这么做，缺点是包的往返时间越长性能就越差</p>\n<p><img src=\"/img/0049.png\"></p>\n</li>\n<li><p>为了解决此问题，引入了窗口概念，窗口大小即决定了无需等待应答而可以继续发送的数据最大值</p>\n<p><img src=\"/img/0051.png\"></p>\n</li>\n<li><p>窗口实际就起到一个缓冲区的作用，同时也能起到流量控制的作用</p>\n<ul>\n<li>图中深色的部分即要发送的数据，高亮的部分即窗口</li>\n<li>窗口内的数据才允许被发送，当应答未到达前，窗口必须停止滑动</li>\n<li>如果 1001~2000 这个段的数据 ack 回来了，窗口就可以向前滑动</li>\n<li>接收方也会维护一个窗口，只有落在窗口内的数据才能允许接收</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p> MSS 限制</p>\n<ul>\n<li><p>链路层对一次能够发送的最大数据有限制，这个限制称之为 MTU（maximum transmission unit），不同的链路设备的 MTU 值也有所不同，例如</p>\n</li>\n<li><p>以太网的 MTU 是 1500</p>\n</li>\n<li><p>FDDI（光纤分布式数据接口）的 MTU 是 4352</p>\n</li>\n<li><p>本地回环地址的 MTU 是 65535 - 本地测试不走网卡</p>\n</li>\n<li><p>MSS 是最大段长度（maximum segment size），它是 MTU 刨去 tcp 头和 ip 头后剩余能够作为数据传输的字节数</p>\n</li>\n<li><p>ipv4 tcp 头占用 20 bytes，ip 头占用 20 bytes，因此以太网 MSS 的值为 1500 - 40 &#x3D; 1460</p>\n</li>\n<li><p>TCP 在传递大量数据时，会按照 MSS 大小将数据进行分割发送</p>\n</li>\n<li><p>MSS 的值在三次握手时通知对方自己 MSS 的值，然后在两者之间选择一个小值作为 MSS</p>\n</li>\n</ul>\n  <img src=\"img/0031.jpg\" style=\"zoom:50%;\" />\n</blockquote>\n<blockquote>\n<p>Nagle 算法</p>\n<ul>\n<li>即使发送一个字节，也需要加入 tcp 头和 ip 头，也就是总字节数会使用 41 bytes，非常不经济。因此为了提高网络利用率，tcp 希望尽可能发送足够大的数据，这就是 Nagle 算法产生的缘由</li>\n<li>该算法是指发送端即使还有应该发送的数据，但如果这部分数据很少的话，则进行延迟发送<ul>\n<li>如果 SO_SNDBUF 的数据达到 MSS，则需要发送</li>\n<li>如果 SO_SNDBUF 中含有 FIN（表示需要连接关闭）这时将剩余数据发送，再关闭</li>\n<li>如果 TCP_NODELAY &#x3D; true，则需要发送</li>\n<li>已发送的数据都收到 ack 时，则需要发送</li>\n<li>上述条件不满足，但发生超时（一般为 200ms）则需要发送</li>\n<li>除上述情况，延迟发送</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"1-4-解决方案\"><a href=\"#1-4-解决方案\" class=\"headerlink\" title=\"1.4 解决方案\"></a>1.4 解决方案</h3><ol>\n<li>短链接，发一个包建立一次连接，这样连接建立到连接断开之间就是消息的边界，缺点效率太低</li>\n<li>每一条消息采用固定长度，缺点浪费空间</li>\n<li>每一条消息采用分隔符，例如 \\n，缺点需要转义</li>\n<li>每一条消息分为 head 和 body，head 中包含 body 的长度</li>\n</ol>\n<h4 id=\"方法1，短链接\"><a href=\"#方法1，短链接\" class=\"headerlink\" title=\"方法1，短链接\"></a>方法1，短链接</h4><p>以解决粘包为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 分 10 次发送</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            send();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">send</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;conneted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                            buffer.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>&#125;);<br>                            ctx.writeAndFlush(buffer);<br>                            <span class=\"hljs-comment\">// 发完即关</span><br>                            ctx.close();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出，略</p>\n<blockquote>\n<p>半包用这种办法还是不好解决，因为接收方的缓冲区大小是有限的</p>\n</blockquote>\n<h4 id=\"方法2，固定长度\"><a href=\"#方法2，固定长度\" class=\"headerlink\" title=\"方法2，固定长度\"></a>方法2，固定长度</h4><p>让所有数据包长度固定（假设长度为 8 字节），服务器端加入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FixedLengthFrameDecoder</span>(<span class=\"hljs-number\">8</span>));<br></code></pre></td></tr></table></figure>\n\n<p>客户端测试代码，注意, 采用这种方法后，客户端什么时候 flush 都可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-comment\">// 发送内容随机的数据包</span><br>                            <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>                            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>                            <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>                                <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">8</span>];<br>                                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; r.nextInt(<span class=\"hljs-number\">8</span>); j++) &#123;<br>                                    bytes[j] = (<span class=\"hljs-type\">byte</span>) c;<br>                                &#125;<br>                                c++;<br>                                buffer.writeBytes(bytes);<br>                            &#125;<br>                            ctx.writeAndFlush(buffer);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;192.168.0.103&quot;</span>, <span class=\"hljs-number\">9090</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端输出</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] REGISTERED<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] CONNECT: /192.168.0.103:9090<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] ACTIVE<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] WRITE: 80B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 62 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |aaaa....b.......|<br>|00000010|<span class=\"hljs-number\"> 63 </span>63<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 64 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |cc......d.......|<br>|00000020|<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |........ffff....|<br>|00000030|<span class=\"hljs-number\"> 67 </span>67<span class=\"hljs-number\"> 67 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 68 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |ggg.....h.......|<br>|00000040|<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>00<span class=\"hljs-number\"> 00 </span>00 6a 6a 6a 6a<span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 |iiiii...jjjj....|<br>+--------+-------------------------------------------------+----------------+<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] FLUSH<br></code></pre></td></tr></table></figure>\n\n<p>服务端输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f] binding...<br>12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f, L:/192.168.0.103:9090] bound...<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] REGISTERED<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] ACTIVE<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155]<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 61 61 61 61 00 00 00 00                         |aaaa....        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 62 00 00 00 00 00 00 00                         |b.......        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 63 63 00 00 00 00 00 00                         |cc......        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 64 00 00 00 00 00 00 00                         |d.......        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 00 00 00 00 00 00 00 00                         |........        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 66 66 66 00 00 00 00                         |ffff....        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 67 67 67 00 00 00 00 00                         |ggg.....        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 00 00 00 00 00 00 00                         |h.......        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 69 69 69 69 69 00 00 00                         |iiiii...        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6a 6a 6a 6a 00 00 00 00                         |jjjj....        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ COMPLETE<br></code></pre></td></tr></table></figure>\n\n<p>缺点是，数据包的大小不好把握</p>\n<ul>\n<li>长度定的太大，浪费</li>\n<li>长度定的太小，对某些数据包又显得不够</li>\n</ul>\n<h4 id=\"方法3，固定分隔符\"><a href=\"#方法3，固定分隔符\" class=\"headerlink\" title=\"方法3，固定分隔符\"></a>方法3，固定分隔符</h4><p>服务端加入，默认以 \\n 或 \\r\\n 作为分隔符，如果超出指定长度仍未出现分隔符，则抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LineBasedFrameDecoder</span>(<span class=\"hljs-number\">1024</span>));<br></code></pre></td></tr></table></figure>\n\n<p>客户端在每条消息之后，加入 \\n 分隔符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>                            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>                            <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>                                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt;= r.nextInt(<span class=\"hljs-number\">16</span>)+<span class=\"hljs-number\">1</span>; j++) &#123;<br>                                    buffer.writeByte((<span class=\"hljs-type\">byte</span>) c);<br>                                &#125;<br>                                buffer.writeByte(<span class=\"hljs-number\">10</span>);<br>                                c++;<br>                            &#125;<br>                            ctx.writeAndFlush(buffer);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;192.168.0.103&quot;</span>, <span class=\"hljs-number\">9090</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端输出</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] REGISTERED<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] CONNECT: /192.168.0.103:9090<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] ACTIVE<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] WRITE: 60B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 61 </span>0a<span class=\"hljs-number\"> 62 </span>62<span class=\"hljs-number\"> 62 </span>0a<span class=\"hljs-number\"> 63 </span>63<span class=\"hljs-number\"> 63 </span>0a<span class=\"hljs-number\"> 64 </span>64 0a<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>|a.bbb.ccc.dd.eee|<br>|00000010|<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>0a<span class=\"hljs-number\"> 66 </span>66 0a<span class=\"hljs-number\"> 67 </span>67<span class=\"hljs-number\"> 67 </span>67<span class=\"hljs-number\"> 67 </span>|eeeeeee.ff.ggggg|<br>|00000020|<span class=\"hljs-number\"> 67 </span>67 0a<span class=\"hljs-number\"> 68 </span>68<span class=\"hljs-number\"> 68 </span>68 0a<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>0a |gg.hhhh.iiiiiii.|<br>|00000030| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 0a             |jjjjjjjjjjj.    |<br>+--------+-------------------------------------------------+----------------+<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] FLUSH<br></code></pre></td></tr></table></figure>\n\n\n\n<p>服务端输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] c.i.n.HelloWorldServer - connected [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641]<br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 1B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 61                                              |a               |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 62 62 62                                        |bbb             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 63 63 63                                        |ccc             |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 64 64                                           |dd              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 10B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 65 65 65 65 65 65 65 65 65 65                   |eeeeeeeeee      |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 66                                           |ff              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 67 67 67 67 67 67 67                            |ggggggg         |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 4B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 68 68 68                                     |hhhh            |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 69 69 69 69 69 69 69                            |iiiiiii         |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 11B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a                |jjjjjjjjjjj     |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ COMPLETE<br></code></pre></td></tr></table></figure>\n\n<p>缺点，处理字符数据比较合适，但如果内容本身包含了分隔符（字节数据常常会有此情况），那么就会解析错误</p>\n<h4 id=\"方法4，预设长度\"><a href=\"#方法4，预设长度\" class=\"headerlink\" title=\"方法4，预设长度\"></a>方法4，预设长度</h4><p>在发送消息前，先约定用定长字节表示接下来数据的长度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 最大长度，长度偏移，长度占用字节，长度调整，剥离字节数</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LengthFieldBasedFrameDecoder</span>(<span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>));<br></code></pre></td></tr></table></figure>\n\n<p>客户端代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorldClient</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    log.debug(<span class=\"hljs-string\">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;sending...&quot;</span>);<br>                            <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>                            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>                            <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>                                <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">byte</span>) (r.nextInt(<span class=\"hljs-number\">16</span>) + <span class=\"hljs-number\">1</span>);<br>                                <span class=\"hljs-comment\">// 先写入长度</span><br>                                buffer.writeByte(length);<br>                                <span class=\"hljs-comment\">// 再</span><br>                                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt;= length; j++) &#123;<br>                                    buffer.writeByte((<span class=\"hljs-type\">byte</span>) c);<br>                                &#125;<br>                                c++;<br>                            &#125;<br>                            ctx.writeAndFlush(buffer);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;192.168.0.103&quot;</span>, <span class=\"hljs-number\">9090</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>客户端输出</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] REGISTERED<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] CONNECT: /192.168.0.103:9090<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] ACTIVE<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] WRITE: 97B<br>         +-------------------------------------------------+<br>         | <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class=\"hljs-number\"> 09 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 61 </span>61<span class=\"hljs-number\"> 09 </span>62<span class=\"hljs-number\"> 62 </span>62<span class=\"hljs-number\"> 62 </span>62 |.aaaaaaaaa.bbbbb|<br>|00000010|<span class=\"hljs-number\"> 62 </span>62<span class=\"hljs-number\"> 62 </span>62<span class=\"hljs-number\"> 06 </span>63<span class=\"hljs-number\"> 63 </span>63<span class=\"hljs-number\"> 63 </span>63<span class=\"hljs-number\"> 63 </span>08<span class=\"hljs-number\"> 64 </span>64<span class=\"hljs-number\"> 64 </span>64 |bbbb.cccccc.dddd|<br>|00000020|<span class=\"hljs-number\"> 64 </span>64<span class=\"hljs-number\"> 64 </span>64 0f<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>|dddd.eeeeeeeeeee|<br>|00000030|<span class=\"hljs-number\"> 65 </span>65<span class=\"hljs-number\"> 65 </span>65 0d<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 66 </span>|eeee.fffffffffff|<br>|00000040|<span class=\"hljs-number\"> 66 </span>66<span class=\"hljs-number\"> 02 </span>67<span class=\"hljs-number\"> 67 </span>02<span class=\"hljs-number\"> 68 </span>68 0e<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>|ff.gg.hh.iiiiiii|<br>|00000050|<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>69<span class=\"hljs-number\"> 69 </span>09 6a 6a 6a 6a 6a 6a 6a 6a |iiiiiii.jjjjjjjj|<br>|00000060| 6a                                              |j               |<br>+--------+-------------------------------------------------+----------------+<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] FLUSH<br></code></pre></td></tr></table></figure>\n\n\n\n<p>服务端输出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">14:36:50 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3] binding...<br>14:36:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3, L:/192.168.0.103:9090] bound...<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] REGISTERED<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] ACTIVE<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979]<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 61 61 61 61 61 61 61 61 61                      |aaaaaaaaa       |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 62 62 62 62 62 62 62 62 62                      |bbbbbbbbb       |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 6B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 63 63 63 63 63 63                               |cccccc          |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 8B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 64 64 64 64 64 64 64 64                         |dddddddd        |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 15B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65    |eeeeeeeeeeeeeee |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 13B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 66 66 66 66 66 66 66 66 66 66 66 66 66          |fffffffffffff   |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 67 67                                           |gg              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 68 68                                           |hh              |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 14B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 69 69 69 69 69 69 69 69 69 69 69 69 69 69       |iiiiiiiiiiiiii  |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B<br><span class=\"hljs-code\">         +-------------------------------------------------+</span><br><span class=\"hljs-section\">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br><span class=\"hljs-section\">|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a                      |jjjjjjjjj       |</span><br><span class=\"hljs-section\">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ COMPLETE<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-协议设计与解析\"><a href=\"#2-协议设计与解析\" class=\"headerlink\" title=\"2. 协议设计与解析\"></a>2. 协议设计与解析</h2><h3 id=\"2-1-为什么需要协议？\"><a href=\"#2-1-为什么需要协议？\" class=\"headerlink\" title=\"2.1 为什么需要协议？\"></a>2.1 为什么需要协议？</h3><p>TCP&#x2F;IP 中消息传输基于流的方式，没有边界。</p>\n<p>协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则</p>\n<p>例如：在网络上传输</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">下雨天留客天留我不留<br></code></pre></td></tr></table></figure>\n\n<p>是中文一句著名的无标点符号句子，在没有标点符号情况下，这句话有数种拆解方式，而意思却是完全不同，所以常被用作讲述标点符号的重要性</p>\n<p>一种解读</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">下雨天留客，天留，我不留<br></code></pre></td></tr></table></figure>\n\n<p>另一种解读</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">下雨天，留客天，留我不？留<br></code></pre></td></tr></table></figure>\n\n\n\n<p>如何设计协议呢？其实就是给网络传输的信息加上“标点符号”。但通过分隔符来断句不是很好，因为分隔符本身如果用于传输，那么必须加以区分。因此，下面一种协议较为常用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">定长字节表示内容长度 + 实际内容<br></code></pre></td></tr></table></figure>\n\n<p>例如，假设一个中文字符长度为 3，按照上述协议的规则，发送信息方式如下，就不会被接收方弄错意思了</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">0f</span>下雨天留客<span class=\"hljs-number\">06</span>天留<span class=\"hljs-number\">09</span>我不留<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>小故事</p>\n<p>很久很久以前，一位私塾先生到一家任教。双方签订了一纸协议：“无鸡鸭亦可无鱼肉亦可白菜豆腐不可少不得束修金”。此后，私塾先生虽然认真教课，但主人家则总是给私塾先生以白菜豆腐为菜，丝毫未见鸡鸭鱼肉的款待。私塾先生先是很不解，可是后来也就想通了：主人把鸡鸭鱼肉的钱都会换为束修金的，也罢。至此双方相安无事。</p>\n<p>年关将至，一个学年段亦告结束。私塾先生临行时，也不见主人家为他交付束修金，遂与主家理论。然主家亦振振有词：“有协议为证——无鸡鸭亦可，无鱼肉亦可，白菜豆腐不可少，不得束修金。这白纸黑字明摆着的，你有什么要说的呢？”</p>\n<p>私塾先生据理力争：“协议是这样的——无鸡，鸭亦可；无鱼，肉亦可；白菜豆腐不可，少不得束修金。”</p>\n<p>双方唇枪舌战，你来我往，真个是不亦乐乎！</p>\n<p>这里的束修金，也作“束脩”，应当是泛指教师应当得到的报酬</p>\n</blockquote>\n<h3 id=\"2-2-redis-协议举例\"><a href=\"#2-2-redis-协议举例\" class=\"headerlink\" title=\"2.2 redis 协议举例\"></a>2.2 redis 协议举例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br><span class=\"hljs-type\">byte</span>[] LINE = &#123;<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">10</span>&#125;;<br><span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>    bootstrap.channel(NioSocketChannel.class);<br>    bootstrap.group(worker);<br>    bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>());<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class=\"hljs-comment\">// 会在连接 channel 建立成功后，会触发 active 事件</span><br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>                    set(ctx);<br>                    get(ctx);<br>                &#125;<br>                <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;*2&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;get&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;aaa&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    ctx.writeAndFlush(buf);<br>                &#125;<br>                <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;*3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;set&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;aaa&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class=\"hljs-string\">&quot;bbb&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    ctx.writeAndFlush(buf);<br>                &#125;<br><br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> (ByteBuf) msg;<br>                    System.out.println(buf.toString(Charset.defaultCharset()));<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>    <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">6379</span>).sync();<br>    channelFuture.channel().closeFuture().sync();<br>&#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>    log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>    worker.shutdownGracefully();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-http-协议举例\"><a href=\"#2-3-http-协议举例\" class=\"headerlink\" title=\"2.3 http 协议举例\"></a>2.3 http 协议举例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">boss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br><span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br><span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-type\">ServerBootstrap</span> <span class=\"hljs-variable\">serverBootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>();<br>    serverBootstrap.channel(NioServerSocketChannel.class);<br>    serverBootstrap.group(boss, worker);<br>    serverBootstrap.childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG));<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpServerCodec</span>());<br>            ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;HttpRequest&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, HttpRequest msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    <span class=\"hljs-comment\">// 获取请求</span><br>                    log.debug(msg.uri());<br><br>                    <span class=\"hljs-comment\">// 返回响应</span><br>                    <span class=\"hljs-type\">DefaultFullHttpResponse</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span><br>                            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultFullHttpResponse</span>(msg.protocolVersion(), HttpResponseStatus.OK);<br><br>                    <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-string\">&quot;&lt;h1&gt;Hello, world!&lt;/h1&gt;&quot;</span>.getBytes();<br><br>                    response.headers().setInt(CONTENT_LENGTH, bytes.length);<br>                    response.content().writeBytes(bytes);<br><br>                    <span class=\"hljs-comment\">// 写回响应</span><br>                    ctx.writeAndFlush(response);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-comment\">/*ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"hljs-comment\">                @Override</span><br><span class=\"hljs-comment\">                public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class=\"hljs-comment\">                    log.debug(&quot;&#123;&#125;&quot;, msg.getClass());</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                    if (msg instanceof HttpRequest) &#123; // 请求行，请求头</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                    &#125; else if (msg instanceof HttpContent) &#123; //请求体</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                    &#125;</span><br><span class=\"hljs-comment\">                &#125;</span><br><span class=\"hljs-comment\">            &#125;);*/</span><br>        &#125;<br>    &#125;);<br>    <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">channelFuture</span> <span class=\"hljs-operator\">=</span> serverBootstrap.bind(<span class=\"hljs-number\">8080</span>).sync();<br>    channelFuture.channel().closeFuture().sync();<br>&#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>    log.error(<span class=\"hljs-string\">&quot;server error&quot;</span>, e);<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>    boss.shutdownGracefully();<br>    worker.shutdownGracefully();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-自定义协议要素\"><a href=\"#2-4-自定义协议要素\" class=\"headerlink\" title=\"2.4 自定义协议要素\"></a>2.4 自定义协议要素</h3><ul>\n<li>魔数，用来在第一时间判定是否是无效数据包</li>\n<li>版本号，可以支持协议的升级</li>\n<li>序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk</li>\n<li>指令类型，是登录、注册、单聊、群聊… 跟业务相关</li>\n<li>请求序号，为了双工通信，提供异步能力</li>\n<li>正文长度</li>\n<li>消息正文</li>\n</ul>\n<h4 id=\"编解码器\"><a href=\"#编解码器\" class=\"headerlink\" title=\"编解码器\"></a>编解码器</h4><p>根据上面的要素，设计一个登录请求消息和登录响应消息，并使用 Netty 完成收发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MessageCodec</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ByteToMessageCodec</span>&lt;Message&gt; &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">encode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Message msg, ByteBuf out)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 1. 4 字节的魔数</span><br>        out.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>        <span class=\"hljs-comment\">// 2. 1 字节的版本,</span><br>        out.writeByte(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-comment\">// 3. 1 字节的序列化方式 jdk 0 , json 1</span><br>        out.writeByte(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-comment\">// 4. 1 字节的指令类型</span><br>        out.writeByte(msg.getMessageType());<br>        <span class=\"hljs-comment\">// 5. 4 个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class=\"hljs-comment\">// 无意义，对齐填充</span><br>        out.writeByte(<span class=\"hljs-number\">0xff</span>);<br>        <span class=\"hljs-comment\">// 6. 获取内容的字节数组</span><br>        <span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">bos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br>        <span class=\"hljs-type\">ObjectOutputStream</span> <span class=\"hljs-variable\">oos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectOutputStream</span>(bos);<br>        oos.writeObject(msg);<br>        <span class=\"hljs-type\">byte</span>[] bytes = bos.toByteArray();<br>        <span class=\"hljs-comment\">// 7. 长度</span><br>        out.writeInt(bytes.length);<br>        <span class=\"hljs-comment\">// 8. 写入内容</span><br>        out.writeBytes(bytes);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">magicNum</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">version</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">serializerType</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">messageType</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sequenceId</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[length];<br>        in.readBytes(bytes, <span class=\"hljs-number\">0</span>, length);<br>        <span class=\"hljs-type\">ObjectInputStream</span> <span class=\"hljs-variable\">ois</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(bytes));<br>        <span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> (Message) ois.readObject();<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, magicNum, version, serializerType, messageType, sequenceId, length);<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, message);<br>        out.add(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">EmbeddedChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EmbeddedChannel</span>(<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(),<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LengthFieldBasedFrameDecoder</span>(<br>        <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodec</span>()<br>);<br><span class=\"hljs-comment\">// encode</span><br><span class=\"hljs-type\">LoginRequestMessage</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginRequestMessage</span>(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>, <span class=\"hljs-string\">&quot;123&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>);<br><span class=\"hljs-comment\">//        channel.writeOutbound(message);</span><br><span class=\"hljs-comment\">// decode</span><br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">buf</span> <span class=\"hljs-operator\">=</span> ByteBufAllocator.DEFAULT.buffer();<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodec</span>().encode(<span class=\"hljs-literal\">null</span>, message, buf);<br><br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">s1</span> <span class=\"hljs-operator\">=</span> buf.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>);<br><span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">s2</span> <span class=\"hljs-operator\">=</span> buf.slice(<span class=\"hljs-number\">100</span>, buf.readableBytes() - <span class=\"hljs-number\">100</span>);<br>s1.retain(); <span class=\"hljs-comment\">// 引用计数 2</span><br>channel.writeInbound(s1); <span class=\"hljs-comment\">// release 1</span><br>channel.writeInbound(s2);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>解读</p>\n<p><img src=\"/img/0013.png\"></p>\n<h4 id=\"💡-什么时候可以加-Sharable\"><a href=\"#💡-什么时候可以加-Sharable\" class=\"headerlink\" title=\"💡 什么时候可以加 @Sharable\"></a>💡 什么时候可以加 @Sharable</h4><ul>\n<li>当 handler 不保存状态时，就可以安全地在多线程下被共享</li>\n<li>但要注意对于编解码器类，不能继承 ByteToMessageCodec 或 CombinedChannelDuplexHandler 父类，他们的构造方法对 @Sharable 有限制</li>\n<li>如果能确保编解码器不会保存状态，可以继承 MessageToMessageCodec 父类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MessageCodecSharable</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MessageToMessageCodec</span>&lt;ByteBuf, Message&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">encode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Message msg, List&lt;Object&gt; outList)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>        <span class=\"hljs-comment\">// 1. 4 字节的魔数</span><br>        out.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>        <span class=\"hljs-comment\">// 2. 1 字节的版本,</span><br>        out.writeByte(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-comment\">// 3. 1 字节的序列化方式 jdk 0 , json 1</span><br>        out.writeByte(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-comment\">// 4. 1 字节的指令类型</span><br>        out.writeByte(msg.getMessageType());<br>        <span class=\"hljs-comment\">// 5. 4 个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class=\"hljs-comment\">// 无意义，对齐填充</span><br>        out.writeByte(<span class=\"hljs-number\">0xff</span>);<br>        <span class=\"hljs-comment\">// 6. 获取内容的字节数组</span><br>        <span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">bos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br>        <span class=\"hljs-type\">ObjectOutputStream</span> <span class=\"hljs-variable\">oos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectOutputStream</span>(bos);<br>        oos.writeObject(msg);<br>        <span class=\"hljs-type\">byte</span>[] bytes = bos.toByteArray();<br>        <span class=\"hljs-comment\">// 7. 长度</span><br>        out.writeInt(bytes.length);<br>        <span class=\"hljs-comment\">// 8. 写入内容</span><br>        out.writeBytes(bytes);<br>        outList.add(out);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">magicNum</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">version</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">serializerType</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">messageType</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sequenceId</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[length];<br>        in.readBytes(bytes, <span class=\"hljs-number\">0</span>, length);<br>        <span class=\"hljs-type\">ObjectInputStream</span> <span class=\"hljs-variable\">ois</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(bytes));<br>        <span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> (Message) ois.readObject();<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, magicNum, version, serializerType, messageType, sequenceId, length);<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, message);<br>        out.add(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-聊天室案例\"><a href=\"#3-聊天室案例\" class=\"headerlink\" title=\"3. 聊天室案例\"></a>3. 聊天室案例</h2><h3 id=\"3-1-聊天室业务介绍\"><a href=\"#3-1-聊天室业务介绍\" class=\"headerlink\" title=\"3.1 聊天室业务介绍\"></a>3.1 聊天室业务介绍</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 用户管理接口</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 登录</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> username 用户名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> password 密码</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 登录成功返回 true, 否则返回 false</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(String username, String password)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 会话管理接口</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Session</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 绑定会话</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> channel 哪个 channel 要绑定会话</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> username 会话绑定用户</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bind</span><span class=\"hljs-params\">(Channel channel, String username)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 解绑会话</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> channel 哪个 channel 要解绑会话</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">unbind</span><span class=\"hljs-params\">(Channel channel)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取属性</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> channel 哪个 channel</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 属性名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 属性值</span><br><span class=\"hljs-comment\">     */</span><br>    Object <span class=\"hljs-title function_\">getAttribute</span><span class=\"hljs-params\">(Channel channel, String name)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置属性</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> channel 哪个 channel</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 属性名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> value 属性值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAttribute</span><span class=\"hljs-params\">(Channel channel, String name, Object value)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 根据用户名获取 channel</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> username 用户名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> channel</span><br><span class=\"hljs-comment\">     */</span><br>    Channel <span class=\"hljs-title function_\">getChannel</span><span class=\"hljs-params\">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 聊天组会话管理接口</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GroupSession</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建一个聊天组, 如果不存在才能创建成功, 否则返回 null</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> members 成员</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 成功时返回组对象, 失败返回 null</span><br><span class=\"hljs-comment\">     */</span><br>    Group <span class=\"hljs-title function_\">createGroup</span><span class=\"hljs-params\">(String name, Set&lt;String&gt; members)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 加入聊天组</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> member 成员名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 如果组不存在返回 null, 否则返回组对象</span><br><span class=\"hljs-comment\">     */</span><br>    Group <span class=\"hljs-title function_\">joinMember</span><span class=\"hljs-params\">(String name, String member)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 移除组成员</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> member 成员名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 如果组不存在返回 null, 否则返回组对象</span><br><span class=\"hljs-comment\">     */</span><br>    Group <span class=\"hljs-title function_\">removeMember</span><span class=\"hljs-params\">(String name, String member)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 移除聊天组</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 如果组不存在返回 null, 否则返回组对象</span><br><span class=\"hljs-comment\">     */</span><br>    Group <span class=\"hljs-title function_\">removeGroup</span><span class=\"hljs-params\">(String name)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取组成员</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 成员集合, 没有成员会返回 empty set</span><br><span class=\"hljs-comment\">     */</span><br>    Set&lt;String&gt; <span class=\"hljs-title function_\">getMembers</span><span class=\"hljs-params\">(String name)</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取组成员的 channel 集合, 只有在线的 channel 才会返回</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> name 组名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 成员 channel 集合</span><br><span class=\"hljs-comment\">     */</span><br>    List&lt;Channel&gt; <span class=\"hljs-title function_\">getMembersChannel</span><span class=\"hljs-params\">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-聊天室业务-登录\"><a href=\"#3-2-聊天室业务-登录\" class=\"headerlink\" title=\"3.2 聊天室业务-登录\"></a>3.2 聊天室业务-登录</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">boss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">ServerBootstrap</span> <span class=\"hljs-variable\">serverBootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;LoginRequestMessage&gt;() &#123;<br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, LoginRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">username</span> <span class=\"hljs-operator\">=</span> msg.getUsername();<br>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> msg.getPassword();<br>                            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">login</span> <span class=\"hljs-operator\">=</span> UserServiceFactory.getUserService().login(username, password);<br>                            LoginResponseMessage message;<br>                            <span class=\"hljs-keyword\">if</span>(login) &#123;<br>                                message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginResponseMessage</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;登录成功&quot;</span>);<br>                            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                                message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginResponseMessage</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&quot;用户名或密码不正确&quot;</span>);<br>                            &#125;<br>                            ctx.writeAndFlush(message);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> serverBootstrap.bind(<span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;server error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <span class=\"hljs-type\">CountDownLatch</span> <span class=\"hljs-variable\">WAIT_FOR_LOGIN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CountDownLatch</span>(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-type\">AtomicBoolean</span> <span class=\"hljs-variable\">LOGIN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicBoolean</span>(<span class=\"hljs-literal\">false</span>);<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(group);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br><span class=\"hljs-comment\">//                    ch.pipeline().addLast(LOGGING_HANDLER);</span><br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(<span class=\"hljs-string\">&quot;client handler&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class=\"hljs-comment\">// 接收响应消息</span><br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            log.debug(<span class=\"hljs-string\">&quot;msg: &#123;&#125;&quot;</span>, msg);<br>                            <span class=\"hljs-keyword\">if</span> ((msg <span class=\"hljs-keyword\">instanceof</span> LoginResponseMessage)) &#123;<br>                                <span class=\"hljs-type\">LoginResponseMessage</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> (LoginResponseMessage) msg;<br>                                <span class=\"hljs-keyword\">if</span> (response.isSuccess()) &#123;<br>                                    <span class=\"hljs-comment\">// 如果登录成功</span><br>                                    LOGIN.set(<span class=\"hljs-literal\">true</span>);<br>                                &#125;<br>                                <span class=\"hljs-comment\">// 唤醒 system in 线程</span><br>                                WAIT_FOR_LOGIN.countDown();<br>                            &#125;<br>                        &#125;<br><br>                        <span class=\"hljs-comment\">// 在连接建立后触发 active 事件</span><br>                        <span class=\"hljs-meta\">@Override</span><br>                        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                            <span class=\"hljs-comment\">// 负责接收用户在控制台的输入，负责向服务器发送各种消息</span><br>                            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                                <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);<br>                                System.out.println(<span class=\"hljs-string\">&quot;请输入用户名:&quot;</span>);<br>                                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">username</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>                                System.out.println(<span class=\"hljs-string\">&quot;请输入密码:&quot;</span>);<br>                                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>                                <span class=\"hljs-comment\">// 构造消息对象</span><br>                                <span class=\"hljs-type\">LoginRequestMessage</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginRequestMessage</span>(username, password);<br>                                <span class=\"hljs-comment\">// 发送消息</span><br>                                ctx.writeAndFlush(message);<br>                                System.out.println(<span class=\"hljs-string\">&quot;等待后续操作...&quot;</span>);<br>                                <span class=\"hljs-keyword\">try</span> &#123;<br>                                    WAIT_FOR_LOGIN.await();<br>                                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                                    e.printStackTrace();<br>                                &#125;<br>                                <span class=\"hljs-comment\">// 如果登录失败</span><br>                                <span class=\"hljs-keyword\">if</span> (!LOGIN.get()) &#123;<br>                                    ctx.channel().close();<br>                                    <span class=\"hljs-keyword\">return</span>;<br>                                &#125;<br>                                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                                    System.out.println(<span class=\"hljs-string\">&quot;==================================&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;send [username] [content]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gsend [group name] [content]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gcreate [group name] [m1,m2,m3...]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gmembers [group name]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gjoin [group name]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;gquit [group name]&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;quit&quot;</span>);<br>                                    System.out.println(<span class=\"hljs-string\">&quot;==================================&quot;</span>);<br>                                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">command</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>                                    String[] s = command.split(<span class=\"hljs-string\">&quot; &quot;</span>);<br>                                    <span class=\"hljs-keyword\">switch</span> (s[<span class=\"hljs-number\">0</span>])&#123;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;send&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChatRequestMessage</span>(username, s[<span class=\"hljs-number\">1</span>], s[<span class=\"hljs-number\">2</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gsend&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupChatRequestMessage</span>(username, s[<span class=\"hljs-number\">1</span>], s[<span class=\"hljs-number\">2</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gcreate&quot;</span>:<br>                                            Set&lt;String&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;(Arrays.asList(s[<span class=\"hljs-number\">2</span>].split(<span class=\"hljs-string\">&quot;,&quot;</span>)));<br>                                            set.add(username); <span class=\"hljs-comment\">// 加入自己</span><br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupCreateRequestMessage</span>(s[<span class=\"hljs-number\">1</span>], set));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gmembers&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupMembersRequestMessage</span>(s[<span class=\"hljs-number\">1</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gjoin&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinRequestMessage</span>(username, s[<span class=\"hljs-number\">1</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;gquit&quot;</span>:<br>                                            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupQuitRequestMessage</span>(username, s[<span class=\"hljs-number\">1</span>]));<br>                                            <span class=\"hljs-keyword\">break</span>;<br>                                        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;quit&quot;</span>:<br>                                            ctx.channel().close();<br>                                            <span class=\"hljs-keyword\">return</span>;<br>                                    &#125;<br>                                &#125;<br>                            &#125;, <span class=\"hljs-string\">&quot;system in&quot;</span>).start();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-聊天室业务-单聊\"><a href=\"#3-3-聊天室业务-单聊\" class=\"headerlink\" title=\"3.3 聊天室业务-单聊\"></a>3.3 聊天室业务-单聊</h3><p>服务器端将 handler 独立出来</p>\n<p>登录 handler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;LoginRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, LoginRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">username</span> <span class=\"hljs-operator\">=</span> msg.getUsername();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> msg.getPassword();<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">login</span> <span class=\"hljs-operator\">=</span> UserServiceFactory.getUserService().login(username, password);<br>        LoginResponseMessage message;<br>        <span class=\"hljs-keyword\">if</span>(login) &#123;<br>            SessionFactory.getSession().bind(ctx.channel(), username);<br>            message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginResponseMessage</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;登录成功&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginResponseMessage</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&quot;用户名或密码不正确&quot;</span>);<br>        &#125;<br>        ctx.writeAndFlush(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>单聊 handler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;ChatRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, ChatRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">to</span> <span class=\"hljs-operator\">=</span> msg.getTo();<br>        <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> SessionFactory.getSession().getChannel(to);<br>        <span class=\"hljs-comment\">// 在线</span><br>        <span class=\"hljs-keyword\">if</span>(channel != <span class=\"hljs-literal\">null</span>) &#123;<br>            channel.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChatResponseMessage</span>(msg.getFrom(), msg.getContent()));<br>        &#125;<br>        <span class=\"hljs-comment\">// 不在线</span><br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChatResponseMessage</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&quot;对方用户不存在或者不在线&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-4-聊天室业务-群聊\"><a href=\"#3-4-聊天室业务-群聊\" class=\"headerlink\" title=\"3.4 聊天室业务-群聊\"></a>3.4 聊天室业务-群聊</h3><p>创建群聊</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupCreateRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupCreateRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupCreateRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">groupName</span> <span class=\"hljs-operator\">=</span> msg.getGroupName();<br>        Set&lt;String&gt; members = msg.getMembers();<br>        <span class=\"hljs-comment\">// 群管理器</span><br>        <span class=\"hljs-type\">GroupSession</span> <span class=\"hljs-variable\">groupSession</span> <span class=\"hljs-operator\">=</span> GroupSessionFactory.getGroupSession();<br>        <span class=\"hljs-type\">Group</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> groupSession.createGroup(groupName, members);<br>        <span class=\"hljs-keyword\">if</span> (group == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 发生成功消息</span><br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupCreateResponseMessage</span>(<span class=\"hljs-literal\">true</span>, groupName + <span class=\"hljs-string\">&quot;创建成功&quot;</span>));<br>            <span class=\"hljs-comment\">// 发送拉群消息</span><br>            List&lt;Channel&gt; channels = groupSession.getMembersChannel(groupName);<br>            <span class=\"hljs-keyword\">for</span> (Channel channel : channels) &#123;<br>                channel.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupCreateResponseMessage</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;您已被拉入&quot;</span> + groupName));<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupCreateResponseMessage</span>(<span class=\"hljs-literal\">false</span>, groupName + <span class=\"hljs-string\">&quot;已经存在&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>群聊</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupChatRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupChatRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupChatRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        List&lt;Channel&gt; channels = GroupSessionFactory.getGroupSession()<br>                .getMembersChannel(msg.getGroupName());<br><br>        <span class=\"hljs-keyword\">for</span> (Channel channel : channels) &#123;<br>            channel.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupChatResponseMessage</span>(msg.getFrom(), msg.getContent()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>加入群聊</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupJoinRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupJoinRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupJoinRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">Group</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> GroupSessionFactory.getGroupSession().joinMember(msg.getGroupName(), msg.getUsername());<br>        <span class=\"hljs-keyword\">if</span> (group != <span class=\"hljs-literal\">null</span>) &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinResponseMessage</span>(<span class=\"hljs-literal\">true</span>, msg.getGroupName() + <span class=\"hljs-string\">&quot;群加入成功&quot;</span>));<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinResponseMessage</span>(<span class=\"hljs-literal\">true</span>, msg.getGroupName() + <span class=\"hljs-string\">&quot;群不存在&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>退出群聊</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupQuitRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupQuitRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupQuitRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">Group</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> GroupSessionFactory.getGroupSession().removeMember(msg.getGroupName(), msg.getUsername());<br>        <span class=\"hljs-keyword\">if</span> (group != <span class=\"hljs-literal\">null</span>) &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinResponseMessage</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;已退出群&quot;</span> + msg.getGroupName()));<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupJoinResponseMessage</span>(<span class=\"hljs-literal\">true</span>, msg.getGroupName() + <span class=\"hljs-string\">&quot;群不存在&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>查看成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GroupMembersRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;GroupMembersRequestMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, GroupMembersRequestMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        Set&lt;String&gt; members = GroupSessionFactory.getGroupSession()<br>                .getMembers(msg.getGroupName());<br>        ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GroupMembersResponseMessage</span>(members));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-5-聊天室业务-退出\"><a href=\"#3-5-聊天室业务-退出\" class=\"headerlink\" title=\"3.5 聊天室业务-退出\"></a>3.5 聊天室业务-退出</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-variable\">@Slf4j</span><br><span class=\"hljs-variable\">@ChannelHandler</span>.Sharable<br>public class QuitHandler extends ChannelInboundHandlerAdapter &#123;<br><br>    <span class=\"hljs-comment\">// 当连接断开时触发 inactive 事件</span><br>    <span class=\"hljs-variable\">@Override</span><br>    public void <span class=\"hljs-built_in\">channelInactive</span>(ChannelHandlerContext ctx) throws Exception &#123;<br>        <span class=\"hljs-selector-tag\">SessionFactory</span><span class=\"hljs-selector-class\">.getSession</span>()<span class=\"hljs-selector-class\">.unbind</span>(ctx.<span class=\"hljs-built_in\">channel</span>());<br>        <span class=\"hljs-selector-tag\">log</span><span class=\"hljs-selector-class\">.debug</span>(<span class=\"hljs-string\">&quot;&#123;&#125; 已经断开&quot;</span>, ctx.<span class=\"hljs-built_in\">channel</span>());<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 当出现异常时触发</span><br>    @<span class=\"hljs-selector-tag\">Override</span><br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">void</span> <span class=\"hljs-selector-tag\">exceptionCaught</span>(ChannelHandlerContext ctx, Throwable cause) <span class=\"hljs-selector-tag\">throws</span> <span class=\"hljs-selector-tag\">Exception</span> &#123;<br>        <span class=\"hljs-selector-tag\">SessionFactory</span><span class=\"hljs-selector-class\">.getSession</span>()<span class=\"hljs-selector-class\">.unbind</span>(ctx.<span class=\"hljs-built_in\">channel</span>());<br>        <span class=\"hljs-selector-tag\">log</span><span class=\"hljs-selector-class\">.debug</span>(<span class=\"hljs-string\">&quot;&#123;&#125; 已经异常断开 异常是&#123;&#125;&quot;</span>, ctx.<span class=\"hljs-built_in\">channel</span>(), cause.<span class=\"hljs-built_in\">getMessage</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-6-聊天室业务-空闲检测\"><a href=\"#3-6-聊天室业务-空闲检测\" class=\"headerlink\" title=\"3.6 聊天室业务-空闲检测\"></a>3.6 聊天室业务-空闲检测</h3><h4 id=\"连接假死\"><a href=\"#连接假死\" class=\"headerlink\" title=\"连接假死\"></a>连接假死</h4><p>原因</p>\n<ul>\n<li>网络设备出现故障，例如网卡，机房等，底层的 TCP 连接已经断开了，但应用程序没有感知到，仍然占用着资源。</li>\n<li>公网网络不稳定，出现丢包。如果连续出现丢包，这时现象就是客户端数据发不出去，服务端也一直收不到数据，就这么一直耗着</li>\n<li>应用程序线程阻塞，无法进行数据读写</li>\n</ul>\n<p>问题</p>\n<ul>\n<li>假死的连接占用的资源不能自动释放</li>\n<li>向假死的连接发送数据，得到的反馈是发送超时</li>\n</ul>\n<p>服务器端解决</p>\n<ul>\n<li>怎么判断客户端连接是否假死呢？如果能收到客户端数据，说明没有假死。因此策略就可以定为，每隔一段时间就检查这段时间内是否接收到客户端数据，没有就可以判定为连接假死</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 用来判断是不是 读空闲时间过长，或 写空闲时间过长</span><br><span class=\"hljs-comment\">// 5s 内如果没有收到 channel 的数据，会触发一个 IdleState#READER_IDLE 事件</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IdleStateHandler</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));<br><span class=\"hljs-comment\">// ChannelDuplexHandler 可以同时作为入站和出站处理器</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelDuplexHandler</span>() &#123;<br>    <span class=\"hljs-comment\">// 用来触发特殊事件</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">userEventTriggered</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object evt)</span> <span class=\"hljs-keyword\">throws</span> Exception&#123;<br>        <span class=\"hljs-type\">IdleStateEvent</span> <span class=\"hljs-variable\">event</span> <span class=\"hljs-operator\">=</span> (IdleStateEvent) evt;<br>        <span class=\"hljs-comment\">// 触发了读空闲事件</span><br>        <span class=\"hljs-keyword\">if</span> (event.state() == IdleState.READER_IDLE) &#123;<br>            log.debug(<span class=\"hljs-string\">&quot;已经 5s 没有读到数据了&quot;</span>);<br>            ctx.channel().close();<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n<p>客户端定时心跳</p>\n<ul>\n<li>客户端可以定时向服务器端发送数据，只要这个时间间隔小于服务器定义的空闲检测的时间间隔，那么就能防止前面提到的误判，客户端可以定义如下心跳处理器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 用来判断是不是 读空闲时间过长，或 写空闲时间过长</span><br><span class=\"hljs-comment\">// 3s 内如果没有向服务器写数据，会触发一个 IdleState#WRITER_IDLE 事件</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IdleStateHandler</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>));<br><span class=\"hljs-comment\">// ChannelDuplexHandler 可以同时作为入站和出站处理器</span><br>ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelDuplexHandler</span>() &#123;<br>    <span class=\"hljs-comment\">// 用来触发特殊事件</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">userEventTriggered</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object evt)</span> <span class=\"hljs-keyword\">throws</span> Exception&#123;<br>        <span class=\"hljs-type\">IdleStateEvent</span> <span class=\"hljs-variable\">event</span> <span class=\"hljs-operator\">=</span> (IdleStateEvent) evt;<br>        <span class=\"hljs-comment\">// 触发了写空闲事件</span><br>        <span class=\"hljs-keyword\">if</span> (event.state() == IdleState.WRITER_IDLE) &#123;<br>            <span class=\"hljs-comment\">//                                log.debug(&quot;3s 没有写数据了，发送一个心跳包&quot;);</span><br>            ctx.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PingMessage</span>());<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>"},{"title":"redis应用问题解决","date":"2023-05-06T10:03:21.000Z","_content":"\n在学习Redis的过程中，我结合尚硅谷的视频对配套笔记做了一些整理。\n<!-- more -->\n\n# Redis 应用问题解决\n\n- 缓存穿透\n- 缓存击穿\n- 缓存雪崩\n\n## 一、缓存穿透\n\nkey 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如\n\n用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。\n\n缓存穿透发生的条件：\n\n1. 应用服务器压力变大\n2. redis 命中率降低\n3. 一直查询数据库，使得数据库压力太大而压垮\n\n其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。\n\n缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。\n\n![缓存穿透](缓存穿透.png)\n\n### 解决方案\n\n1. 对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。\n2. 设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。\n3. 采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。\n4. 进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。\n\n## 二、缓存击穿\n\nkey 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。\n\n**缓存击穿的现象：**\n\n数据库访问压力瞬时增加，数据库崩溃\n\nredis 里面没有出现大量 key 过期\n\nredis 正常运行\n\n**缓存击穿发生的原因**：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。\n\n![](缓存击穿.png)\n\n### 解决方案\n\nkey 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。\n\n1. 预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。\n2. 实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。\n3. 使用锁：\n                                                    1. 就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。\n                        2. 先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。\n                        3. 当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；\n                        4. 当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。\n\n![](缓存击穿方案.png)\n\n## 三、缓存雪崩\n\n**问题描述**\n\nkey 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。\n\n\n\n缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。\n\n![](缓存雪崩.png)缓存失效瞬间：![](雪崩失效.png)\n\n\n\n**解决方案**\n\n1. 构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。\n2. 使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。\n3. 设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。\n4. 将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。\n\n## 四、分布式锁\n\n**问题描述**\n\n随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！\n\n分布式锁主流的实现方案：\n\n2. 基于数据库实现分布式锁\n3. 基于缓存（Redis 等）\n4. 基于 Zookeeper\n\n措施： setnx 上锁 del解锁\n\n         设置过期时间\n\n        原子操作：设置锁的同时设置过期时间 \n\n         set key value nx ex 10\n\n\n\n**根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：**\n\n\n\n- 类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。\n- 另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。\n\n每一种分布式锁解决方案都有各自的优缺点：\n\n\n\n性能：redis 最高\n\n可靠性：zookeeper 最高\n\n\n\nsetnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。\n\n\n\nset key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。\n\n**问题**\n![](4cb065a31ddd414e8c45a4a08754c823.jpg)\n\nuuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。\n\n\n\n使用uuid防止误删\n\n![](a6179f036c6a428fa92a5a541482490c.jpg)\n\n\n\n**问题**\n\n![](75fad2d93da642fcb6006e7d538cba88.jpg)\n\n使用lua脚本保持原子性操作\n\n\n\n\n\n### \n\n### RedLock\n\nRedlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。\n\n此种方式具有以下特性：\n\n互斥访问：即永远只有一个 client 能拿到锁。\n\n避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。\n\n容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务\n\n### RedLock 原理（了解）\n\n获取当前 Unix 时间，以毫秒为单位。\n\n依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。\n\n客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。\n\n如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。\n\n如果因为某些原因，获取锁失败（没有在至少 N/2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。\n\nNew:\n\nACL\n\nIO 多线程其实指客户端交互部分的网络 IO 交互处理模块 多线程，而非执行命令多线程。Redis6 执行命令依然是单线程。\n\nRedis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:\n![](1.png)\n","source":"_posts/2023-05-06-redis应用问题解决.md","raw":"---\ntitle: redis应用问题解决\ndate: 2023-05-06 18:03:21\ntags:\n- redis\n- 解决方案\ncategories: redis\n---\n\n在学习Redis的过程中，我结合尚硅谷的视频对配套笔记做了一些整理。\n<!-- more -->\n\n# Redis 应用问题解决\n\n- 缓存穿透\n- 缓存击穿\n- 缓存雪崩\n\n## 一、缓存穿透\n\nkey 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如\n\n用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。\n\n缓存穿透发生的条件：\n\n1. 应用服务器压力变大\n2. redis 命中率降低\n3. 一直查询数据库，使得数据库压力太大而压垮\n\n其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。\n\n缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。\n\n![缓存穿透](缓存穿透.png)\n\n### 解决方案\n\n1. 对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。\n2. 设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。\n3. 采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。\n4. 进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。\n\n## 二、缓存击穿\n\nkey 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。\n\n**缓存击穿的现象：**\n\n数据库访问压力瞬时增加，数据库崩溃\n\nredis 里面没有出现大量 key 过期\n\nredis 正常运行\n\n**缓存击穿发生的原因**：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。\n\n![](缓存击穿.png)\n\n### 解决方案\n\nkey 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。\n\n1. 预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。\n2. 实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。\n3. 使用锁：\n                                                    1. 就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。\n                        2. 先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。\n                        3. 当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；\n                        4. 当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。\n\n![](缓存击穿方案.png)\n\n## 三、缓存雪崩\n\n**问题描述**\n\nkey 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。\n\n\n\n缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。\n\n![](缓存雪崩.png)缓存失效瞬间：![](雪崩失效.png)\n\n\n\n**解决方案**\n\n1. 构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。\n2. 使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。\n3. 设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。\n4. 将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。\n\n## 四、分布式锁\n\n**问题描述**\n\n随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！\n\n分布式锁主流的实现方案：\n\n2. 基于数据库实现分布式锁\n3. 基于缓存（Redis 等）\n4. 基于 Zookeeper\n\n措施： setnx 上锁 del解锁\n\n         设置过期时间\n\n        原子操作：设置锁的同时设置过期时间 \n\n         set key value nx ex 10\n\n\n\n**根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：**\n\n\n\n- 类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。\n- 另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。\n\n每一种分布式锁解决方案都有各自的优缺点：\n\n\n\n性能：redis 最高\n\n可靠性：zookeeper 最高\n\n\n\nsetnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。\n\n\n\nset key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。\n\n**问题**\n![](4cb065a31ddd414e8c45a4a08754c823.jpg)\n\nuuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。\n\n\n\n使用uuid防止误删\n\n![](a6179f036c6a428fa92a5a541482490c.jpg)\n\n\n\n**问题**\n\n![](75fad2d93da642fcb6006e7d538cba88.jpg)\n\n使用lua脚本保持原子性操作\n\n\n\n\n\n### \n\n### RedLock\n\nRedlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。\n\n此种方式具有以下特性：\n\n互斥访问：即永远只有一个 client 能拿到锁。\n\n避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。\n\n容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务\n\n### RedLock 原理（了解）\n\n获取当前 Unix 时间，以毫秒为单位。\n\n依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。\n\n客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。\n\n如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。\n\n如果因为某些原因，获取锁失败（没有在至少 N/2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。\n\nNew:\n\nACL\n\nIO 多线程其实指客户端交互部分的网络 IO 交互处理模块 多线程，而非执行命令多线程。Redis6 执行命令依然是单线程。\n\nRedis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:\n![](1.png)\n","slug":"redis应用问题解决","published":1,"updated":"2023-05-06T10:29:50.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clher6xwl000tocweel0ccpx9","content":"<p>在学习Redis的过程中，我结合尚硅谷的视频对配套笔记做了一些整理。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Redis-应用问题解决\"><a href=\"#Redis-应用问题解决\" class=\"headerlink\" title=\"Redis 应用问题解决\"></a>Redis 应用问题解决</h1><ul>\n<li>缓存穿透</li>\n<li>缓存击穿</li>\n<li>缓存雪崩</li>\n</ul>\n<h2 id=\"一、缓存穿透\"><a href=\"#一、缓存穿透\" class=\"headerlink\" title=\"一、缓存穿透\"></a>一、缓存穿透</h2><p>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如</p>\n<p>用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>\n<p>缓存穿透发生的条件：</p>\n<ol>\n<li>应用服务器压力变大</li>\n<li>redis 命中率降低</li>\n<li>一直查询数据库，使得数据库压力太大而压垮</li>\n</ol>\n<p>其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。</p>\n<p>缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F.png\" alt=\"缓存穿透\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li>对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</li>\n<li>设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。</li>\n<li>采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</li>\n<li>进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</li>\n</ol>\n<h2 id=\"二、缓存击穿\"><a href=\"#二、缓存击穿\" class=\"headerlink\" title=\"二、缓存击穿\"></a>二、缓存击穿</h2><p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p>\n<p><strong>缓存击穿的现象：</strong></p>\n<p>数据库访问压力瞬时增加，数据库崩溃</p>\n<p>redis 里面没有出现大量 key 过期</p>\n<p>redis 正常运行</p>\n<p><strong>缓存击穿发生的原因</strong>：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF.png\"></p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。</p>\n<ol>\n<li>预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。</li>\n<li>实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。</li>\n<li>使用锁：<br>                                             1. 就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。<br>                 2. 先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。<br>                 3. 当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；<br>                 4. 当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。</li>\n</ol>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E6%96%B9%E6%A1%88.png\"></p>\n<h2 id=\"三、缓存雪崩\"><a href=\"#三、缓存雪崩\" class=\"headerlink\" title=\"三、缓存雪崩\"></a>三、缓存雪崩</h2><p><strong>问题描述</strong></p>\n<p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p>\n<p>缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.png\">缓存失效瞬间：<img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E9%9B%AA%E5%B4%A9%E5%A4%B1%E6%95%88.png\"></p>\n<p><strong>解决方案</strong></p>\n<ol>\n<li>构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。</li>\n<li>使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。</li>\n<li>设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。</li>\n<li>将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li>\n</ol>\n<h2 id=\"四、分布式锁\"><a href=\"#四、分布式锁\" class=\"headerlink\" title=\"四、分布式锁\"></a>四、分布式锁</h2><p><strong>问题描述</strong></p>\n<p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p>\n<p>分布式锁主流的实现方案：</p>\n<ol start=\"2\">\n<li>基于数据库实现分布式锁</li>\n<li>基于缓存（Redis 等）</li>\n<li>基于 Zookeeper</li>\n</ol>\n<p>措施： setnx 上锁 del解锁</p>\n<pre><code class=\"hljs\">     设置过期时间\n\n    原子操作：设置锁的同时设置过期时间 \n\n     set key value nx ex 10\n</code></pre>\n<p><strong>根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：</strong></p>\n<ul>\n<li>类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。</li>\n<li>另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。</li>\n</ul>\n<p>每一种分布式锁解决方案都有各自的优缺点：</p>\n<p>性能：redis 最高</p>\n<p>可靠性：zookeeper 最高</p>\n<p>setnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。</p>\n<p>set key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。</p>\n<p><strong>问题</strong><br><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/4cb065a31ddd414e8c45a4a08754c823.jpg\"></p>\n<p>uuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。</p>\n<p>使用uuid防止误删</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/a6179f036c6a428fa92a5a541482490c.jpg\"></p>\n<p><strong>问题</strong></p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/75fad2d93da642fcb6006e7d538cba88.jpg\"></p>\n<p>使用lua脚本保持原子性操作</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"RedLock\"><a href=\"#RedLock\" class=\"headerlink\" title=\"RedLock\"></a>RedLock</h3><p>Redlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。</p>\n<p>此种方式具有以下特性：</p>\n<p>互斥访问：即永远只有一个 client 能拿到锁。</p>\n<p>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。</p>\n<p>容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务</p>\n<h3 id=\"RedLock-原理（了解）\"><a href=\"#RedLock-原理（了解）\" class=\"headerlink\" title=\"RedLock 原理（了解）\"></a>RedLock 原理（了解）</h3><p>获取当前 Unix 时间，以毫秒为单位。</p>\n<p>依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。</p>\n<p>客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</p>\n<p>如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。</p>\n<p>如果因为某些原因，获取锁失败（没有在至少 N&#x2F;2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。</p>\n<p>New:</p>\n<p>ACL</p>\n<p>IO 多线程其实指客户端交互部分的网络 IO 交互处理模块 多线程，而非执行命令多线程。Redis6 执行命令依然是单线程。</p>\n<p>Redis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH&#x2F;LPOP 等等的并发问题。整体的设计大体如下:<br><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/1.png\"></p>\n","site":{"data":{}},"excerpt":"<p>在学习Redis的过程中，我结合尚硅谷的视频对配套笔记做了一些整理。</p>","more":"<h1 id=\"Redis-应用问题解决\"><a href=\"#Redis-应用问题解决\" class=\"headerlink\" title=\"Redis 应用问题解决\"></a>Redis 应用问题解决</h1><ul>\n<li>缓存穿透</li>\n<li>缓存击穿</li>\n<li>缓存雪崩</li>\n</ul>\n<h2 id=\"一、缓存穿透\"><a href=\"#一、缓存穿透\" class=\"headerlink\" title=\"一、缓存穿透\"></a>一、缓存穿透</h2><p>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如</p>\n<p>用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>\n<p>缓存穿透发生的条件：</p>\n<ol>\n<li>应用服务器压力变大</li>\n<li>redis 命中率降低</li>\n<li>一直查询数据库，使得数据库压力太大而压垮</li>\n</ol>\n<p>其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。</p>\n<p>缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F.png\" alt=\"缓存穿透\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li>对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</li>\n<li>设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。</li>\n<li>采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</li>\n<li>进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</li>\n</ol>\n<h2 id=\"二、缓存击穿\"><a href=\"#二、缓存击穿\" class=\"headerlink\" title=\"二、缓存击穿\"></a>二、缓存击穿</h2><p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p>\n<p><strong>缓存击穿的现象：</strong></p>\n<p>数据库访问压力瞬时增加，数据库崩溃</p>\n<p>redis 里面没有出现大量 key 过期</p>\n<p>redis 正常运行</p>\n<p><strong>缓存击穿发生的原因</strong>：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF.png\"></p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。</p>\n<ol>\n<li>预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。</li>\n<li>实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。</li>\n<li>使用锁：<br>                                             1. 就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。<br>                 2. 先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。<br>                 3. 当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；<br>                 4. 当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。</li>\n</ol>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E6%96%B9%E6%A1%88.png\"></p>\n<h2 id=\"三、缓存雪崩\"><a href=\"#三、缓存雪崩\" class=\"headerlink\" title=\"三、缓存雪崩\"></a>三、缓存雪崩</h2><p><strong>问题描述</strong></p>\n<p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p>\n<p>缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.png\">缓存失效瞬间：<img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E9%9B%AA%E5%B4%A9%E5%A4%B1%E6%95%88.png\"></p>\n<p><strong>解决方案</strong></p>\n<ol>\n<li>构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。</li>\n<li>使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。</li>\n<li>设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。</li>\n<li>将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li>\n</ol>\n<h2 id=\"四、分布式锁\"><a href=\"#四、分布式锁\" class=\"headerlink\" title=\"四、分布式锁\"></a>四、分布式锁</h2><p><strong>问题描述</strong></p>\n<p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p>\n<p>分布式锁主流的实现方案：</p>\n<ol start=\"2\">\n<li>基于数据库实现分布式锁</li>\n<li>基于缓存（Redis 等）</li>\n<li>基于 Zookeeper</li>\n</ol>\n<p>措施： setnx 上锁 del解锁</p>\n<pre><code>     设置过期时间\n\n    原子操作：设置锁的同时设置过期时间 \n\n     set key value nx ex 10\n</code></pre>\n<p><strong>根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：</strong></p>\n<ul>\n<li>类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。</li>\n<li>另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。</li>\n</ul>\n<p>每一种分布式锁解决方案都有各自的优缺点：</p>\n<p>性能：redis 最高</p>\n<p>可靠性：zookeeper 最高</p>\n<p>setnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。</p>\n<p>set key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。</p>\n<p><strong>问题</strong><br><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/4cb065a31ddd414e8c45a4a08754c823.jpg\"></p>\n<p>uuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。</p>\n<p>使用uuid防止误删</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/a6179f036c6a428fa92a5a541482490c.jpg\"></p>\n<p><strong>问题</strong></p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/75fad2d93da642fcb6006e7d538cba88.jpg\"></p>\n<p>使用lua脚本保持原子性操作</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"RedLock\"><a href=\"#RedLock\" class=\"headerlink\" title=\"RedLock\"></a>RedLock</h3><p>Redlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。</p>\n<p>此种方式具有以下特性：</p>\n<p>互斥访问：即永远只有一个 client 能拿到锁。</p>\n<p>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。</p>\n<p>容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务</p>\n<h3 id=\"RedLock-原理（了解）\"><a href=\"#RedLock-原理（了解）\" class=\"headerlink\" title=\"RedLock 原理（了解）\"></a>RedLock 原理（了解）</h3><p>获取当前 Unix 时间，以毫秒为单位。</p>\n<p>依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。</p>\n<p>客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</p>\n<p>如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。</p>\n<p>如果因为某些原因，获取锁失败（没有在至少 N&#x2F;2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。</p>\n<p>New:</p>\n<p>ACL</p>\n<p>IO 多线程其实指客户端交互部分的网络 IO 交互处理模块 多线程，而非执行命令多线程。Redis6 执行命令依然是单线程。</p>\n<p>Redis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH&#x2F;LPOP 等等的并发问题。整体的设计大体如下:<br><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/1.png\"></p>"},{"title":"Netty04-优化与源码","date":"2023-05-06T13:26:15.000Z","_content":"\n该笔记是B站黑马的Netty视频的配套笔记4。\n<!-- more -->\n# 四. 优化与源码\n\n## 1. 优化\n\n### 1.1 扩展序列化算法\n\n序列化，反序列化主要用在消息正文的转换上\n\n* 序列化时，需要将 Java 对象变为要传输的数据（可以是 byte[]，或 json 等，最终都需要变成 byte[]）\n* 反序列化时，需要将传入的正文数据还原成 Java 对象，便于处理\n\n目前的代码仅支持 Java 自带的序列化，反序列化机制，核心代码如下\n\n```java\n// 反序列化\nbyte[] body = new byte[bodyLength];\nbyteByf.readBytes(body);\nObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(body));\nMessage message = (Message) in.readObject();\nmessage.setSequenceId(sequenceId);\n\n// 序列化\nByteArrayOutputStream out = new ByteArrayOutputStream();\nnew ObjectOutputStream(out).writeObject(message);\nbyte[] bytes = out.toByteArray();\n```\n\n为了支持更多序列化算法，抽象一个 Serializer 接口\n\n```java\npublic interface Serializer {\n\n    // 反序列化方法\n    <T> T deserialize(Class<T> clazz, byte[] bytes);\n\n    // 序列化方法\n    <T> byte[] serialize(T object);\n\n}\n```\n\n提供两个实现，我这里直接将实现加入了枚举类 Serializer.Algorithm 中\n\n```java\nenum SerializerAlgorithm implements Serializer {\n\t// Java 实现\n    Java {\n        @Override\n        public <T> T deserialize(Class<T> clazz, byte[] bytes) {\n            try {\n                ObjectInputStream in = \n                    new ObjectInputStream(new ByteArrayInputStream(bytes));\n                Object object = in.readObject();\n                return (T) object;\n            } catch (IOException | ClassNotFoundException e) {\n                throw new RuntimeException(\"SerializerAlgorithm.Java 反序列化错误\", e);\n            }\n        }\n\n        @Override\n        public <T> byte[] serialize(T object) {\n            try {\n                ByteArrayOutputStream out = new ByteArrayOutputStream();\n                new ObjectOutputStream(out).writeObject(object);\n                return out.toByteArray();\n            } catch (IOException e) {\n                throw new RuntimeException(\"SerializerAlgorithm.Java 序列化错误\", e);\n            }\n        }\n    }, \n    // Json 实现(引入了 Gson 依赖)\n    Json {\n        @Override\n        public <T> T deserialize(Class<T> clazz, byte[] bytes) {\n            return new Gson().fromJson(new String(bytes, StandardCharsets.UTF_8), clazz);\n        }\n\n        @Override\n        public <T> byte[] serialize(T object) {\n            return new Gson().toJson(object).getBytes(StandardCharsets.UTF_8);\n        }\n    };\n\n    // 需要从协议的字节中得到是哪种序列化算法\n    public static SerializerAlgorithm getByInt(int type) {\n        SerializerAlgorithm[] array = SerializerAlgorithm.values();\n        if (type < 0 || type > array.length - 1) {\n            throw new IllegalArgumentException(\"超过 SerializerAlgorithm 范围\");\n        }\n        return array[type];\n    }\n}\n```\n\n\n\n增加配置类和配置文件\n\n```java\npublic abstract class Config {\n    static Properties properties;\n    static {\n        try (InputStream in = Config.class.getResourceAsStream(\"/application.properties\")) {\n            properties = new Properties();\n            properties.load(in);\n        } catch (IOException e) {\n            throw new ExceptionInInitializerError(e);\n        }\n    }\n    public static int getServerPort() {\n        String value = properties.getProperty(\"server.port\");\n        if(value == null) {\n            return 8080;\n        } else {\n            return Integer.parseInt(value);\n        }\n    }\n    public static Serializer.Algorithm getSerializerAlgorithm() {\n        String value = properties.getProperty(\"serializer.algorithm\");\n        if(value == null) {\n            return Serializer.Algorithm.Java;\n        } else {\n            return Serializer.Algorithm.valueOf(value);\n        }\n    }\n}\n```\n\n\n\n配置文件\n\n```properties\nserializer.algorithm=Json\n```\n\n\n\n修改编解码器\n\n```java\n/**\n * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的\n */\npublic class MessageCodecSharable extends MessageToMessageCodec<ByteBuf, Message> {\n    @Override\n    public void encode(ChannelHandlerContext ctx, Message msg, List<Object> outList) throws Exception {\n        ByteBuf out = ctx.alloc().buffer();\n        // 1. 4 字节的魔数\n        out.writeBytes(new byte[]{1, 2, 3, 4});\n        // 2. 1 字节的版本,\n        out.writeByte(1);\n        // 3. 1 字节的序列化方式 jdk 0 , json 1\n        out.writeByte(Config.getSerializerAlgorithm().ordinal());\n        // 4. 1 字节的指令类型\n        out.writeByte(msg.getMessageType());\n        // 5. 4 个字节\n        out.writeInt(msg.getSequenceId());\n        // 无意义，对齐填充\n        out.writeByte(0xff);\n        // 6. 获取内容的字节数组\n        byte[] bytes = Config.getSerializerAlgorithm().serialize(msg);\n        // 7. 长度\n        out.writeInt(bytes.length);\n        // 8. 写入内容\n        out.writeBytes(bytes);\n        outList.add(out);\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        int magicNum = in.readInt();\n        byte version = in.readByte();\n        byte serializerAlgorithm = in.readByte(); // 0 或 1\n        byte messageType = in.readByte(); // 0,1,2...\n        int sequenceId = in.readInt();\n        in.readByte();\n        int length = in.readInt();\n        byte[] bytes = new byte[length];\n        in.readBytes(bytes, 0, length);\n\n        // 找到反序列化算法\n        Serializer.Algorithm algorithm = Serializer.Algorithm.values()[serializerAlgorithm];\n        // 确定具体消息类型\n        Class<? extends Message> messageClass = Message.getMessageClass(messageType);\n        Message message = algorithm.deserialize(messageClass, bytes);\n//        log.debug(\"{}, {}, {}, {}, {}, {}\", magicNum, version, serializerType, messageType, sequenceId, length);\n//        log.debug(\"{}\", message);\n        out.add(message);\n    }\n}\n```\n\n\n\n其中确定具体消息类型，可以根据 `消息类型字节` 获取到对应的 `消息 class`\n\n```java\n@Data\npublic abstract class Message implements Serializable {\n\n    /**\n     * 根据消息类型字节，获得对应的消息 class\n     * @param messageType 消息类型字节\n     * @return 消息 class\n     */\n    public static Class<? extends Message> getMessageClass(int messageType) {\n        return messageClasses.get(messageType);\n    }\n\n    private int sequenceId;\n\n    private int messageType;\n\n    public abstract int getMessageType();\n\n    public static final int LoginRequestMessage = 0;\n    public static final int LoginResponseMessage = 1;\n    public static final int ChatRequestMessage = 2;\n    public static final int ChatResponseMessage = 3;\n    public static final int GroupCreateRequestMessage = 4;\n    public static final int GroupCreateResponseMessage = 5;\n    public static final int GroupJoinRequestMessage = 6;\n    public static final int GroupJoinResponseMessage = 7;\n    public static final int GroupQuitRequestMessage = 8;\n    public static final int GroupQuitResponseMessage = 9;\n    public static final int GroupChatRequestMessage = 10;\n    public static final int GroupChatResponseMessage = 11;\n    public static final int GroupMembersRequestMessage = 12;\n    public static final int GroupMembersResponseMessage = 13;\n    public static final int PingMessage = 14;\n    public static final int PongMessage = 15;\n    private static final Map<Integer, Class<? extends Message>> messageClasses = new HashMap<>();\n\n    static {\n        messageClasses.put(LoginRequestMessage, LoginRequestMessage.class);\n        messageClasses.put(LoginResponseMessage, LoginResponseMessage.class);\n        messageClasses.put(ChatRequestMessage, ChatRequestMessage.class);\n        messageClasses.put(ChatResponseMessage, ChatResponseMessage.class);\n        messageClasses.put(GroupCreateRequestMessage, GroupCreateRequestMessage.class);\n        messageClasses.put(GroupCreateResponseMessage, GroupCreateResponseMessage.class);\n        messageClasses.put(GroupJoinRequestMessage, GroupJoinRequestMessage.class);\n        messageClasses.put(GroupJoinResponseMessage, GroupJoinResponseMessage.class);\n        messageClasses.put(GroupQuitRequestMessage, GroupQuitRequestMessage.class);\n        messageClasses.put(GroupQuitResponseMessage, GroupQuitResponseMessage.class);\n        messageClasses.put(GroupChatRequestMessage, GroupChatRequestMessage.class);\n        messageClasses.put(GroupChatResponseMessage, GroupChatResponseMessage.class);\n        messageClasses.put(GroupMembersRequestMessage, GroupMembersRequestMessage.class);\n        messageClasses.put(GroupMembersResponseMessage, GroupMembersResponseMessage.class);\n    }\n}\n```\n\n\n\n### 1.2 参数调优\n\n#### 1）CONNECT_TIMEOUT_MILLIS\n\n* 属于 SocketChannal 参数\n* 用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 timeout 异常\n\n* SO_TIMEOUT 主要用在阻塞 IO，阻塞 IO 中 accept，read 等都是无限等待的，如果不希望永远阻塞，使用它调整超时时间\n\n```java\n@Slf4j\npublic class TestConnectionTimeout {\n    public static void main(String[] args) {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 300)\n                    .channel(NioSocketChannel.class)\n                    .handler(new LoggingHandler());\n            ChannelFuture future = bootstrap.connect(\"127.0.0.1\", 8080);\n            future.sync().channel().closeFuture().sync(); // 断点1\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.debug(\"timeout\");\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n另外源码部分 `io.netty.channel.nio.AbstractNioChannel.AbstractNioUnsafe#connect`\n\n```java\n@Override\npublic final void connect(\n        final SocketAddress remoteAddress, final SocketAddress localAddress, final ChannelPromise promise) {\n    // ...\n    // Schedule connect timeout.\n    int connectTimeoutMillis = config().getConnectTimeoutMillis();\n    if (connectTimeoutMillis > 0) {\n        connectTimeoutFuture = eventLoop().schedule(new Runnable() {\n            @Override\n            public void run() {                \n                ChannelPromise connectPromise = AbstractNioChannel.this.connectPromise;\n                ConnectTimeoutException cause =\n                    new ConnectTimeoutException(\"connection timed out: \" + remoteAddress); // 断点2\n                if (connectPromise != null && connectPromise.tryFailure(cause)) {\n                    close(voidPromise());\n                }\n            }\n        }, connectTimeoutMillis, TimeUnit.MILLISECONDS);\n    }\n\t// ...\n}\n```\n\n\n\n#### 2）SO_BACKLOG\n\n* 属于 ServerSocketChannal 参数\n\n```mermaid\nsequenceDiagram\n\nparticipant c as client\nparticipant s as server\nparticipant sq as syns queue\nparticipant aq as accept queue\n\ns ->> s : bind()\ns ->> s : listen()\nc ->> c : connect()\nc ->> s : 1. SYN\nNote left of c : SYN_SEND\ns ->> sq : put\nNote right of s : SYN_RCVD\ns ->> c : 2. SYN + ACK\nNote left of c : ESTABLISHED\nc ->> s : 3. ACK\nsq ->> aq : put\nNote right of s : ESTABLISHED\naq -->> s : \ns ->> s : accept()\n```\n\n1. 第一次握手，client 发送 SYN 到 server，状态修改为 SYN_SEND，server 收到，状态改变为 SYN_REVD，并将该请求放入 sync queue 队列\n2. 第二次握手，server 回复 SYN + ACK 给 client，client 收到，状态改变为 ESTABLISHED，并发送 ACK 给 server\n3. 第三次握手，server 收到 ACK，状态改变为 ESTABLISHED，将该请求从 sync queue 放入 accept queue\n\n其中\n\n* 在 linux 2.2 之前，backlog 大小包括了两个队列的大小，在 2.2 之后，分别用下面两个参数来控制\n\n* sync queue - 半连接队列\n  * 大小通过 /proc/sys/net/ipv4/tcp_max_syn_backlog 指定，在 `syncookies` 启用的情况下，逻辑上没有最大值限制，这个设置便被忽略\n* accept queue - 全连接队列\n  * 其大小通过 /proc/sys/net/core/somaxconn 指定，在使用 listen 函数时，内核会根据传入的 backlog 参数与系统参数，取二者的较小值\n  * 如果 accpet queue 队列满了，server 将发送一个拒绝连接的错误信息到 client\n\n\n\nnetty 中\n\n可以通过  option(ChannelOption.SO_BACKLOG, 值) 来设置大小\n\n\n\n可以通过下面源码查看默认大小\n\n```java\npublic class DefaultServerSocketChannelConfig extends DefaultChannelConfig\n                                              implements ServerSocketChannelConfig {\n\n    private volatile int backlog = NetUtil.SOMAXCONN;\n    // ...\n}\n```\n\n\n\n课堂调试关键断点为：`io.netty.channel.nio.NioEventLoop#processSelectedKey`\n\n\n\noio 中更容易说明，不用 debug 模式\n\n```java\npublic class Server {\n    public static void main(String[] args) throws IOException {\n        ServerSocket ss = new ServerSocket(8888, 2);\n        Socket accept = ss.accept();\n        System.out.println(accept);\n        System.in.read();\n    }\n}\n```\n\n客户端启动 4 个\n\n```java\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        try {\n            Socket s = new Socket();\n            System.out.println(new Date()+\" connecting...\");\n            s.connect(new InetSocketAddress(\"localhost\", 8888),1000);\n            System.out.println(new Date()+\" connected...\");\n            s.getOutputStream().write(1);\n            System.in.read();\n        } catch (IOException e) {\n            System.out.println(new Date()+\" connecting timeout...\");\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n第 1，2，3 个客户端都打印，但除了第一个处于 accpet 外，其它两个都处于 accept queue 中\n\n```java\nTue Apr 21 20:30:28 CST 2020 connecting...\nTue Apr 21 20:30:28 CST 2020 connected...\n```\n\n第 4 个客户端连接时\n\n```\nTue Apr 21 20:53:58 CST 2020 connecting...\nTue Apr 21 20:53:59 CST 2020 connecting timeout...\njava.net.SocketTimeoutException: connect timed out\n```\n\n\n\n\n\n#### 3）ulimit -n\n\n* 属于操作系统参数\n\n\n\n#### 4）TCP_NODELAY\n\n* 属于 SocketChannal 参数\n\n\n\n#### 5）SO_SNDBUF & SO_RCVBUF\n\n* SO_SNDBUF 属于 SocketChannal 参数\n* SO_RCVBUF 既可用于 SocketChannal 参数，也可以用于 ServerSocketChannal 参数（建议设置到 ServerSocketChannal 上）\n\n\n\n#### 6）ALLOCATOR\n\n* 属于 SocketChannal 参数\n* 用来分配 ByteBuf， ctx.alloc()\n\n\n\n#### 7）RCVBUF_ALLOCATOR\n\n* 属于 SocketChannal 参数\n* 控制 netty 接收缓冲区大小\n* 负责入站数据的分配，决定入站缓冲区的大小（并可动态调整），统一采用 direct 直接内存，具体池化还是非池化由 allocator 决定\n\n\n\n### 1.3 RPC 框架\n\n#### 1）准备工作\n\n这些代码可以认为是现成的，无需从头编写练习\n\n为了简化起见，在原来聊天项目的基础上新增 Rpc 请求和响应消息\n\n```java\n@Data\npublic abstract class Message implements Serializable {\n\n    // 省略旧的代码\n\n    public static final int RPC_MESSAGE_TYPE_REQUEST = 101;\n    public static final int  RPC_MESSAGE_TYPE_RESPONSE = 102;\n\n    static {\n        // ...\n        messageClasses.put(RPC_MESSAGE_TYPE_REQUEST, RpcRequestMessage.class);\n        messageClasses.put(RPC_MESSAGE_TYPE_RESPONSE, RpcResponseMessage.class);\n    }\n\n}\n```\n\n请求消息\n\n```java\n@Getter\n@ToString(callSuper = true)\npublic class RpcRequestMessage extends Message {\n\n    /**\n     * 调用的接口全限定名，服务端根据它找到实现\n     */\n    private String interfaceName;\n    /**\n     * 调用接口中的方法名\n     */\n    private String methodName;\n    /**\n     * 方法返回类型\n     */\n    private Class<?> returnType;\n    /**\n     * 方法参数类型数组\n     */\n    private Class[] parameterTypes;\n    /**\n     * 方法参数值数组\n     */\n    private Object[] parameterValue;\n\n    public RpcRequestMessage(int sequenceId, String interfaceName, String methodName, Class<?> returnType, Class[] parameterTypes, Object[] parameterValue) {\n        super.setSequenceId(sequenceId);\n        this.interfaceName = interfaceName;\n        this.methodName = methodName;\n        this.returnType = returnType;\n        this.parameterTypes = parameterTypes;\n        this.parameterValue = parameterValue;\n    }\n\n    @Override\n    public int getMessageType() {\n        return RPC_MESSAGE_TYPE_REQUEST;\n    }\n}\n```\n\n响应消息\n\n```java\n@Data\n@ToString(callSuper = true)\npublic class RpcResponseMessage extends Message {\n    /**\n     * 返回值\n     */\n    private Object returnValue;\n    /**\n     * 异常值\n     */\n    private Exception exceptionValue;\n\n    @Override\n    public int getMessageType() {\n        return RPC_MESSAGE_TYPE_RESPONSE;\n    }\n}\n```\n\n服务器架子\n\n```java\n@Slf4j\npublic class RpcServer {\n    public static void main(String[] args) {\n        NioEventLoopGroup boss = new NioEventLoopGroup();\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        \n        // rpc 请求消息处理器，待实现\n        RpcRequestMessageHandler RPC_HANDLER = new RpcRequestMessageHandler();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.channel(NioServerSocketChannel.class);\n            serverBootstrap.group(boss, worker);\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(RPC_HANDLER);\n                }\n            });\n            Channel channel = serverBootstrap.bind(8080).sync().channel();\n            channel.closeFuture().sync();\n        } catch (InterruptedException e) {\n            log.error(\"server error\", e);\n        } finally {\n            boss.shutdownGracefully();\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n客户端架子\n\n```java\npublic class RpcClient {\n    public static void main(String[] args) {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        \n        // rpc 响应消息处理器，待实现\n        RpcResponseMessageHandler RPC_HANDLER = new RpcResponseMessageHandler();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(group);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(RPC_HANDLER);\n                }\n            });\n            Channel channel = bootstrap.connect(\"localhost\", 8080).sync().channel();\n            channel.closeFuture().sync();\n        } catch (Exception e) {\n            log.error(\"client error\", e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n服务器端的 service 获取\n\n```java\npublic class ServicesFactory {\n\n    static Properties properties;\n    static Map<Class<?>, Object> map = new ConcurrentHashMap<>();\n\n    static {\n        try (InputStream in = Config.class.getResourceAsStream(\"/application.properties\")) {\n            properties = new Properties();\n            properties.load(in);\n            Set<String> names = properties.stringPropertyNames();\n            for (String name : names) {\n                if (name.endsWith(\"Service\")) {\n                    Class<?> interfaceClass = Class.forName(name);\n                    Class<?> instanceClass = Class.forName(properties.getProperty(name));\n                    map.put(interfaceClass, instanceClass.newInstance());\n                }\n            }\n        } catch (IOException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n            throw new ExceptionInInitializerError(e);\n        }\n    }\n\n    public static <T> T getService(Class<T> interfaceClass) {\n        return (T) map.get(interfaceClass);\n    }\n}\n```\n\n相关配置 application.properties\n\n```\nserializer.algorithm=Json\ncn.itcast.server.service.HelloService=cn.itcast.server.service.HelloServiceImpl\n```\n\n\n\n#### 2）服务器 handler\n\n```java\n@Slf4j\n@ChannelHandler.Sharable\npublic class RpcRequestMessageHandler extends SimpleChannelInboundHandler<RpcRequestMessage> {\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, RpcRequestMessage message) {\n        RpcResponseMessage response = new RpcResponseMessage();\n        response.setSequenceId(message.getSequenceId());\n        try {\n            // 获取真正的实现对象\n            HelloService service = (HelloService)\n                    ServicesFactory.getService(Class.forName(message.getInterfaceName()));\n            \n            // 获取要调用的方法\n            Method method = service.getClass().getMethod(message.getMethodName(), message.getParameterTypes());\n            \n            // 调用方法\n            Object invoke = method.invoke(service, message.getParameterValue());\n            // 调用成功\n            response.setReturnValue(invoke);\n        } catch (Exception e) {\n            e.printStackTrace();\n            // 调用异常\n            response.setExceptionValue(e);\n        }\n        // 返回结果\n        ctx.writeAndFlush(response);\n    }\n}\n```\n\n\n\n\n\n#### 3）客户端代码第一版\n\n只发消息\n\n```java\n@Slf4j\npublic class RpcClient {\n    public static void main(String[] args) {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        RpcResponseMessageHandler RPC_HANDLER = new RpcResponseMessageHandler();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(group);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(RPC_HANDLER);\n                }\n            });\n            Channel channel = bootstrap.connect(\"localhost\", 8080).sync().channel();\n\n            ChannelFuture future = channel.writeAndFlush(new RpcRequestMessage(\n                    1,\n                    \"cn.itcast.server.service.HelloService\",\n                    \"sayHello\",\n                    String.class,\n                    new Class[]{String.class},\n                    new Object[]{\"张三\"}\n            )).addListener(promise -> {\n                if (!promise.isSuccess()) {\n                    Throwable cause = promise.cause();\n                    log.error(\"error\", cause);\n                }\n            });\n\n            channel.closeFuture().sync();\n        } catch (Exception e) {\n            log.error(\"client error\", e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n\n\n#### 4）客户端 handler 第一版\n\n```java\n@Slf4j\n@ChannelHandler.Sharable\npublic class RpcResponseMessageHandler extends SimpleChannelInboundHandler<RpcResponseMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, RpcResponseMessage msg) throws Exception {\n        log.debug(\"{}\", msg);\n    }\n}\n```\n\n\n\n\n\n#### 5）客户端代码 第二版\n\n包括 channel 管理，代理，接收结果\n\n```java\n@Slf4j\npublic class RpcClientManager {\n\n\n    public static void main(String[] args) {\n        HelloService service = getProxyService(HelloService.class);\n        System.out.println(service.sayHello(\"zhangsan\"));\n//        System.out.println(service.sayHello(\"lisi\"));\n//        System.out.println(service.sayHello(\"wangwu\"));\n    }\n\n    // 创建代理类\n    public static <T> T getProxyService(Class<T> serviceClass) {\n        ClassLoader loader = serviceClass.getClassLoader();\n        Class<?>[] interfaces = new Class[]{serviceClass};\n        //                                                            sayHello  \"张三\"\n        Object o = Proxy.newProxyInstance(loader, interfaces, (proxy, method, args) -> {\n            // 1. 将方法调用转换为 消息对象\n            int sequenceId = SequenceIdGenerator.nextId();\n            RpcRequestMessage msg = new RpcRequestMessage(\n                    sequenceId,\n                    serviceClass.getName(),\n                    method.getName(),\n                    method.getReturnType(),\n                    method.getParameterTypes(),\n                    args\n            );\n            // 2. 将消息对象发送出去\n            getChannel().writeAndFlush(msg);\n\n            // 3. 准备一个空 Promise 对象，来接收结果             指定 promise 对象异步接收结果线程\n            DefaultPromise<Object> promise = new DefaultPromise<>(getChannel().eventLoop());\n            RpcResponseMessageHandler.PROMISES.put(sequenceId, promise);\n\n//            promise.addListener(future -> {\n//                // 线程\n//            });\n\n            // 4. 等待 promise 结果\n            promise.await();\n            if(promise.isSuccess()) {\n                // 调用正常\n                return promise.getNow();\n            } else {\n                // 调用失败\n                throw new RuntimeException(promise.cause());\n            }\n        });\n        return (T) o;\n    }\n\n    private static Channel channel = null;\n    private static final Object LOCK = new Object();\n\n    // 获取唯一的 channel 对象\n    public static Channel getChannel() {\n        if (channel != null) {\n            return channel;\n        }\n        synchronized (LOCK) { //  t2\n            if (channel != null) { // t1\n                return channel;\n            }\n            initChannel();\n            return channel;\n        }\n    }\n\n    // 初始化 channel 方法\n    private static void initChannel() {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        RpcResponseMessageHandler RPC_HANDLER = new RpcResponseMessageHandler();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.channel(NioSocketChannel.class);\n        bootstrap.group(group);\n        bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ch.pipeline().addLast(new ProcotolFrameDecoder());\n                ch.pipeline().addLast(LOGGING_HANDLER);\n                ch.pipeline().addLast(MESSAGE_CODEC);\n                ch.pipeline().addLast(RPC_HANDLER);\n            }\n        });\n        try {\n            channel = bootstrap.connect(\"localhost\", 8080).sync().channel();\n            channel.closeFuture().addListener(future -> {\n                group.shutdownGracefully();\n            });\n        } catch (Exception e) {\n            log.error(\"client error\", e);\n        }\n    }\n}\n```\n\n\n\n#### 6）客户端 handler 第二版\n\n```java\n@Slf4j\n@ChannelHandler.Sharable\npublic class RpcResponseMessageHandler extends SimpleChannelInboundHandler<RpcResponseMessage> {\n\n    //                       序号      用来接收结果的 promise 对象\n    public static final Map<Integer, Promise<Object>> PROMISES = new ConcurrentHashMap<>();\n\n    @Override\n\n    protected void channelRead0(ChannelHandlerContext ctx, RpcResponseMessage msg) throws Exception {\n        log.debug(\"{}\", msg);\n        // 拿到空的 promise\n        Promise<Object> promise = PROMISES.remove(msg.getSequenceId());\n        if (promise != null) {\n            Object returnValue = msg.getReturnValue();\n            Exception exceptionValue = msg.getExceptionValue();\n            if(exceptionValue != null) {\n                promise.setFailure(exceptionValue);\n            } else {\n                promise.setSuccess(returnValue);\n            }\n        }\n    }\n}\n```\n\n\n\n\n\n## 2. 源码分析\n\n### 2.1 启动剖析\n\n我们就来看看 netty 中对下面的代码是怎样进行处理的\n\n```java\n//1 netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector\nSelector selector = Selector.open(); \n\n//2 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config\nNioServerSocketChannel attachment = new NioServerSocketChannel();\n\n//3 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel\nServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); \nserverSocketChannel.configureBlocking(false);\n\n//4 启动 nio boss 线程执行接下来的操作\n\n//5 注册（仅关联 selector 和 NioServerSocketChannel），未关注事件\nSelectionKey selectionKey = serverSocketChannel.register(selector, 0, attachment);\n\n//6 head -> 初始化器 -> ServerBootstrapAcceptor -> tail，初始化器是一次性的，只为添加 acceptor\n\n//7 绑定端口\nserverSocketChannel.bind(new InetSocketAddress(8080));\n\n//8 触发 channel active 事件，在 head 中关注 op_accept 事件\nselectionKey.interestOps(SelectionKey.OP_ACCEPT);\n```\n\n\n\n\n\n\n\n入口 `io.netty.bootstrap.ServerBootstrap#bind`\n\n关键代码 `io.netty.bootstrap.AbstractBootstrap#doBind`\n\n```java\nprivate ChannelFuture doBind(final SocketAddress localAddress) {\n\t// 1. 执行初始化和注册 regFuture 会由 initAndRegister 设置其是否完成，从而回调 3.2 处代码\n    final ChannelFuture regFuture = initAndRegister();\n    final Channel channel = regFuture.channel();\n    if (regFuture.cause() != null) {\n        return regFuture;\n    }\n\n    // 2. 因为是 initAndRegister 异步执行，需要分两种情况来看，调试时也需要通过 suspend 断点类型加以区分\n    // 2.1 如果已经完成\n    if (regFuture.isDone()) {\n        ChannelPromise promise = channel.newPromise();\n        // 3.1 立刻调用 doBind0\n        doBind0(regFuture, channel, localAddress, promise);\n        return promise;\n    } \n    // 2.2 还没有完成\n    else {\n        final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel);\n        // 3.2 回调 doBind0\n        regFuture.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                Throwable cause = future.cause();\n                if (cause != null) {\n                    // 处理异常...\n                    promise.setFailure(cause);\n                } else {\n                    promise.registered();\n\t\t\t\t\t// 3. 由注册线程去执行 doBind0\n                    doBind0(regFuture, channel, localAddress, promise);\n                }\n            }\n        });\n        return promise;\n    }\n}\n```\n\n关键代码 `io.netty.bootstrap.AbstractBootstrap#initAndRegister`\n\n```java\nfinal ChannelFuture initAndRegister() {\n    Channel channel = null;\n    try {\n        channel = channelFactory.newChannel();\n        // 1.1 初始化 - 做的事就是添加一个初始化器 ChannelInitializer\n        init(channel);\n    } catch (Throwable t) {\n        // 处理异常...\n        return new DefaultChannelPromise(new FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t);\n    }\n\n    // 1.2 注册 - 做的事就是将原生 channel 注册到 selector 上\n    ChannelFuture regFuture = config().group().register(channel);\n    if (regFuture.cause() != null) {\n        // 处理异常...\n    }\n    return regFuture;\n}\n```\n\n关键代码 `io.netty.bootstrap.ServerBootstrap#init`\n\n```java\n// 这里 channel 实际上是 NioServerSocketChannel\nvoid init(Channel channel) throws Exception {\n    final Map<ChannelOption<?>, Object> options = options0();\n    synchronized (options) {\n        setChannelOptions(channel, options, logger);\n    }\n\n    final Map<AttributeKey<?>, Object> attrs = attrs0();\n    synchronized (attrs) {\n        for (Entry<AttributeKey<?>, Object> e: attrs.entrySet()) {\n            @SuppressWarnings(\"unchecked\")\n            AttributeKey<Object> key = (AttributeKey<Object>) e.getKey();\n            channel.attr(key).set(e.getValue());\n        }\n    }\n\n    ChannelPipeline p = channel.pipeline();\n\n    final EventLoopGroup currentChildGroup = childGroup;\n    final ChannelHandler currentChildHandler = childHandler;\n    final Entry<ChannelOption<?>, Object>[] currentChildOptions;\n    final Entry<AttributeKey<?>, Object>[] currentChildAttrs;\n    synchronized (childOptions) {\n        currentChildOptions = childOptions.entrySet().toArray(newOptionArray(0));\n    }\n    synchronized (childAttrs) {\n        currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(0));\n    }\n\t\n    // 为 NioServerSocketChannel 添加初始化器\n    p.addLast(new ChannelInitializer<Channel>() {\n        @Override\n        public void initChannel(final Channel ch) throws Exception {\n            final ChannelPipeline pipeline = ch.pipeline();\n            ChannelHandler handler = config.handler();\n            if (handler != null) {\n                pipeline.addLast(handler);\n            }\n\n            // 初始化器的职责是将 ServerBootstrapAcceptor 加入至 NioServerSocketChannel\n            ch.eventLoop().execute(new Runnable() {\n                @Override\n                public void run() {\n                    pipeline.addLast(new ServerBootstrapAcceptor(\n                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));\n                }\n            });\n        }\n    });\n}\n```\n\n关键代码 `io.netty.channel.AbstractChannel.AbstractUnsafe#register`\n\n```java\npublic final void register(EventLoop eventLoop, final ChannelPromise promise) {\n    // 一些检查，略...\n\n    AbstractChannel.this.eventLoop = eventLoop;\n\n    if (eventLoop.inEventLoop()) {\n        register0(promise);\n    } else {\n        try {\n            // 首次执行 execute 方法时，会启动 nio 线程，之后注册等操作在 nio 线程上执行\n            // 因为只有一个 NioServerSocketChannel 因此，也只会有一个 boss nio 线程\n            // 这行代码完成的事实是 main -> nio boss 线程的切换\n            eventLoop.execute(new Runnable() {\n                @Override\n                public void run() {\n                    register0(promise);\n                }\n            });\n        } catch (Throwable t) {\n            // 日志记录...\n            closeForcibly();\n            closeFuture.setClosed();\n            safeSetFailure(promise, t);\n        }\n    }\n}\n```\n\n\n\n`io.netty.channel.AbstractChannel.AbstractUnsafe#register0`\n\n```java\nprivate void register0(ChannelPromise promise) {\n    try {\n        if (!promise.setUncancellable() || !ensureOpen(promise)) {\n            return;\n        }\n        boolean firstRegistration = neverRegistered;\n        // 1.2.1 原生的 nio channel 绑定到 selector 上，注意此时没有注册 selector 关注事件，附件为 NioServerSocketChannel\n        doRegister();\n        neverRegistered = false;\n        registered = true;\n\n        // 1.2.2 执行 NioServerSocketChannel 初始化器的 initChannel\n        pipeline.invokeHandlerAddedIfNeeded();\n\n        // 回调 3.2 io.netty.bootstrap.AbstractBootstrap#doBind0\n        safeSetSuccess(promise);\n        pipeline.fireChannelRegistered();\n        \n        // 对应 server socket channel 还未绑定，isActive 为 false\n        if (isActive()) {\n            if (firstRegistration) {\n                pipeline.fireChannelActive();\n            } else if (config().isAutoRead()) {\n                beginRead();\n            }\n        }\n    } catch (Throwable t) {\n        // Close the channel directly to avoid FD leak.\n        closeForcibly();\n        closeFuture.setClosed();\n        safeSetFailure(promise, t);\n    }\n}\n```\n\n关键代码 `io.netty.channel.ChannelInitializer#initChannel`\n\n```java\nprivate boolean initChannel(ChannelHandlerContext ctx) throws Exception {\n    if (initMap.add(ctx)) { // Guard against re-entrance.\n        try {\n            // 1.2.2.1 执行初始化\n            initChannel((C) ctx.channel());\n        } catch (Throwable cause) {\n            exceptionCaught(ctx, cause);\n        } finally {\n            // 1.2.2.2 移除初始化器\n            ChannelPipeline pipeline = ctx.pipeline();\n            if (pipeline.context(this) != null) {\n                pipeline.remove(this);\n            }\n        }\n        return true;\n    }\n    return false;\n}\n```\n\n关键代码 `io.netty.bootstrap.AbstractBootstrap#doBind0`\n\n```java\n// 3.1 或 3.2 执行 doBind0\nprivate static void doBind0(\n        final ChannelFuture regFuture, final Channel channel,\n        final SocketAddress localAddress, final ChannelPromise promise) {\n\n    channel.eventLoop().execute(new Runnable() {\n        @Override\n        public void run() {\n            if (regFuture.isSuccess()) {\n                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);\n            } else {\n                promise.setFailure(regFuture.cause());\n            }\n        }\n    });\n}\n```\n\n关键代码 `io.netty.channel.AbstractChannel.AbstractUnsafe#bind`\n\n```java\npublic final void bind(final SocketAddress localAddress, final ChannelPromise promise) {\n    assertEventLoop();\n\n    if (!promise.setUncancellable() || !ensureOpen(promise)) {\n        return;\n    }\n\n    if (Boolean.TRUE.equals(config().getOption(ChannelOption.SO_BROADCAST)) &&\n        localAddress instanceof InetSocketAddress &&\n        !((InetSocketAddress) localAddress).getAddress().isAnyLocalAddress() &&\n        !PlatformDependent.isWindows() && !PlatformDependent.maybeSuperUser()) {\n        // 记录日志...\n    }\n\n    boolean wasActive = isActive();\n    try {\n        // 3.3 执行端口绑定\n        doBind(localAddress);\n    } catch (Throwable t) {\n        safeSetFailure(promise, t);\n        closeIfClosed();\n        return;\n    }\n\n    if (!wasActive && isActive()) {\n        invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                // 3.4 触发 active 事件\n                pipeline.fireChannelActive();\n            }\n        });\n    }\n\n    safeSetSuccess(promise);\n}\n```\n\n3.3 关键代码 `io.netty.channel.socket.nio.NioServerSocketChannel#doBind`\n\n```java\nprotected void doBind(SocketAddress localAddress) throws Exception {\n    if (PlatformDependent.javaVersion() >= 7) {\n        javaChannel().bind(localAddress, config.getBacklog());\n    } else {\n        javaChannel().socket().bind(localAddress, config.getBacklog());\n    }\n}\n```\n\n3.4 关键代码 `io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive`\n\n```java\npublic void channelActive(ChannelHandlerContext ctx) {\n    ctx.fireChannelActive();\n\t// 触发 read (NioServerSocketChannel 上的 read 不是读取数据，只是为了触发 channel 的事件注册)\n    readIfIsAutoRead();\n}\n```\n\n关键代码 `io.netty.channel.nio.AbstractNioChannel#doBeginRead`\n\n```java\nprotected void doBeginRead() throws Exception {\n    // Channel.read() or ChannelHandlerContext.read() was called\n    final SelectionKey selectionKey = this.selectionKey;\n    if (!selectionKey.isValid()) {\n        return;\n    }\n\n    readPending = true;\n\n    final int interestOps = selectionKey.interestOps();\n    // readInterestOp 取值是 16，在 NioServerSocketChannel 创建时初始化好，代表关注 accept 事件\n    if ((interestOps & readInterestOp) == 0) {\n        selectionKey.interestOps(interestOps | readInterestOp);\n    }\n}\n```\n\n\n\n### 2.2 NioEventLoop 剖析\n\nNioEventLoop 线程不仅要处理 IO 事件，还要处理 Task（包括普通任务和定时任务），\n\n提交任务代码 `io.netty.util.concurrent.SingleThreadEventExecutor#execute`\n\n```java\npublic void execute(Runnable task) {\n    if (task == null) {\n        throw new NullPointerException(\"task\");\n    }\n\n    boolean inEventLoop = inEventLoop();\n    // 添加任务，其中队列使用了 jctools 提供的 mpsc 无锁队列\n    addTask(task);\n    if (!inEventLoop) {\n        // inEventLoop 如果为 false 表示由其它线程来调用 execute，即首次调用，这时需要向 eventLoop 提交首个任务，启动死循环，会执行到下面的 doStartThread\n        startThread();\n        if (isShutdown()) {\n            // 如果已经 shutdown，做拒绝逻辑，代码略...\n        }\n    }\n\n    if (!addTaskWakesUp && wakesUpForTask(task)) {\n        // 如果线程由于 IO select 阻塞了，添加的任务的线程需要负责唤醒 NioEventLoop 线程\n        wakeup(inEventLoop);\n    }\n}\n```\n\n\n\n唤醒 select 阻塞线程`io.netty.channel.nio.NioEventLoop#wakeup`\n\n```java\n@Override\nprotected void wakeup(boolean inEventLoop) {\n    if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n        selector.wakeup();\n    }\n}\n```\n\n\n\n启动 EventLoop 主循环 `io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread`\n\n```java\nprivate void doStartThread() {\n    assert thread == null;\n    executor.execute(new Runnable() {\n        @Override\n        public void run() {\n            // 将线程池的当前线程保存在成员变量中，以便后续使用\n            thread = Thread.currentThread();\n            if (interrupted) {\n                thread.interrupt();\n            }\n\n            boolean success = false;\n            updateLastExecutionTime();\n            try {\n                // 调用外部类 SingleThreadEventExecutor 的 run 方法，进入死循环，run 方法见下\n                SingleThreadEventExecutor.this.run();\n                success = true;\n            } catch (Throwable t) {\n                logger.warn(\"Unexpected exception from an event executor: \", t);\n            } finally {\n\t\t\t\t// 清理工作，代码略...\n            }\n        }\n    });\n}\n```\n\n\n\n`io.netty.channel.nio.NioEventLoop#run` 主要任务是执行死循环，不断看有没有新任务，有没有 IO 事件\n\n```java\nprotected void run() {\n    for (;;) {\n        try {\n            try {\n                // calculateStrategy 的逻辑如下：\n                // 有任务，会执行一次 selectNow，清除上一次的 wakeup 结果，无论有没有 IO 事件，都会跳过 switch\n                // 没有任务，会匹配 SelectStrategy.SELECT，看是否应当阻塞\n                switch (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) {\n                    case SelectStrategy.CONTINUE:\n                        continue;\n\n                    case SelectStrategy.BUSY_WAIT:\n\n                    case SelectStrategy.SELECT:\n                        // 因为 IO 线程和提交任务线程都有可能执行 wakeup，而 wakeup 属于比较昂贵的操作，因此使用了一个原子布尔对象 wakenUp，它取值为 true 时，表示该由当前线程唤醒\n                        // 进行 select 阻塞，并设置唤醒状态为 false\n                        boolean oldWakenUp = wakenUp.getAndSet(false);\n                        \n                        // 如果在这个位置，非 EventLoop 线程抢先将 wakenUp 置为 true，并 wakeup\n                        // 下面的 select 方法不会阻塞\n                        // 等 runAllTasks 处理完成后，到再循环进来这个阶段新增的任务会不会及时执行呢?\n                        // 因为 oldWakenUp 为 true，因此下面的 select 方法就会阻塞，直到超时\n                        // 才能执行，让 select 方法无谓阻塞\n                        select(oldWakenUp);\n\n                        if (wakenUp.get()) {\n                            selector.wakeup();\n                        }\n                    default:\n                }\n            } catch (IOException e) {\n                rebuildSelector0();\n                handleLoopException(e);\n                continue;\n            }\n\n            cancelledKeys = 0;\n            needsToSelectAgain = false;\n            // ioRatio 默认是 50\n            final int ioRatio = this.ioRatio;\n            if (ioRatio == 100) {\n                try {\n                    processSelectedKeys();\n                } finally {\n                    // ioRatio 为 100 时，总是运行完所有非 IO 任务\n                    runAllTasks();\n                }\n            } else {                \n                final long ioStartTime = System.nanoTime();\n                try {\n                    processSelectedKeys();\n                } finally {\n                    // 记录 io 事件处理耗时\n                    final long ioTime = System.nanoTime() - ioStartTime;\n                    // 运行非 IO 任务，一旦超时会退出 runAllTasks\n                    runAllTasks(ioTime * (100 - ioRatio) / ioRatio);\n                }\n            }\n        } catch (Throwable t) {\n            handleLoopException(t);\n        }\n        try {\n            if (isShuttingDown()) {\n                closeAll();\n                if (confirmShutdown()) {\n                    return;\n                }\n            }\n        } catch (Throwable t) {\n            handleLoopException(t);\n        }\n    }\n}\n```\n\n\n\n#### ⚠️ 注意\n\n> 这里有个费解的地方就是 wakeup，它既可以由提交任务的线程来调用（比较好理解），也可以由 EventLoop 线程来调用（比较费解），这里要知道 wakeup 方法的效果：\n>\n> * 由非 EventLoop 线程调用，会唤醒当前在执行 select 阻塞的 EventLoop 线程\n> * 由 EventLoop 自己调用，会本次的 wakeup 会取消下一次的 select 操作\n\n\n\n参考下图\n\n<img src=\"img/0032.png\"  />\n\n\n\n`io.netty.channel.nio.NioEventLoop#select`\n\n```java\nprivate void select(boolean oldWakenUp) throws IOException {\n    Selector selector = this.selector;\n    try {\n        int selectCnt = 0;\n        long currentTimeNanos = System.nanoTime();\n        // 计算等待时间\n        // * 没有 scheduledTask，超时时间为 1s\n        // * 有 scheduledTask，超时时间为 `下一个定时任务执行时间 - 当前时间`\n        long selectDeadLineNanos = currentTimeNanos + delayNanos(currentTimeNanos);\n\n        for (;;) {\n            long timeoutMillis = (selectDeadLineNanos - currentTimeNanos + 500000L) / 1000000L;\n            // 如果超时，退出循环\n            if (timeoutMillis <= 0) {\n                if (selectCnt == 0) {\n                    selector.selectNow();\n                    selectCnt = 1;\n                }\n                break;\n            }\n\n            // 如果期间又有 task 退出循环，如果没这个判断，那么任务就会等到下次 select 超时时才能被执行\n            // wakenUp.compareAndSet(false, true) 是让非 NioEventLoop 不必再执行 wakeup\n            if (hasTasks() && wakenUp.compareAndSet(false, true)) {\n                selector.selectNow();\n                selectCnt = 1;\n                break;\n            }\n\n            // select 有限时阻塞\n            // 注意 nio 有 bug，当 bug 出现时，select 方法即使没有时间发生，也不会阻塞住，导致不断空轮询，cpu 占用 100%\n            int selectedKeys = selector.select(timeoutMillis);\n            // 计数加 1\n            selectCnt ++;\n\n            // 醒来后，如果有 IO 事件、或是由非 EventLoop 线程唤醒，或者有任务，退出循环\n            if (selectedKeys != 0 || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) {\n                break;\n            }\n            if (Thread.interrupted()) {\n               \t// 线程被打断，退出循环\n                // 记录日志\n                selectCnt = 1;\n                break;\n            }\n\n            long time = System.nanoTime();\n            if (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) >= currentTimeNanos) {\n                // 如果超时，计数重置为 1，下次循环就会 break\n                selectCnt = 1;\n            } \n            // 计数超过阈值，由 io.netty.selectorAutoRebuildThreshold 指定，默认 512\n            // 这是为了解决 nio 空轮询 bug\n            else if (SELECTOR_AUTO_REBUILD_THRESHOLD > 0 &&\n                    selectCnt >= SELECTOR_AUTO_REBUILD_THRESHOLD) {\n                // 重建 selector\n                selector = selectRebuildSelector(selectCnt);\n                selectCnt = 1;\n                break;\n            }\n\n            currentTimeNanos = time;\n        }\n\n        if (selectCnt > MIN_PREMATURE_SELECTOR_RETURNS) {\n            // 记录日志\n        }\n    } catch (CancelledKeyException e) {\n        // 记录日志\n    }\n}\n```\n\n\n\n处理 keys `io.netty.channel.nio.NioEventLoop#processSelectedKeys`\n\n```java\nprivate void processSelectedKeys() {\n    if (selectedKeys != null) {\n        // 通过反射将 Selector 实现类中的就绪事件集合替换为 SelectedSelectionKeySet \n        // SelectedSelectionKeySet 底层为数组实现，可以提高遍历性能（原本为 HashSet）\n        processSelectedKeysOptimized();\n    } else {\n        processSelectedKeysPlain(selector.selectedKeys());\n    }\n}\n```\n\n\n\n`io.netty.channel.nio.NioEventLoop#processSelectedKey`\n\n```java\nprivate void processSelectedKey(SelectionKey k, AbstractNioChannel ch) {\n    final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();\n    // 当 key 取消或关闭时会导致这个 key 无效\n    if (!k.isValid()) {\n        // 无效时处理...\n        return;\n    }\n\n    try {\n        int readyOps = k.readyOps();\n        // 连接事件\n        if ((readyOps & SelectionKey.OP_CONNECT) != 0) {\n            int ops = k.interestOps();\n            ops &= ~SelectionKey.OP_CONNECT;\n            k.interestOps(ops);\n\n            unsafe.finishConnect();\n        }\n\n        // 可写事件\n        if ((readyOps & SelectionKey.OP_WRITE) != 0) {\n            ch.unsafe().forceFlush();\n        }\n\n        // 可读或可接入事件\n        if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n            // 如果是可接入 io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read\n            // 如果是可读 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read\n            unsafe.read();\n        }\n    } catch (CancelledKeyException ignored) {\n        unsafe.close(unsafe.voidPromise());\n    }\n}\n```\n\n\n\n### 2.3 accept 剖析\n\nnio 中如下代码，在 netty 中的流程\n\n```java\n//1 阻塞直到事件发生\nselector.select();\n\nIterator<SelectionKey> iter = selector.selectedKeys().iterator();\nwhile (iter.hasNext()) {    \n    //2 拿到一个事件\n    SelectionKey key = iter.next();\n    \n    //3 如果是 accept 事件\n    if (key.isAcceptable()) {\n        \n        //4 执行 accept\n        SocketChannel channel = serverSocketChannel.accept();\n        channel.configureBlocking(false);\n        \n        //5 关注 read 事件\n        channel.register(selector, SelectionKey.OP_READ);\n    }\n    // ...\n}\n```\n\n\n\n\n\n\n\n先来看可接入事件处理（accept）\n\n`io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read`\n\n```java\npublic void read() {\n    assert eventLoop().inEventLoop();\n    final ChannelConfig config = config();\n    final ChannelPipeline pipeline = pipeline();    \n    final RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();\n    allocHandle.reset(config);\n\n    boolean closed = false;\n    Throwable exception = null;\n    try {\n        try {\n            do {\n\t\t\t\t// doReadMessages 中执行了 accept 并创建 NioSocketChannel 作为消息放入 readBuf\n                // readBuf 是一个 ArrayList 用来缓存消息\n                int localRead = doReadMessages(readBuf);\n                if (localRead == 0) {\n                    break;\n                }\n                if (localRead < 0) {\n                    closed = true;\n                    break;\n                }\n\t\t\t\t// localRead 为 1，就一条消息，即接收一个客户端连接\n                allocHandle.incMessagesRead(localRead);\n            } while (allocHandle.continueReading());\n        } catch (Throwable t) {\n            exception = t;\n        }\n\n        int size = readBuf.size();\n        for (int i = 0; i < size; i ++) {\n            readPending = false;\n            // 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理\n            // io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead\n            pipeline.fireChannelRead(readBuf.get(i));\n        }\n        readBuf.clear();\n        allocHandle.readComplete();\n        pipeline.fireChannelReadComplete();\n\n        if (exception != null) {\n            closed = closeOnReadError(exception);\n\n            pipeline.fireExceptionCaught(exception);\n        }\n\n        if (closed) {\n            inputShutdown = true;\n            if (isOpen()) {\n                close(voidPromise());\n            }\n        }\n    } finally {\n        if (!readPending && !config.isAutoRead()) {\n            removeReadOp();\n        }\n    }\n}\n```\n\n\n\n关键代码 `io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead`\n\n```java\npublic void channelRead(ChannelHandlerContext ctx, Object msg) {\n    // 这时的 msg 是 NioSocketChannel\n    final Channel child = (Channel) msg;\n\n    // NioSocketChannel 添加  childHandler 即初始化器\n    child.pipeline().addLast(childHandler);\n\n    // 设置选项\n    setChannelOptions(child, childOptions, logger);\n\n    for (Entry<AttributeKey<?>, Object> e: childAttrs) {\n        child.attr((AttributeKey<Object>) e.getKey()).set(e.getValue());\n    }\n\n    try {\n        // 注册 NioSocketChannel 到 nio worker 线程，接下来的处理也移交至 nio worker 线程\n        childGroup.register(child).addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                if (!future.isSuccess()) {\n                    forceClose(child, future.cause());\n                }\n            }\n        });\n    } catch (Throwable t) {\n        forceClose(child, t);\n    }\n}\n```\n\n\n\n又回到了熟悉的 `io.netty.channel.AbstractChannel.AbstractUnsafe#register`  方法\n\n```java\npublic final void register(EventLoop eventLoop, final ChannelPromise promise) {\n    // 一些检查，略...\n\n    AbstractChannel.this.eventLoop = eventLoop;\n\n    if (eventLoop.inEventLoop()) {\n        register0(promise);\n    } else {\n        try {\n            // 这行代码完成的事实是 nio boss -> nio worker 线程的切换\n            eventLoop.execute(new Runnable() {\n                @Override\n                public void run() {\n                    register0(promise);\n                }\n            });\n        } catch (Throwable t) {\n            // 日志记录...\n            closeForcibly();\n            closeFuture.setClosed();\n            safeSetFailure(promise, t);\n        }\n    }\n}\n```\n\n`io.netty.channel.AbstractChannel.AbstractUnsafe#register0`\n\n```java\nprivate void register0(ChannelPromise promise) {\n    try {\n        if (!promise.setUncancellable() || !ensureOpen(promise)) {\n            return;\n        }\n        boolean firstRegistration = neverRegistered;\n        doRegister();\n        neverRegistered = false;\n        registered = true;\n\t\t\n        // 执行初始化器，执行前 pipeline 中只有 head -> 初始化器 -> tail\n        pipeline.invokeHandlerAddedIfNeeded();\n        // 执行后就是 head -> logging handler -> my handler -> tail\n\n        safeSetSuccess(promise);\n        pipeline.fireChannelRegistered();\n        \n        if (isActive()) {\n            if (firstRegistration) {\n                // 触发 pipeline 上 active 事件\n                pipeline.fireChannelActive();\n            } else if (config().isAutoRead()) {\n                beginRead();\n            }\n        }\n    } catch (Throwable t) {\n        closeForcibly();\n        closeFuture.setClosed();\n        safeSetFailure(promise, t);\n    }\n}\n```\n\n\n\n回到了熟悉的代码 `io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive`\n\n```java\npublic void channelActive(ChannelHandlerContext ctx) {\n    ctx.fireChannelActive();\n\t// 触发 read (NioSocketChannel 这里 read，只是为了触发 channel 的事件注册，还未涉及数据读取)\n    readIfIsAutoRead();\n}\n```\n\n`io.netty.channel.nio.AbstractNioChannel#doBeginRead`\n\n```java\nprotected void doBeginRead() throws Exception {\n    // Channel.read() or ChannelHandlerContext.read() was called\n    final SelectionKey selectionKey = this.selectionKey;\n    if (!selectionKey.isValid()) {\n        return;\n    }\n\n    readPending = true;\n\t// 这时候 interestOps 是 0\n    final int interestOps = selectionKey.interestOps();\n    if ((interestOps & readInterestOp) == 0) {\n        // 关注 read 事件\n        selectionKey.interestOps(interestOps | readInterestOp);\n    }\n}\n```\n\n\n\n### 2.4 read 剖析\n\n再来看可读事件 `io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read`，注意发送的数据未必能够一次读完，因此会触发多次 nio read 事件，一次事件内会触发多次 pipeline read，一次事件会触发一次 pipeline read complete\n\n```java\npublic final void read() {\n    final ChannelConfig config = config();\n    if (shouldBreakReadReady(config)) {\n        clearReadPending();\n        return;\n    }\n    final ChannelPipeline pipeline = pipeline();\n    // io.netty.allocator.type 决定 allocator 的实现\n    final ByteBufAllocator allocator = config.getAllocator();\n    // 用来分配 byteBuf，确定单次读取大小\n    final RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();\n    allocHandle.reset(config);\n\n    ByteBuf byteBuf = null;\n    boolean close = false;\n    try {\n        do {\n            byteBuf = allocHandle.allocate(allocator);\n            // 读取\n            allocHandle.lastBytesRead(doReadBytes(byteBuf));\n            if (allocHandle.lastBytesRead() <= 0) {\n                byteBuf.release();\n                byteBuf = null;\n                close = allocHandle.lastBytesRead() < 0;\n                if (close) {\n                    readPending = false;\n                }\n                break;\n            }\n\n            allocHandle.incMessagesRead(1);\n            readPending = false;\n            // 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理 NioSocketChannel 上的 handler\n            pipeline.fireChannelRead(byteBuf);\n            byteBuf = null;\n        } \n        // 是否要继续循环\n        while (allocHandle.continueReading());\n\n        allocHandle.readComplete();\n        // 触发 read complete 事件\n        pipeline.fireChannelReadComplete();\n\n        if (close) {\n            closeOnRead(pipeline);\n        }\n    } catch (Throwable t) {\n        handleReadException(pipeline, byteBuf, t, close, allocHandle);\n    } finally {\n        if (!readPending && !config.isAutoRead()) {\n            removeReadOp();\n        }\n    }\n}\n```\n\n\n\n`io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle#continueReading(io.netty.util.UncheckedBooleanSupplier)`\n\n```java\npublic boolean continueReading(UncheckedBooleanSupplier maybeMoreDataSupplier) {\n    return \n           // 一般为 true\n           config.isAutoRead() &&\n           // respectMaybeMoreData 默认为 true\n           // maybeMoreDataSupplier 的逻辑是如果预期读取字节与实际读取字节相等，返回 true\n           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &&\n           // 小于最大次数，maxMessagePerRead 默认 16\n           totalMessages < maxMessagePerRead &&\n           // 实际读到了数据\n           totalBytesRead > 0;\n}\n```\n\n\n\n\n","source":"_posts/2023-05-06-Netty04-优化与源码.md","raw":"---\ntitle: Netty04-优化与源码\ndate: 2023-05-06 21:26:15\ntags: \n- Netty\n- programing\n- Java\ncategories: Netty\n---\n\n该笔记是B站黑马的Netty视频的配套笔记4。\n<!-- more -->\n# 四. 优化与源码\n\n## 1. 优化\n\n### 1.1 扩展序列化算法\n\n序列化，反序列化主要用在消息正文的转换上\n\n* 序列化时，需要将 Java 对象变为要传输的数据（可以是 byte[]，或 json 等，最终都需要变成 byte[]）\n* 反序列化时，需要将传入的正文数据还原成 Java 对象，便于处理\n\n目前的代码仅支持 Java 自带的序列化，反序列化机制，核心代码如下\n\n```java\n// 反序列化\nbyte[] body = new byte[bodyLength];\nbyteByf.readBytes(body);\nObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(body));\nMessage message = (Message) in.readObject();\nmessage.setSequenceId(sequenceId);\n\n// 序列化\nByteArrayOutputStream out = new ByteArrayOutputStream();\nnew ObjectOutputStream(out).writeObject(message);\nbyte[] bytes = out.toByteArray();\n```\n\n为了支持更多序列化算法，抽象一个 Serializer 接口\n\n```java\npublic interface Serializer {\n\n    // 反序列化方法\n    <T> T deserialize(Class<T> clazz, byte[] bytes);\n\n    // 序列化方法\n    <T> byte[] serialize(T object);\n\n}\n```\n\n提供两个实现，我这里直接将实现加入了枚举类 Serializer.Algorithm 中\n\n```java\nenum SerializerAlgorithm implements Serializer {\n\t// Java 实现\n    Java {\n        @Override\n        public <T> T deserialize(Class<T> clazz, byte[] bytes) {\n            try {\n                ObjectInputStream in = \n                    new ObjectInputStream(new ByteArrayInputStream(bytes));\n                Object object = in.readObject();\n                return (T) object;\n            } catch (IOException | ClassNotFoundException e) {\n                throw new RuntimeException(\"SerializerAlgorithm.Java 反序列化错误\", e);\n            }\n        }\n\n        @Override\n        public <T> byte[] serialize(T object) {\n            try {\n                ByteArrayOutputStream out = new ByteArrayOutputStream();\n                new ObjectOutputStream(out).writeObject(object);\n                return out.toByteArray();\n            } catch (IOException e) {\n                throw new RuntimeException(\"SerializerAlgorithm.Java 序列化错误\", e);\n            }\n        }\n    }, \n    // Json 实现(引入了 Gson 依赖)\n    Json {\n        @Override\n        public <T> T deserialize(Class<T> clazz, byte[] bytes) {\n            return new Gson().fromJson(new String(bytes, StandardCharsets.UTF_8), clazz);\n        }\n\n        @Override\n        public <T> byte[] serialize(T object) {\n            return new Gson().toJson(object).getBytes(StandardCharsets.UTF_8);\n        }\n    };\n\n    // 需要从协议的字节中得到是哪种序列化算法\n    public static SerializerAlgorithm getByInt(int type) {\n        SerializerAlgorithm[] array = SerializerAlgorithm.values();\n        if (type < 0 || type > array.length - 1) {\n            throw new IllegalArgumentException(\"超过 SerializerAlgorithm 范围\");\n        }\n        return array[type];\n    }\n}\n```\n\n\n\n增加配置类和配置文件\n\n```java\npublic abstract class Config {\n    static Properties properties;\n    static {\n        try (InputStream in = Config.class.getResourceAsStream(\"/application.properties\")) {\n            properties = new Properties();\n            properties.load(in);\n        } catch (IOException e) {\n            throw new ExceptionInInitializerError(e);\n        }\n    }\n    public static int getServerPort() {\n        String value = properties.getProperty(\"server.port\");\n        if(value == null) {\n            return 8080;\n        } else {\n            return Integer.parseInt(value);\n        }\n    }\n    public static Serializer.Algorithm getSerializerAlgorithm() {\n        String value = properties.getProperty(\"serializer.algorithm\");\n        if(value == null) {\n            return Serializer.Algorithm.Java;\n        } else {\n            return Serializer.Algorithm.valueOf(value);\n        }\n    }\n}\n```\n\n\n\n配置文件\n\n```properties\nserializer.algorithm=Json\n```\n\n\n\n修改编解码器\n\n```java\n/**\n * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的\n */\npublic class MessageCodecSharable extends MessageToMessageCodec<ByteBuf, Message> {\n    @Override\n    public void encode(ChannelHandlerContext ctx, Message msg, List<Object> outList) throws Exception {\n        ByteBuf out = ctx.alloc().buffer();\n        // 1. 4 字节的魔数\n        out.writeBytes(new byte[]{1, 2, 3, 4});\n        // 2. 1 字节的版本,\n        out.writeByte(1);\n        // 3. 1 字节的序列化方式 jdk 0 , json 1\n        out.writeByte(Config.getSerializerAlgorithm().ordinal());\n        // 4. 1 字节的指令类型\n        out.writeByte(msg.getMessageType());\n        // 5. 4 个字节\n        out.writeInt(msg.getSequenceId());\n        // 无意义，对齐填充\n        out.writeByte(0xff);\n        // 6. 获取内容的字节数组\n        byte[] bytes = Config.getSerializerAlgorithm().serialize(msg);\n        // 7. 长度\n        out.writeInt(bytes.length);\n        // 8. 写入内容\n        out.writeBytes(bytes);\n        outList.add(out);\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        int magicNum = in.readInt();\n        byte version = in.readByte();\n        byte serializerAlgorithm = in.readByte(); // 0 或 1\n        byte messageType = in.readByte(); // 0,1,2...\n        int sequenceId = in.readInt();\n        in.readByte();\n        int length = in.readInt();\n        byte[] bytes = new byte[length];\n        in.readBytes(bytes, 0, length);\n\n        // 找到反序列化算法\n        Serializer.Algorithm algorithm = Serializer.Algorithm.values()[serializerAlgorithm];\n        // 确定具体消息类型\n        Class<? extends Message> messageClass = Message.getMessageClass(messageType);\n        Message message = algorithm.deserialize(messageClass, bytes);\n//        log.debug(\"{}, {}, {}, {}, {}, {}\", magicNum, version, serializerType, messageType, sequenceId, length);\n//        log.debug(\"{}\", message);\n        out.add(message);\n    }\n}\n```\n\n\n\n其中确定具体消息类型，可以根据 `消息类型字节` 获取到对应的 `消息 class`\n\n```java\n@Data\npublic abstract class Message implements Serializable {\n\n    /**\n     * 根据消息类型字节，获得对应的消息 class\n     * @param messageType 消息类型字节\n     * @return 消息 class\n     */\n    public static Class<? extends Message> getMessageClass(int messageType) {\n        return messageClasses.get(messageType);\n    }\n\n    private int sequenceId;\n\n    private int messageType;\n\n    public abstract int getMessageType();\n\n    public static final int LoginRequestMessage = 0;\n    public static final int LoginResponseMessage = 1;\n    public static final int ChatRequestMessage = 2;\n    public static final int ChatResponseMessage = 3;\n    public static final int GroupCreateRequestMessage = 4;\n    public static final int GroupCreateResponseMessage = 5;\n    public static final int GroupJoinRequestMessage = 6;\n    public static final int GroupJoinResponseMessage = 7;\n    public static final int GroupQuitRequestMessage = 8;\n    public static final int GroupQuitResponseMessage = 9;\n    public static final int GroupChatRequestMessage = 10;\n    public static final int GroupChatResponseMessage = 11;\n    public static final int GroupMembersRequestMessage = 12;\n    public static final int GroupMembersResponseMessage = 13;\n    public static final int PingMessage = 14;\n    public static final int PongMessage = 15;\n    private static final Map<Integer, Class<? extends Message>> messageClasses = new HashMap<>();\n\n    static {\n        messageClasses.put(LoginRequestMessage, LoginRequestMessage.class);\n        messageClasses.put(LoginResponseMessage, LoginResponseMessage.class);\n        messageClasses.put(ChatRequestMessage, ChatRequestMessage.class);\n        messageClasses.put(ChatResponseMessage, ChatResponseMessage.class);\n        messageClasses.put(GroupCreateRequestMessage, GroupCreateRequestMessage.class);\n        messageClasses.put(GroupCreateResponseMessage, GroupCreateResponseMessage.class);\n        messageClasses.put(GroupJoinRequestMessage, GroupJoinRequestMessage.class);\n        messageClasses.put(GroupJoinResponseMessage, GroupJoinResponseMessage.class);\n        messageClasses.put(GroupQuitRequestMessage, GroupQuitRequestMessage.class);\n        messageClasses.put(GroupQuitResponseMessage, GroupQuitResponseMessage.class);\n        messageClasses.put(GroupChatRequestMessage, GroupChatRequestMessage.class);\n        messageClasses.put(GroupChatResponseMessage, GroupChatResponseMessage.class);\n        messageClasses.put(GroupMembersRequestMessage, GroupMembersRequestMessage.class);\n        messageClasses.put(GroupMembersResponseMessage, GroupMembersResponseMessage.class);\n    }\n}\n```\n\n\n\n### 1.2 参数调优\n\n#### 1）CONNECT_TIMEOUT_MILLIS\n\n* 属于 SocketChannal 参数\n* 用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 timeout 异常\n\n* SO_TIMEOUT 主要用在阻塞 IO，阻塞 IO 中 accept，read 等都是无限等待的，如果不希望永远阻塞，使用它调整超时时间\n\n```java\n@Slf4j\npublic class TestConnectionTimeout {\n    public static void main(String[] args) {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 300)\n                    .channel(NioSocketChannel.class)\n                    .handler(new LoggingHandler());\n            ChannelFuture future = bootstrap.connect(\"127.0.0.1\", 8080);\n            future.sync().channel().closeFuture().sync(); // 断点1\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.debug(\"timeout\");\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n另外源码部分 `io.netty.channel.nio.AbstractNioChannel.AbstractNioUnsafe#connect`\n\n```java\n@Override\npublic final void connect(\n        final SocketAddress remoteAddress, final SocketAddress localAddress, final ChannelPromise promise) {\n    // ...\n    // Schedule connect timeout.\n    int connectTimeoutMillis = config().getConnectTimeoutMillis();\n    if (connectTimeoutMillis > 0) {\n        connectTimeoutFuture = eventLoop().schedule(new Runnable() {\n            @Override\n            public void run() {                \n                ChannelPromise connectPromise = AbstractNioChannel.this.connectPromise;\n                ConnectTimeoutException cause =\n                    new ConnectTimeoutException(\"connection timed out: \" + remoteAddress); // 断点2\n                if (connectPromise != null && connectPromise.tryFailure(cause)) {\n                    close(voidPromise());\n                }\n            }\n        }, connectTimeoutMillis, TimeUnit.MILLISECONDS);\n    }\n\t// ...\n}\n```\n\n\n\n#### 2）SO_BACKLOG\n\n* 属于 ServerSocketChannal 参数\n\n```mermaid\nsequenceDiagram\n\nparticipant c as client\nparticipant s as server\nparticipant sq as syns queue\nparticipant aq as accept queue\n\ns ->> s : bind()\ns ->> s : listen()\nc ->> c : connect()\nc ->> s : 1. SYN\nNote left of c : SYN_SEND\ns ->> sq : put\nNote right of s : SYN_RCVD\ns ->> c : 2. SYN + ACK\nNote left of c : ESTABLISHED\nc ->> s : 3. ACK\nsq ->> aq : put\nNote right of s : ESTABLISHED\naq -->> s : \ns ->> s : accept()\n```\n\n1. 第一次握手，client 发送 SYN 到 server，状态修改为 SYN_SEND，server 收到，状态改变为 SYN_REVD，并将该请求放入 sync queue 队列\n2. 第二次握手，server 回复 SYN + ACK 给 client，client 收到，状态改变为 ESTABLISHED，并发送 ACK 给 server\n3. 第三次握手，server 收到 ACK，状态改变为 ESTABLISHED，将该请求从 sync queue 放入 accept queue\n\n其中\n\n* 在 linux 2.2 之前，backlog 大小包括了两个队列的大小，在 2.2 之后，分别用下面两个参数来控制\n\n* sync queue - 半连接队列\n  * 大小通过 /proc/sys/net/ipv4/tcp_max_syn_backlog 指定，在 `syncookies` 启用的情况下，逻辑上没有最大值限制，这个设置便被忽略\n* accept queue - 全连接队列\n  * 其大小通过 /proc/sys/net/core/somaxconn 指定，在使用 listen 函数时，内核会根据传入的 backlog 参数与系统参数，取二者的较小值\n  * 如果 accpet queue 队列满了，server 将发送一个拒绝连接的错误信息到 client\n\n\n\nnetty 中\n\n可以通过  option(ChannelOption.SO_BACKLOG, 值) 来设置大小\n\n\n\n可以通过下面源码查看默认大小\n\n```java\npublic class DefaultServerSocketChannelConfig extends DefaultChannelConfig\n                                              implements ServerSocketChannelConfig {\n\n    private volatile int backlog = NetUtil.SOMAXCONN;\n    // ...\n}\n```\n\n\n\n课堂调试关键断点为：`io.netty.channel.nio.NioEventLoop#processSelectedKey`\n\n\n\noio 中更容易说明，不用 debug 模式\n\n```java\npublic class Server {\n    public static void main(String[] args) throws IOException {\n        ServerSocket ss = new ServerSocket(8888, 2);\n        Socket accept = ss.accept();\n        System.out.println(accept);\n        System.in.read();\n    }\n}\n```\n\n客户端启动 4 个\n\n```java\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        try {\n            Socket s = new Socket();\n            System.out.println(new Date()+\" connecting...\");\n            s.connect(new InetSocketAddress(\"localhost\", 8888),1000);\n            System.out.println(new Date()+\" connected...\");\n            s.getOutputStream().write(1);\n            System.in.read();\n        } catch (IOException e) {\n            System.out.println(new Date()+\" connecting timeout...\");\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n第 1，2，3 个客户端都打印，但除了第一个处于 accpet 外，其它两个都处于 accept queue 中\n\n```java\nTue Apr 21 20:30:28 CST 2020 connecting...\nTue Apr 21 20:30:28 CST 2020 connected...\n```\n\n第 4 个客户端连接时\n\n```\nTue Apr 21 20:53:58 CST 2020 connecting...\nTue Apr 21 20:53:59 CST 2020 connecting timeout...\njava.net.SocketTimeoutException: connect timed out\n```\n\n\n\n\n\n#### 3）ulimit -n\n\n* 属于操作系统参数\n\n\n\n#### 4）TCP_NODELAY\n\n* 属于 SocketChannal 参数\n\n\n\n#### 5）SO_SNDBUF & SO_RCVBUF\n\n* SO_SNDBUF 属于 SocketChannal 参数\n* SO_RCVBUF 既可用于 SocketChannal 参数，也可以用于 ServerSocketChannal 参数（建议设置到 ServerSocketChannal 上）\n\n\n\n#### 6）ALLOCATOR\n\n* 属于 SocketChannal 参数\n* 用来分配 ByteBuf， ctx.alloc()\n\n\n\n#### 7）RCVBUF_ALLOCATOR\n\n* 属于 SocketChannal 参数\n* 控制 netty 接收缓冲区大小\n* 负责入站数据的分配，决定入站缓冲区的大小（并可动态调整），统一采用 direct 直接内存，具体池化还是非池化由 allocator 决定\n\n\n\n### 1.3 RPC 框架\n\n#### 1）准备工作\n\n这些代码可以认为是现成的，无需从头编写练习\n\n为了简化起见，在原来聊天项目的基础上新增 Rpc 请求和响应消息\n\n```java\n@Data\npublic abstract class Message implements Serializable {\n\n    // 省略旧的代码\n\n    public static final int RPC_MESSAGE_TYPE_REQUEST = 101;\n    public static final int  RPC_MESSAGE_TYPE_RESPONSE = 102;\n\n    static {\n        // ...\n        messageClasses.put(RPC_MESSAGE_TYPE_REQUEST, RpcRequestMessage.class);\n        messageClasses.put(RPC_MESSAGE_TYPE_RESPONSE, RpcResponseMessage.class);\n    }\n\n}\n```\n\n请求消息\n\n```java\n@Getter\n@ToString(callSuper = true)\npublic class RpcRequestMessage extends Message {\n\n    /**\n     * 调用的接口全限定名，服务端根据它找到实现\n     */\n    private String interfaceName;\n    /**\n     * 调用接口中的方法名\n     */\n    private String methodName;\n    /**\n     * 方法返回类型\n     */\n    private Class<?> returnType;\n    /**\n     * 方法参数类型数组\n     */\n    private Class[] parameterTypes;\n    /**\n     * 方法参数值数组\n     */\n    private Object[] parameterValue;\n\n    public RpcRequestMessage(int sequenceId, String interfaceName, String methodName, Class<?> returnType, Class[] parameterTypes, Object[] parameterValue) {\n        super.setSequenceId(sequenceId);\n        this.interfaceName = interfaceName;\n        this.methodName = methodName;\n        this.returnType = returnType;\n        this.parameterTypes = parameterTypes;\n        this.parameterValue = parameterValue;\n    }\n\n    @Override\n    public int getMessageType() {\n        return RPC_MESSAGE_TYPE_REQUEST;\n    }\n}\n```\n\n响应消息\n\n```java\n@Data\n@ToString(callSuper = true)\npublic class RpcResponseMessage extends Message {\n    /**\n     * 返回值\n     */\n    private Object returnValue;\n    /**\n     * 异常值\n     */\n    private Exception exceptionValue;\n\n    @Override\n    public int getMessageType() {\n        return RPC_MESSAGE_TYPE_RESPONSE;\n    }\n}\n```\n\n服务器架子\n\n```java\n@Slf4j\npublic class RpcServer {\n    public static void main(String[] args) {\n        NioEventLoopGroup boss = new NioEventLoopGroup();\n        NioEventLoopGroup worker = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        \n        // rpc 请求消息处理器，待实现\n        RpcRequestMessageHandler RPC_HANDLER = new RpcRequestMessageHandler();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.channel(NioServerSocketChannel.class);\n            serverBootstrap.group(boss, worker);\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(RPC_HANDLER);\n                }\n            });\n            Channel channel = serverBootstrap.bind(8080).sync().channel();\n            channel.closeFuture().sync();\n        } catch (InterruptedException e) {\n            log.error(\"server error\", e);\n        } finally {\n            boss.shutdownGracefully();\n            worker.shutdownGracefully();\n        }\n    }\n}\n```\n\n客户端架子\n\n```java\npublic class RpcClient {\n    public static void main(String[] args) {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        \n        // rpc 响应消息处理器，待实现\n        RpcResponseMessageHandler RPC_HANDLER = new RpcResponseMessageHandler();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(group);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(RPC_HANDLER);\n                }\n            });\n            Channel channel = bootstrap.connect(\"localhost\", 8080).sync().channel();\n            channel.closeFuture().sync();\n        } catch (Exception e) {\n            log.error(\"client error\", e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n服务器端的 service 获取\n\n```java\npublic class ServicesFactory {\n\n    static Properties properties;\n    static Map<Class<?>, Object> map = new ConcurrentHashMap<>();\n\n    static {\n        try (InputStream in = Config.class.getResourceAsStream(\"/application.properties\")) {\n            properties = new Properties();\n            properties.load(in);\n            Set<String> names = properties.stringPropertyNames();\n            for (String name : names) {\n                if (name.endsWith(\"Service\")) {\n                    Class<?> interfaceClass = Class.forName(name);\n                    Class<?> instanceClass = Class.forName(properties.getProperty(name));\n                    map.put(interfaceClass, instanceClass.newInstance());\n                }\n            }\n        } catch (IOException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n            throw new ExceptionInInitializerError(e);\n        }\n    }\n\n    public static <T> T getService(Class<T> interfaceClass) {\n        return (T) map.get(interfaceClass);\n    }\n}\n```\n\n相关配置 application.properties\n\n```\nserializer.algorithm=Json\ncn.itcast.server.service.HelloService=cn.itcast.server.service.HelloServiceImpl\n```\n\n\n\n#### 2）服务器 handler\n\n```java\n@Slf4j\n@ChannelHandler.Sharable\npublic class RpcRequestMessageHandler extends SimpleChannelInboundHandler<RpcRequestMessage> {\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, RpcRequestMessage message) {\n        RpcResponseMessage response = new RpcResponseMessage();\n        response.setSequenceId(message.getSequenceId());\n        try {\n            // 获取真正的实现对象\n            HelloService service = (HelloService)\n                    ServicesFactory.getService(Class.forName(message.getInterfaceName()));\n            \n            // 获取要调用的方法\n            Method method = service.getClass().getMethod(message.getMethodName(), message.getParameterTypes());\n            \n            // 调用方法\n            Object invoke = method.invoke(service, message.getParameterValue());\n            // 调用成功\n            response.setReturnValue(invoke);\n        } catch (Exception e) {\n            e.printStackTrace();\n            // 调用异常\n            response.setExceptionValue(e);\n        }\n        // 返回结果\n        ctx.writeAndFlush(response);\n    }\n}\n```\n\n\n\n\n\n#### 3）客户端代码第一版\n\n只发消息\n\n```java\n@Slf4j\npublic class RpcClient {\n    public static void main(String[] args) {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        RpcResponseMessageHandler RPC_HANDLER = new RpcResponseMessageHandler();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.group(group);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new ProcotolFrameDecoder());\n                    ch.pipeline().addLast(LOGGING_HANDLER);\n                    ch.pipeline().addLast(MESSAGE_CODEC);\n                    ch.pipeline().addLast(RPC_HANDLER);\n                }\n            });\n            Channel channel = bootstrap.connect(\"localhost\", 8080).sync().channel();\n\n            ChannelFuture future = channel.writeAndFlush(new RpcRequestMessage(\n                    1,\n                    \"cn.itcast.server.service.HelloService\",\n                    \"sayHello\",\n                    String.class,\n                    new Class[]{String.class},\n                    new Object[]{\"张三\"}\n            )).addListener(promise -> {\n                if (!promise.isSuccess()) {\n                    Throwable cause = promise.cause();\n                    log.error(\"error\", cause);\n                }\n            });\n\n            channel.closeFuture().sync();\n        } catch (Exception e) {\n            log.error(\"client error\", e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n\n\n#### 4）客户端 handler 第一版\n\n```java\n@Slf4j\n@ChannelHandler.Sharable\npublic class RpcResponseMessageHandler extends SimpleChannelInboundHandler<RpcResponseMessage> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, RpcResponseMessage msg) throws Exception {\n        log.debug(\"{}\", msg);\n    }\n}\n```\n\n\n\n\n\n#### 5）客户端代码 第二版\n\n包括 channel 管理，代理，接收结果\n\n```java\n@Slf4j\npublic class RpcClientManager {\n\n\n    public static void main(String[] args) {\n        HelloService service = getProxyService(HelloService.class);\n        System.out.println(service.sayHello(\"zhangsan\"));\n//        System.out.println(service.sayHello(\"lisi\"));\n//        System.out.println(service.sayHello(\"wangwu\"));\n    }\n\n    // 创建代理类\n    public static <T> T getProxyService(Class<T> serviceClass) {\n        ClassLoader loader = serviceClass.getClassLoader();\n        Class<?>[] interfaces = new Class[]{serviceClass};\n        //                                                            sayHello  \"张三\"\n        Object o = Proxy.newProxyInstance(loader, interfaces, (proxy, method, args) -> {\n            // 1. 将方法调用转换为 消息对象\n            int sequenceId = SequenceIdGenerator.nextId();\n            RpcRequestMessage msg = new RpcRequestMessage(\n                    sequenceId,\n                    serviceClass.getName(),\n                    method.getName(),\n                    method.getReturnType(),\n                    method.getParameterTypes(),\n                    args\n            );\n            // 2. 将消息对象发送出去\n            getChannel().writeAndFlush(msg);\n\n            // 3. 准备一个空 Promise 对象，来接收结果             指定 promise 对象异步接收结果线程\n            DefaultPromise<Object> promise = new DefaultPromise<>(getChannel().eventLoop());\n            RpcResponseMessageHandler.PROMISES.put(sequenceId, promise);\n\n//            promise.addListener(future -> {\n//                // 线程\n//            });\n\n            // 4. 等待 promise 结果\n            promise.await();\n            if(promise.isSuccess()) {\n                // 调用正常\n                return promise.getNow();\n            } else {\n                // 调用失败\n                throw new RuntimeException(promise.cause());\n            }\n        });\n        return (T) o;\n    }\n\n    private static Channel channel = null;\n    private static final Object LOCK = new Object();\n\n    // 获取唯一的 channel 对象\n    public static Channel getChannel() {\n        if (channel != null) {\n            return channel;\n        }\n        synchronized (LOCK) { //  t2\n            if (channel != null) { // t1\n                return channel;\n            }\n            initChannel();\n            return channel;\n        }\n    }\n\n    // 初始化 channel 方法\n    private static void initChannel() {\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        LoggingHandler LOGGING_HANDLER = new LoggingHandler(LogLevel.DEBUG);\n        MessageCodecSharable MESSAGE_CODEC = new MessageCodecSharable();\n        RpcResponseMessageHandler RPC_HANDLER = new RpcResponseMessageHandler();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.channel(NioSocketChannel.class);\n        bootstrap.group(group);\n        bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ch.pipeline().addLast(new ProcotolFrameDecoder());\n                ch.pipeline().addLast(LOGGING_HANDLER);\n                ch.pipeline().addLast(MESSAGE_CODEC);\n                ch.pipeline().addLast(RPC_HANDLER);\n            }\n        });\n        try {\n            channel = bootstrap.connect(\"localhost\", 8080).sync().channel();\n            channel.closeFuture().addListener(future -> {\n                group.shutdownGracefully();\n            });\n        } catch (Exception e) {\n            log.error(\"client error\", e);\n        }\n    }\n}\n```\n\n\n\n#### 6）客户端 handler 第二版\n\n```java\n@Slf4j\n@ChannelHandler.Sharable\npublic class RpcResponseMessageHandler extends SimpleChannelInboundHandler<RpcResponseMessage> {\n\n    //                       序号      用来接收结果的 promise 对象\n    public static final Map<Integer, Promise<Object>> PROMISES = new ConcurrentHashMap<>();\n\n    @Override\n\n    protected void channelRead0(ChannelHandlerContext ctx, RpcResponseMessage msg) throws Exception {\n        log.debug(\"{}\", msg);\n        // 拿到空的 promise\n        Promise<Object> promise = PROMISES.remove(msg.getSequenceId());\n        if (promise != null) {\n            Object returnValue = msg.getReturnValue();\n            Exception exceptionValue = msg.getExceptionValue();\n            if(exceptionValue != null) {\n                promise.setFailure(exceptionValue);\n            } else {\n                promise.setSuccess(returnValue);\n            }\n        }\n    }\n}\n```\n\n\n\n\n\n## 2. 源码分析\n\n### 2.1 启动剖析\n\n我们就来看看 netty 中对下面的代码是怎样进行处理的\n\n```java\n//1 netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector\nSelector selector = Selector.open(); \n\n//2 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config\nNioServerSocketChannel attachment = new NioServerSocketChannel();\n\n//3 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel\nServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); \nserverSocketChannel.configureBlocking(false);\n\n//4 启动 nio boss 线程执行接下来的操作\n\n//5 注册（仅关联 selector 和 NioServerSocketChannel），未关注事件\nSelectionKey selectionKey = serverSocketChannel.register(selector, 0, attachment);\n\n//6 head -> 初始化器 -> ServerBootstrapAcceptor -> tail，初始化器是一次性的，只为添加 acceptor\n\n//7 绑定端口\nserverSocketChannel.bind(new InetSocketAddress(8080));\n\n//8 触发 channel active 事件，在 head 中关注 op_accept 事件\nselectionKey.interestOps(SelectionKey.OP_ACCEPT);\n```\n\n\n\n\n\n\n\n入口 `io.netty.bootstrap.ServerBootstrap#bind`\n\n关键代码 `io.netty.bootstrap.AbstractBootstrap#doBind`\n\n```java\nprivate ChannelFuture doBind(final SocketAddress localAddress) {\n\t// 1. 执行初始化和注册 regFuture 会由 initAndRegister 设置其是否完成，从而回调 3.2 处代码\n    final ChannelFuture regFuture = initAndRegister();\n    final Channel channel = regFuture.channel();\n    if (regFuture.cause() != null) {\n        return regFuture;\n    }\n\n    // 2. 因为是 initAndRegister 异步执行，需要分两种情况来看，调试时也需要通过 suspend 断点类型加以区分\n    // 2.1 如果已经完成\n    if (regFuture.isDone()) {\n        ChannelPromise promise = channel.newPromise();\n        // 3.1 立刻调用 doBind0\n        doBind0(regFuture, channel, localAddress, promise);\n        return promise;\n    } \n    // 2.2 还没有完成\n    else {\n        final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel);\n        // 3.2 回调 doBind0\n        regFuture.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                Throwable cause = future.cause();\n                if (cause != null) {\n                    // 处理异常...\n                    promise.setFailure(cause);\n                } else {\n                    promise.registered();\n\t\t\t\t\t// 3. 由注册线程去执行 doBind0\n                    doBind0(regFuture, channel, localAddress, promise);\n                }\n            }\n        });\n        return promise;\n    }\n}\n```\n\n关键代码 `io.netty.bootstrap.AbstractBootstrap#initAndRegister`\n\n```java\nfinal ChannelFuture initAndRegister() {\n    Channel channel = null;\n    try {\n        channel = channelFactory.newChannel();\n        // 1.1 初始化 - 做的事就是添加一个初始化器 ChannelInitializer\n        init(channel);\n    } catch (Throwable t) {\n        // 处理异常...\n        return new DefaultChannelPromise(new FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t);\n    }\n\n    // 1.2 注册 - 做的事就是将原生 channel 注册到 selector 上\n    ChannelFuture regFuture = config().group().register(channel);\n    if (regFuture.cause() != null) {\n        // 处理异常...\n    }\n    return regFuture;\n}\n```\n\n关键代码 `io.netty.bootstrap.ServerBootstrap#init`\n\n```java\n// 这里 channel 实际上是 NioServerSocketChannel\nvoid init(Channel channel) throws Exception {\n    final Map<ChannelOption<?>, Object> options = options0();\n    synchronized (options) {\n        setChannelOptions(channel, options, logger);\n    }\n\n    final Map<AttributeKey<?>, Object> attrs = attrs0();\n    synchronized (attrs) {\n        for (Entry<AttributeKey<?>, Object> e: attrs.entrySet()) {\n            @SuppressWarnings(\"unchecked\")\n            AttributeKey<Object> key = (AttributeKey<Object>) e.getKey();\n            channel.attr(key).set(e.getValue());\n        }\n    }\n\n    ChannelPipeline p = channel.pipeline();\n\n    final EventLoopGroup currentChildGroup = childGroup;\n    final ChannelHandler currentChildHandler = childHandler;\n    final Entry<ChannelOption<?>, Object>[] currentChildOptions;\n    final Entry<AttributeKey<?>, Object>[] currentChildAttrs;\n    synchronized (childOptions) {\n        currentChildOptions = childOptions.entrySet().toArray(newOptionArray(0));\n    }\n    synchronized (childAttrs) {\n        currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(0));\n    }\n\t\n    // 为 NioServerSocketChannel 添加初始化器\n    p.addLast(new ChannelInitializer<Channel>() {\n        @Override\n        public void initChannel(final Channel ch) throws Exception {\n            final ChannelPipeline pipeline = ch.pipeline();\n            ChannelHandler handler = config.handler();\n            if (handler != null) {\n                pipeline.addLast(handler);\n            }\n\n            // 初始化器的职责是将 ServerBootstrapAcceptor 加入至 NioServerSocketChannel\n            ch.eventLoop().execute(new Runnable() {\n                @Override\n                public void run() {\n                    pipeline.addLast(new ServerBootstrapAcceptor(\n                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));\n                }\n            });\n        }\n    });\n}\n```\n\n关键代码 `io.netty.channel.AbstractChannel.AbstractUnsafe#register`\n\n```java\npublic final void register(EventLoop eventLoop, final ChannelPromise promise) {\n    // 一些检查，略...\n\n    AbstractChannel.this.eventLoop = eventLoop;\n\n    if (eventLoop.inEventLoop()) {\n        register0(promise);\n    } else {\n        try {\n            // 首次执行 execute 方法时，会启动 nio 线程，之后注册等操作在 nio 线程上执行\n            // 因为只有一个 NioServerSocketChannel 因此，也只会有一个 boss nio 线程\n            // 这行代码完成的事实是 main -> nio boss 线程的切换\n            eventLoop.execute(new Runnable() {\n                @Override\n                public void run() {\n                    register0(promise);\n                }\n            });\n        } catch (Throwable t) {\n            // 日志记录...\n            closeForcibly();\n            closeFuture.setClosed();\n            safeSetFailure(promise, t);\n        }\n    }\n}\n```\n\n\n\n`io.netty.channel.AbstractChannel.AbstractUnsafe#register0`\n\n```java\nprivate void register0(ChannelPromise promise) {\n    try {\n        if (!promise.setUncancellable() || !ensureOpen(promise)) {\n            return;\n        }\n        boolean firstRegistration = neverRegistered;\n        // 1.2.1 原生的 nio channel 绑定到 selector 上，注意此时没有注册 selector 关注事件，附件为 NioServerSocketChannel\n        doRegister();\n        neverRegistered = false;\n        registered = true;\n\n        // 1.2.2 执行 NioServerSocketChannel 初始化器的 initChannel\n        pipeline.invokeHandlerAddedIfNeeded();\n\n        // 回调 3.2 io.netty.bootstrap.AbstractBootstrap#doBind0\n        safeSetSuccess(promise);\n        pipeline.fireChannelRegistered();\n        \n        // 对应 server socket channel 还未绑定，isActive 为 false\n        if (isActive()) {\n            if (firstRegistration) {\n                pipeline.fireChannelActive();\n            } else if (config().isAutoRead()) {\n                beginRead();\n            }\n        }\n    } catch (Throwable t) {\n        // Close the channel directly to avoid FD leak.\n        closeForcibly();\n        closeFuture.setClosed();\n        safeSetFailure(promise, t);\n    }\n}\n```\n\n关键代码 `io.netty.channel.ChannelInitializer#initChannel`\n\n```java\nprivate boolean initChannel(ChannelHandlerContext ctx) throws Exception {\n    if (initMap.add(ctx)) { // Guard against re-entrance.\n        try {\n            // 1.2.2.1 执行初始化\n            initChannel((C) ctx.channel());\n        } catch (Throwable cause) {\n            exceptionCaught(ctx, cause);\n        } finally {\n            // 1.2.2.2 移除初始化器\n            ChannelPipeline pipeline = ctx.pipeline();\n            if (pipeline.context(this) != null) {\n                pipeline.remove(this);\n            }\n        }\n        return true;\n    }\n    return false;\n}\n```\n\n关键代码 `io.netty.bootstrap.AbstractBootstrap#doBind0`\n\n```java\n// 3.1 或 3.2 执行 doBind0\nprivate static void doBind0(\n        final ChannelFuture regFuture, final Channel channel,\n        final SocketAddress localAddress, final ChannelPromise promise) {\n\n    channel.eventLoop().execute(new Runnable() {\n        @Override\n        public void run() {\n            if (regFuture.isSuccess()) {\n                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);\n            } else {\n                promise.setFailure(regFuture.cause());\n            }\n        }\n    });\n}\n```\n\n关键代码 `io.netty.channel.AbstractChannel.AbstractUnsafe#bind`\n\n```java\npublic final void bind(final SocketAddress localAddress, final ChannelPromise promise) {\n    assertEventLoop();\n\n    if (!promise.setUncancellable() || !ensureOpen(promise)) {\n        return;\n    }\n\n    if (Boolean.TRUE.equals(config().getOption(ChannelOption.SO_BROADCAST)) &&\n        localAddress instanceof InetSocketAddress &&\n        !((InetSocketAddress) localAddress).getAddress().isAnyLocalAddress() &&\n        !PlatformDependent.isWindows() && !PlatformDependent.maybeSuperUser()) {\n        // 记录日志...\n    }\n\n    boolean wasActive = isActive();\n    try {\n        // 3.3 执行端口绑定\n        doBind(localAddress);\n    } catch (Throwable t) {\n        safeSetFailure(promise, t);\n        closeIfClosed();\n        return;\n    }\n\n    if (!wasActive && isActive()) {\n        invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                // 3.4 触发 active 事件\n                pipeline.fireChannelActive();\n            }\n        });\n    }\n\n    safeSetSuccess(promise);\n}\n```\n\n3.3 关键代码 `io.netty.channel.socket.nio.NioServerSocketChannel#doBind`\n\n```java\nprotected void doBind(SocketAddress localAddress) throws Exception {\n    if (PlatformDependent.javaVersion() >= 7) {\n        javaChannel().bind(localAddress, config.getBacklog());\n    } else {\n        javaChannel().socket().bind(localAddress, config.getBacklog());\n    }\n}\n```\n\n3.4 关键代码 `io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive`\n\n```java\npublic void channelActive(ChannelHandlerContext ctx) {\n    ctx.fireChannelActive();\n\t// 触发 read (NioServerSocketChannel 上的 read 不是读取数据，只是为了触发 channel 的事件注册)\n    readIfIsAutoRead();\n}\n```\n\n关键代码 `io.netty.channel.nio.AbstractNioChannel#doBeginRead`\n\n```java\nprotected void doBeginRead() throws Exception {\n    // Channel.read() or ChannelHandlerContext.read() was called\n    final SelectionKey selectionKey = this.selectionKey;\n    if (!selectionKey.isValid()) {\n        return;\n    }\n\n    readPending = true;\n\n    final int interestOps = selectionKey.interestOps();\n    // readInterestOp 取值是 16，在 NioServerSocketChannel 创建时初始化好，代表关注 accept 事件\n    if ((interestOps & readInterestOp) == 0) {\n        selectionKey.interestOps(interestOps | readInterestOp);\n    }\n}\n```\n\n\n\n### 2.2 NioEventLoop 剖析\n\nNioEventLoop 线程不仅要处理 IO 事件，还要处理 Task（包括普通任务和定时任务），\n\n提交任务代码 `io.netty.util.concurrent.SingleThreadEventExecutor#execute`\n\n```java\npublic void execute(Runnable task) {\n    if (task == null) {\n        throw new NullPointerException(\"task\");\n    }\n\n    boolean inEventLoop = inEventLoop();\n    // 添加任务，其中队列使用了 jctools 提供的 mpsc 无锁队列\n    addTask(task);\n    if (!inEventLoop) {\n        // inEventLoop 如果为 false 表示由其它线程来调用 execute，即首次调用，这时需要向 eventLoop 提交首个任务，启动死循环，会执行到下面的 doStartThread\n        startThread();\n        if (isShutdown()) {\n            // 如果已经 shutdown，做拒绝逻辑，代码略...\n        }\n    }\n\n    if (!addTaskWakesUp && wakesUpForTask(task)) {\n        // 如果线程由于 IO select 阻塞了，添加的任务的线程需要负责唤醒 NioEventLoop 线程\n        wakeup(inEventLoop);\n    }\n}\n```\n\n\n\n唤醒 select 阻塞线程`io.netty.channel.nio.NioEventLoop#wakeup`\n\n```java\n@Override\nprotected void wakeup(boolean inEventLoop) {\n    if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n        selector.wakeup();\n    }\n}\n```\n\n\n\n启动 EventLoop 主循环 `io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread`\n\n```java\nprivate void doStartThread() {\n    assert thread == null;\n    executor.execute(new Runnable() {\n        @Override\n        public void run() {\n            // 将线程池的当前线程保存在成员变量中，以便后续使用\n            thread = Thread.currentThread();\n            if (interrupted) {\n                thread.interrupt();\n            }\n\n            boolean success = false;\n            updateLastExecutionTime();\n            try {\n                // 调用外部类 SingleThreadEventExecutor 的 run 方法，进入死循环，run 方法见下\n                SingleThreadEventExecutor.this.run();\n                success = true;\n            } catch (Throwable t) {\n                logger.warn(\"Unexpected exception from an event executor: \", t);\n            } finally {\n\t\t\t\t// 清理工作，代码略...\n            }\n        }\n    });\n}\n```\n\n\n\n`io.netty.channel.nio.NioEventLoop#run` 主要任务是执行死循环，不断看有没有新任务，有没有 IO 事件\n\n```java\nprotected void run() {\n    for (;;) {\n        try {\n            try {\n                // calculateStrategy 的逻辑如下：\n                // 有任务，会执行一次 selectNow，清除上一次的 wakeup 结果，无论有没有 IO 事件，都会跳过 switch\n                // 没有任务，会匹配 SelectStrategy.SELECT，看是否应当阻塞\n                switch (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) {\n                    case SelectStrategy.CONTINUE:\n                        continue;\n\n                    case SelectStrategy.BUSY_WAIT:\n\n                    case SelectStrategy.SELECT:\n                        // 因为 IO 线程和提交任务线程都有可能执行 wakeup，而 wakeup 属于比较昂贵的操作，因此使用了一个原子布尔对象 wakenUp，它取值为 true 时，表示该由当前线程唤醒\n                        // 进行 select 阻塞，并设置唤醒状态为 false\n                        boolean oldWakenUp = wakenUp.getAndSet(false);\n                        \n                        // 如果在这个位置，非 EventLoop 线程抢先将 wakenUp 置为 true，并 wakeup\n                        // 下面的 select 方法不会阻塞\n                        // 等 runAllTasks 处理完成后，到再循环进来这个阶段新增的任务会不会及时执行呢?\n                        // 因为 oldWakenUp 为 true，因此下面的 select 方法就会阻塞，直到超时\n                        // 才能执行，让 select 方法无谓阻塞\n                        select(oldWakenUp);\n\n                        if (wakenUp.get()) {\n                            selector.wakeup();\n                        }\n                    default:\n                }\n            } catch (IOException e) {\n                rebuildSelector0();\n                handleLoopException(e);\n                continue;\n            }\n\n            cancelledKeys = 0;\n            needsToSelectAgain = false;\n            // ioRatio 默认是 50\n            final int ioRatio = this.ioRatio;\n            if (ioRatio == 100) {\n                try {\n                    processSelectedKeys();\n                } finally {\n                    // ioRatio 为 100 时，总是运行完所有非 IO 任务\n                    runAllTasks();\n                }\n            } else {                \n                final long ioStartTime = System.nanoTime();\n                try {\n                    processSelectedKeys();\n                } finally {\n                    // 记录 io 事件处理耗时\n                    final long ioTime = System.nanoTime() - ioStartTime;\n                    // 运行非 IO 任务，一旦超时会退出 runAllTasks\n                    runAllTasks(ioTime * (100 - ioRatio) / ioRatio);\n                }\n            }\n        } catch (Throwable t) {\n            handleLoopException(t);\n        }\n        try {\n            if (isShuttingDown()) {\n                closeAll();\n                if (confirmShutdown()) {\n                    return;\n                }\n            }\n        } catch (Throwable t) {\n            handleLoopException(t);\n        }\n    }\n}\n```\n\n\n\n#### ⚠️ 注意\n\n> 这里有个费解的地方就是 wakeup，它既可以由提交任务的线程来调用（比较好理解），也可以由 EventLoop 线程来调用（比较费解），这里要知道 wakeup 方法的效果：\n>\n> * 由非 EventLoop 线程调用，会唤醒当前在执行 select 阻塞的 EventLoop 线程\n> * 由 EventLoop 自己调用，会本次的 wakeup 会取消下一次的 select 操作\n\n\n\n参考下图\n\n<img src=\"img/0032.png\"  />\n\n\n\n`io.netty.channel.nio.NioEventLoop#select`\n\n```java\nprivate void select(boolean oldWakenUp) throws IOException {\n    Selector selector = this.selector;\n    try {\n        int selectCnt = 0;\n        long currentTimeNanos = System.nanoTime();\n        // 计算等待时间\n        // * 没有 scheduledTask，超时时间为 1s\n        // * 有 scheduledTask，超时时间为 `下一个定时任务执行时间 - 当前时间`\n        long selectDeadLineNanos = currentTimeNanos + delayNanos(currentTimeNanos);\n\n        for (;;) {\n            long timeoutMillis = (selectDeadLineNanos - currentTimeNanos + 500000L) / 1000000L;\n            // 如果超时，退出循环\n            if (timeoutMillis <= 0) {\n                if (selectCnt == 0) {\n                    selector.selectNow();\n                    selectCnt = 1;\n                }\n                break;\n            }\n\n            // 如果期间又有 task 退出循环，如果没这个判断，那么任务就会等到下次 select 超时时才能被执行\n            // wakenUp.compareAndSet(false, true) 是让非 NioEventLoop 不必再执行 wakeup\n            if (hasTasks() && wakenUp.compareAndSet(false, true)) {\n                selector.selectNow();\n                selectCnt = 1;\n                break;\n            }\n\n            // select 有限时阻塞\n            // 注意 nio 有 bug，当 bug 出现时，select 方法即使没有时间发生，也不会阻塞住，导致不断空轮询，cpu 占用 100%\n            int selectedKeys = selector.select(timeoutMillis);\n            // 计数加 1\n            selectCnt ++;\n\n            // 醒来后，如果有 IO 事件、或是由非 EventLoop 线程唤醒，或者有任务，退出循环\n            if (selectedKeys != 0 || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) {\n                break;\n            }\n            if (Thread.interrupted()) {\n               \t// 线程被打断，退出循环\n                // 记录日志\n                selectCnt = 1;\n                break;\n            }\n\n            long time = System.nanoTime();\n            if (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) >= currentTimeNanos) {\n                // 如果超时，计数重置为 1，下次循环就会 break\n                selectCnt = 1;\n            } \n            // 计数超过阈值，由 io.netty.selectorAutoRebuildThreshold 指定，默认 512\n            // 这是为了解决 nio 空轮询 bug\n            else if (SELECTOR_AUTO_REBUILD_THRESHOLD > 0 &&\n                    selectCnt >= SELECTOR_AUTO_REBUILD_THRESHOLD) {\n                // 重建 selector\n                selector = selectRebuildSelector(selectCnt);\n                selectCnt = 1;\n                break;\n            }\n\n            currentTimeNanos = time;\n        }\n\n        if (selectCnt > MIN_PREMATURE_SELECTOR_RETURNS) {\n            // 记录日志\n        }\n    } catch (CancelledKeyException e) {\n        // 记录日志\n    }\n}\n```\n\n\n\n处理 keys `io.netty.channel.nio.NioEventLoop#processSelectedKeys`\n\n```java\nprivate void processSelectedKeys() {\n    if (selectedKeys != null) {\n        // 通过反射将 Selector 实现类中的就绪事件集合替换为 SelectedSelectionKeySet \n        // SelectedSelectionKeySet 底层为数组实现，可以提高遍历性能（原本为 HashSet）\n        processSelectedKeysOptimized();\n    } else {\n        processSelectedKeysPlain(selector.selectedKeys());\n    }\n}\n```\n\n\n\n`io.netty.channel.nio.NioEventLoop#processSelectedKey`\n\n```java\nprivate void processSelectedKey(SelectionKey k, AbstractNioChannel ch) {\n    final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();\n    // 当 key 取消或关闭时会导致这个 key 无效\n    if (!k.isValid()) {\n        // 无效时处理...\n        return;\n    }\n\n    try {\n        int readyOps = k.readyOps();\n        // 连接事件\n        if ((readyOps & SelectionKey.OP_CONNECT) != 0) {\n            int ops = k.interestOps();\n            ops &= ~SelectionKey.OP_CONNECT;\n            k.interestOps(ops);\n\n            unsafe.finishConnect();\n        }\n\n        // 可写事件\n        if ((readyOps & SelectionKey.OP_WRITE) != 0) {\n            ch.unsafe().forceFlush();\n        }\n\n        // 可读或可接入事件\n        if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n            // 如果是可接入 io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read\n            // 如果是可读 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read\n            unsafe.read();\n        }\n    } catch (CancelledKeyException ignored) {\n        unsafe.close(unsafe.voidPromise());\n    }\n}\n```\n\n\n\n### 2.3 accept 剖析\n\nnio 中如下代码，在 netty 中的流程\n\n```java\n//1 阻塞直到事件发生\nselector.select();\n\nIterator<SelectionKey> iter = selector.selectedKeys().iterator();\nwhile (iter.hasNext()) {    \n    //2 拿到一个事件\n    SelectionKey key = iter.next();\n    \n    //3 如果是 accept 事件\n    if (key.isAcceptable()) {\n        \n        //4 执行 accept\n        SocketChannel channel = serverSocketChannel.accept();\n        channel.configureBlocking(false);\n        \n        //5 关注 read 事件\n        channel.register(selector, SelectionKey.OP_READ);\n    }\n    // ...\n}\n```\n\n\n\n\n\n\n\n先来看可接入事件处理（accept）\n\n`io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read`\n\n```java\npublic void read() {\n    assert eventLoop().inEventLoop();\n    final ChannelConfig config = config();\n    final ChannelPipeline pipeline = pipeline();    \n    final RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();\n    allocHandle.reset(config);\n\n    boolean closed = false;\n    Throwable exception = null;\n    try {\n        try {\n            do {\n\t\t\t\t// doReadMessages 中执行了 accept 并创建 NioSocketChannel 作为消息放入 readBuf\n                // readBuf 是一个 ArrayList 用来缓存消息\n                int localRead = doReadMessages(readBuf);\n                if (localRead == 0) {\n                    break;\n                }\n                if (localRead < 0) {\n                    closed = true;\n                    break;\n                }\n\t\t\t\t// localRead 为 1，就一条消息，即接收一个客户端连接\n                allocHandle.incMessagesRead(localRead);\n            } while (allocHandle.continueReading());\n        } catch (Throwable t) {\n            exception = t;\n        }\n\n        int size = readBuf.size();\n        for (int i = 0; i < size; i ++) {\n            readPending = false;\n            // 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理\n            // io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead\n            pipeline.fireChannelRead(readBuf.get(i));\n        }\n        readBuf.clear();\n        allocHandle.readComplete();\n        pipeline.fireChannelReadComplete();\n\n        if (exception != null) {\n            closed = closeOnReadError(exception);\n\n            pipeline.fireExceptionCaught(exception);\n        }\n\n        if (closed) {\n            inputShutdown = true;\n            if (isOpen()) {\n                close(voidPromise());\n            }\n        }\n    } finally {\n        if (!readPending && !config.isAutoRead()) {\n            removeReadOp();\n        }\n    }\n}\n```\n\n\n\n关键代码 `io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead`\n\n```java\npublic void channelRead(ChannelHandlerContext ctx, Object msg) {\n    // 这时的 msg 是 NioSocketChannel\n    final Channel child = (Channel) msg;\n\n    // NioSocketChannel 添加  childHandler 即初始化器\n    child.pipeline().addLast(childHandler);\n\n    // 设置选项\n    setChannelOptions(child, childOptions, logger);\n\n    for (Entry<AttributeKey<?>, Object> e: childAttrs) {\n        child.attr((AttributeKey<Object>) e.getKey()).set(e.getValue());\n    }\n\n    try {\n        // 注册 NioSocketChannel 到 nio worker 线程，接下来的处理也移交至 nio worker 线程\n        childGroup.register(child).addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                if (!future.isSuccess()) {\n                    forceClose(child, future.cause());\n                }\n            }\n        });\n    } catch (Throwable t) {\n        forceClose(child, t);\n    }\n}\n```\n\n\n\n又回到了熟悉的 `io.netty.channel.AbstractChannel.AbstractUnsafe#register`  方法\n\n```java\npublic final void register(EventLoop eventLoop, final ChannelPromise promise) {\n    // 一些检查，略...\n\n    AbstractChannel.this.eventLoop = eventLoop;\n\n    if (eventLoop.inEventLoop()) {\n        register0(promise);\n    } else {\n        try {\n            // 这行代码完成的事实是 nio boss -> nio worker 线程的切换\n            eventLoop.execute(new Runnable() {\n                @Override\n                public void run() {\n                    register0(promise);\n                }\n            });\n        } catch (Throwable t) {\n            // 日志记录...\n            closeForcibly();\n            closeFuture.setClosed();\n            safeSetFailure(promise, t);\n        }\n    }\n}\n```\n\n`io.netty.channel.AbstractChannel.AbstractUnsafe#register0`\n\n```java\nprivate void register0(ChannelPromise promise) {\n    try {\n        if (!promise.setUncancellable() || !ensureOpen(promise)) {\n            return;\n        }\n        boolean firstRegistration = neverRegistered;\n        doRegister();\n        neverRegistered = false;\n        registered = true;\n\t\t\n        // 执行初始化器，执行前 pipeline 中只有 head -> 初始化器 -> tail\n        pipeline.invokeHandlerAddedIfNeeded();\n        // 执行后就是 head -> logging handler -> my handler -> tail\n\n        safeSetSuccess(promise);\n        pipeline.fireChannelRegistered();\n        \n        if (isActive()) {\n            if (firstRegistration) {\n                // 触发 pipeline 上 active 事件\n                pipeline.fireChannelActive();\n            } else if (config().isAutoRead()) {\n                beginRead();\n            }\n        }\n    } catch (Throwable t) {\n        closeForcibly();\n        closeFuture.setClosed();\n        safeSetFailure(promise, t);\n    }\n}\n```\n\n\n\n回到了熟悉的代码 `io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive`\n\n```java\npublic void channelActive(ChannelHandlerContext ctx) {\n    ctx.fireChannelActive();\n\t// 触发 read (NioSocketChannel 这里 read，只是为了触发 channel 的事件注册，还未涉及数据读取)\n    readIfIsAutoRead();\n}\n```\n\n`io.netty.channel.nio.AbstractNioChannel#doBeginRead`\n\n```java\nprotected void doBeginRead() throws Exception {\n    // Channel.read() or ChannelHandlerContext.read() was called\n    final SelectionKey selectionKey = this.selectionKey;\n    if (!selectionKey.isValid()) {\n        return;\n    }\n\n    readPending = true;\n\t// 这时候 interestOps 是 0\n    final int interestOps = selectionKey.interestOps();\n    if ((interestOps & readInterestOp) == 0) {\n        // 关注 read 事件\n        selectionKey.interestOps(interestOps | readInterestOp);\n    }\n}\n```\n\n\n\n### 2.4 read 剖析\n\n再来看可读事件 `io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read`，注意发送的数据未必能够一次读完，因此会触发多次 nio read 事件，一次事件内会触发多次 pipeline read，一次事件会触发一次 pipeline read complete\n\n```java\npublic final void read() {\n    final ChannelConfig config = config();\n    if (shouldBreakReadReady(config)) {\n        clearReadPending();\n        return;\n    }\n    final ChannelPipeline pipeline = pipeline();\n    // io.netty.allocator.type 决定 allocator 的实现\n    final ByteBufAllocator allocator = config.getAllocator();\n    // 用来分配 byteBuf，确定单次读取大小\n    final RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();\n    allocHandle.reset(config);\n\n    ByteBuf byteBuf = null;\n    boolean close = false;\n    try {\n        do {\n            byteBuf = allocHandle.allocate(allocator);\n            // 读取\n            allocHandle.lastBytesRead(doReadBytes(byteBuf));\n            if (allocHandle.lastBytesRead() <= 0) {\n                byteBuf.release();\n                byteBuf = null;\n                close = allocHandle.lastBytesRead() < 0;\n                if (close) {\n                    readPending = false;\n                }\n                break;\n            }\n\n            allocHandle.incMessagesRead(1);\n            readPending = false;\n            // 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理 NioSocketChannel 上的 handler\n            pipeline.fireChannelRead(byteBuf);\n            byteBuf = null;\n        } \n        // 是否要继续循环\n        while (allocHandle.continueReading());\n\n        allocHandle.readComplete();\n        // 触发 read complete 事件\n        pipeline.fireChannelReadComplete();\n\n        if (close) {\n            closeOnRead(pipeline);\n        }\n    } catch (Throwable t) {\n        handleReadException(pipeline, byteBuf, t, close, allocHandle);\n    } finally {\n        if (!readPending && !config.isAutoRead()) {\n            removeReadOp();\n        }\n    }\n}\n```\n\n\n\n`io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle#continueReading(io.netty.util.UncheckedBooleanSupplier)`\n\n```java\npublic boolean continueReading(UncheckedBooleanSupplier maybeMoreDataSupplier) {\n    return \n           // 一般为 true\n           config.isAutoRead() &&\n           // respectMaybeMoreData 默认为 true\n           // maybeMoreDataSupplier 的逻辑是如果预期读取字节与实际读取字节相等，返回 true\n           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &&\n           // 小于最大次数，maxMessagePerRead 默认 16\n           totalMessages < maxMessagePerRead &&\n           // 实际读到了数据\n           totalBytesRead > 0;\n}\n```\n\n\n\n\n","slug":"Netty04-优化与源码","published":1,"updated":"2023-05-06T13:28:02.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clher6xwn000yocwe718i7ulq","content":"<p>该笔记是B站黑马的Netty视频的配套笔记4。</p>\n<span id=\"more\"></span>\n<h1 id=\"四-优化与源码\"><a href=\"#四-优化与源码\" class=\"headerlink\" title=\"四. 优化与源码\"></a>四. 优化与源码</h1><h2 id=\"1-优化\"><a href=\"#1-优化\" class=\"headerlink\" title=\"1. 优化\"></a>1. 优化</h2><h3 id=\"1-1-扩展序列化算法\"><a href=\"#1-1-扩展序列化算法\" class=\"headerlink\" title=\"1.1 扩展序列化算法\"></a>1.1 扩展序列化算法</h3><p>序列化，反序列化主要用在消息正文的转换上</p>\n<ul>\n<li>序列化时，需要将 Java 对象变为要传输的数据（可以是 byte[]，或 json 等，最终都需要变成 byte[]）</li>\n<li>反序列化时，需要将传入的正文数据还原成 Java 对象，便于处理</li>\n</ul>\n<p>目前的代码仅支持 Java 自带的序列化，反序列化机制，核心代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 反序列化</span><br><span class=\"hljs-type\">byte</span>[] body = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[bodyLength];<br>byteByf.readBytes(body);<br><span class=\"hljs-type\">ObjectInputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(body));<br><span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> (Message) in.readObject();<br>message.setSequenceId(sequenceId);<br><br><span class=\"hljs-comment\">// 序列化</span><br><span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectOutputStream</span>(out).writeObject(message);<br><span class=\"hljs-type\">byte</span>[] bytes = out.toByteArray();<br></code></pre></td></tr></table></figure>\n\n<p>为了支持更多序列化算法，抽象一个 Serializer 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Serializer</span> &#123;<br><br>    <span class=\"hljs-comment\">// 反序列化方法</span><br>    &lt;T&gt; T <span class=\"hljs-title function_\">deserialize</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz, <span class=\"hljs-type\">byte</span>[] bytes)</span>;<br><br>    <span class=\"hljs-comment\">// 序列化方法</span><br>    &lt;T&gt; <span class=\"hljs-type\">byte</span>[] serialize(T object);<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>提供两个实现，我这里直接将实现加入了枚举类 Serializer.Algorithm 中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">SerializerAlgorithm</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializer</span> &#123;<br>\t<span class=\"hljs-comment\">// Java 实现</span><br>    Java &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> &lt;T&gt; T <span class=\"hljs-title function_\">deserialize</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz, <span class=\"hljs-type\">byte</span>[] bytes)</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">ObjectInputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <br>                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(bytes));<br>                <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">object</span> <span class=\"hljs-operator\">=</span> in.readObject();<br>                <span class=\"hljs-keyword\">return</span> (T) object;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException | ClassNotFoundException e) &#123;<br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;SerializerAlgorithm.Java 反序列化错误&quot;</span>, e);<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-type\">byte</span>[] serialize(T object) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectOutputStream</span>(out).writeObject(object);<br>                <span class=\"hljs-keyword\">return</span> out.toByteArray();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;SerializerAlgorithm.Java 序列化错误&quot;</span>, e);<br>            &#125;<br>        &#125;<br>    &#125;, <br>    <span class=\"hljs-comment\">// Json 实现(引入了 Gson 依赖)</span><br>    Json &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> &lt;T&gt; T <span class=\"hljs-title function_\">deserialize</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz, <span class=\"hljs-type\">byte</span>[] bytes)</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>().fromJson(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(bytes, StandardCharsets.UTF_8), clazz);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-type\">byte</span>[] serialize(T object) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>().toJson(object).getBytes(StandardCharsets.UTF_8);<br>        &#125;<br>    &#125;;<br><br>    <span class=\"hljs-comment\">// 需要从协议的字节中得到是哪种序列化算法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> SerializerAlgorithm <span class=\"hljs-title function_\">getByInt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> type)</span> &#123;<br>        SerializerAlgorithm[] array = SerializerAlgorithm.values();<br>        <span class=\"hljs-keyword\">if</span> (type &lt; <span class=\"hljs-number\">0</span> || type &gt; array.length - <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;超过 SerializerAlgorithm 范围&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> array[type];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>增加配置类和配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Config</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> Properties properties;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> Config.class.getResourceAsStream(<span class=\"hljs-string\">&quot;/application.properties&quot;</span>)) &#123;<br>            properties = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Properties</span>();<br>            properties.load(in);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionInInitializerError</span>(e);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getServerPort</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> properties.getProperty(<span class=\"hljs-string\">&quot;server.port&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span>(value == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">8080</span>;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> Integer.parseInt(value);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Serializer.Algorithm <span class=\"hljs-title function_\">getSerializerAlgorithm</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> properties.getProperty(<span class=\"hljs-string\">&quot;serializer.algorithm&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span>(value == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> Serializer.Algorithm.Java;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> Serializer.Algorithm.valueOf(value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">serializer.algorithm</span>=<span class=\"hljs-string\">Json</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>修改编解码器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MessageCodecSharable</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MessageToMessageCodec</span>&lt;ByteBuf, Message&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">encode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Message msg, List&lt;Object&gt; outList)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>        <span class=\"hljs-comment\">// 1. 4 字节的魔数</span><br>        out.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>        <span class=\"hljs-comment\">// 2. 1 字节的版本,</span><br>        out.writeByte(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-comment\">// 3. 1 字节的序列化方式 jdk 0 , json 1</span><br>        out.writeByte(Config.getSerializerAlgorithm().ordinal());<br>        <span class=\"hljs-comment\">// 4. 1 字节的指令类型</span><br>        out.writeByte(msg.getMessageType());<br>        <span class=\"hljs-comment\">// 5. 4 个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class=\"hljs-comment\">// 无意义，对齐填充</span><br>        out.writeByte(<span class=\"hljs-number\">0xff</span>);<br>        <span class=\"hljs-comment\">// 6. 获取内容的字节数组</span><br>        <span class=\"hljs-type\">byte</span>[] bytes = Config.getSerializerAlgorithm().serialize(msg);<br>        <span class=\"hljs-comment\">// 7. 长度</span><br>        out.writeInt(bytes.length);<br>        <span class=\"hljs-comment\">// 8. 写入内容</span><br>        out.writeBytes(bytes);<br>        outList.add(out);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">magicNum</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">version</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">serializerAlgorithm</span> <span class=\"hljs-operator\">=</span> in.readByte(); <span class=\"hljs-comment\">// 0 或 1</span><br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">messageType</span> <span class=\"hljs-operator\">=</span> in.readByte(); <span class=\"hljs-comment\">// 0,1,2...</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sequenceId</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[length];<br>        in.readBytes(bytes, <span class=\"hljs-number\">0</span>, length);<br><br>        <span class=\"hljs-comment\">// 找到反序列化算法</span><br>        Serializer.<span class=\"hljs-type\">Algorithm</span> <span class=\"hljs-variable\">algorithm</span> <span class=\"hljs-operator\">=</span> Serializer.Algorithm.values()[serializerAlgorithm];<br>        <span class=\"hljs-comment\">// 确定具体消息类型</span><br>        Class&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span>&gt; messageClass = Message.getMessageClass(messageType);<br>        <span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> algorithm.deserialize(messageClass, bytes);<br><span class=\"hljs-comment\">//        log.debug(&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;, magicNum, version, serializerType, messageType, sequenceId, length);</span><br><span class=\"hljs-comment\">//        log.debug(&quot;&#123;&#125;&quot;, message);</span><br>        out.add(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>其中确定具体消息类型，可以根据 <code>消息类型字节</code> 获取到对应的 <code>消息 class</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Message</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 根据消息类型字节，获得对应的消息 class</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> messageType 消息类型字节</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 消息 class</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Class&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span>&gt; getMessageClass(<span class=\"hljs-type\">int</span> messageType) &#123;<br>        <span class=\"hljs-keyword\">return</span> messageClasses.get(messageType);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> sequenceId;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> messageType;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMessageType</span><span class=\"hljs-params\">()</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">LoginRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">LoginResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ChatRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ChatResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupCreateRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupCreateResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupJoinRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupJoinResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">7</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupQuitRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">8</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupQuitResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">9</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupChatRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupChatResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">11</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupMembersRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">12</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupMembersResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">13</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">PingMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">14</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">PongMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">15</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Map&lt;Integer, Class&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span>&gt;&gt; messageClasses = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        messageClasses.put(LoginRequestMessage, LoginRequestMessage.class);<br>        messageClasses.put(LoginResponseMessage, LoginResponseMessage.class);<br>        messageClasses.put(ChatRequestMessage, ChatRequestMessage.class);<br>        messageClasses.put(ChatResponseMessage, ChatResponseMessage.class);<br>        messageClasses.put(GroupCreateRequestMessage, GroupCreateRequestMessage.class);<br>        messageClasses.put(GroupCreateResponseMessage, GroupCreateResponseMessage.class);<br>        messageClasses.put(GroupJoinRequestMessage, GroupJoinRequestMessage.class);<br>        messageClasses.put(GroupJoinResponseMessage, GroupJoinResponseMessage.class);<br>        messageClasses.put(GroupQuitRequestMessage, GroupQuitRequestMessage.class);<br>        messageClasses.put(GroupQuitResponseMessage, GroupQuitResponseMessage.class);<br>        messageClasses.put(GroupChatRequestMessage, GroupChatRequestMessage.class);<br>        messageClasses.put(GroupChatResponseMessage, GroupChatResponseMessage.class);<br>        messageClasses.put(GroupMembersRequestMessage, GroupMembersRequestMessage.class);<br>        messageClasses.put(GroupMembersResponseMessage, GroupMembersResponseMessage.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-参数调优\"><a href=\"#1-2-参数调优\" class=\"headerlink\" title=\"1.2 参数调优\"></a>1.2 参数调优</h3><h4 id=\"1）CONNECT-TIMEOUT-MILLIS\"><a href=\"#1）CONNECT-TIMEOUT-MILLIS\" class=\"headerlink\" title=\"1）CONNECT_TIMEOUT_MILLIS\"></a>1）CONNECT_TIMEOUT_MILLIS</h4><ul>\n<li><p>属于 SocketChannal 参数</p>\n</li>\n<li><p>用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 timeout 异常</p>\n</li>\n<li><p>SO_TIMEOUT 主要用在阻塞 IO，阻塞 IO 中 accept，read 等都是无限等待的，如果不希望永远阻塞，使用它调整超时时间</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestConnectionTimeout</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>                    .group(group)<br>                    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class=\"hljs-number\">300</span>)<br>                    .channel(NioSocketChannel.class)<br>                    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>());<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">future</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>);<br>            future.sync().channel().closeFuture().sync(); <span class=\"hljs-comment\">// 断点1</span><br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            log.debug(<span class=\"hljs-string\">&quot;timeout&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>另外源码部分 <code>io.netty.channel.nio.AbstractNioChannel.AbstractNioUnsafe#connect</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">connect</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">        <span class=\"hljs-keyword\">final</span> SocketAddress remoteAddress, <span class=\"hljs-keyword\">final</span> SocketAddress localAddress, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-comment\">// ...</span><br>    <span class=\"hljs-comment\">// Schedule connect timeout.</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">connectTimeoutMillis</span> <span class=\"hljs-operator\">=</span> config().getConnectTimeoutMillis();<br>    <span class=\"hljs-keyword\">if</span> (connectTimeoutMillis &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        connectTimeoutFuture = eventLoop().schedule(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;                <br>                <span class=\"hljs-type\">ChannelPromise</span> <span class=\"hljs-variable\">connectPromise</span> <span class=\"hljs-operator\">=</span> AbstractNioChannel.<span class=\"hljs-built_in\">this</span>.connectPromise;<br>                <span class=\"hljs-type\">ConnectTimeoutException</span> <span class=\"hljs-variable\">cause</span> <span class=\"hljs-operator\">=</span><br>                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConnectTimeoutException</span>(<span class=\"hljs-string\">&quot;connection timed out: &quot;</span> + remoteAddress); <span class=\"hljs-comment\">// 断点2</span><br>                <span class=\"hljs-keyword\">if</span> (connectPromise != <span class=\"hljs-literal\">null</span> &amp;&amp; connectPromise.tryFailure(cause)) &#123;<br>                    close(voidPromise());<br>                &#125;<br>            &#125;<br>        &#125;, connectTimeoutMillis, TimeUnit.MILLISECONDS);<br>    &#125;<br>\t<span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2）SO-BACKLOG\"><a href=\"#2）SO-BACKLOG\" class=\"headerlink\" title=\"2）SO_BACKLOG\"></a>2）SO_BACKLOG</h4><ul>\n<li>属于 ServerSocketChannal 参数</li>\n</ul>\n<pre><code class=\" mermaid\">sequenceDiagram\n\nparticipant c as client\nparticipant s as server\nparticipant sq as syns queue\nparticipant aq as accept queue\n\ns -&gt;&gt; s : bind()\ns -&gt;&gt; s : listen()\nc -&gt;&gt; c : connect()\nc -&gt;&gt; s : 1. SYN\nNote left of c : SYN_SEND\ns -&gt;&gt; sq : put\nNote right of s : SYN_RCVD\ns -&gt;&gt; c : 2. SYN + ACK\nNote left of c : ESTABLISHED\nc -&gt;&gt; s : 3. ACK\nsq -&gt;&gt; aq : put\nNote right of s : ESTABLISHED\naq --&gt;&gt; s : \ns -&gt;&gt; s : accept()\n</code></pre>\n\n<ol>\n<li>第一次握手，client 发送 SYN 到 server，状态修改为 SYN_SEND，server 收到，状态改变为 SYN_REVD，并将该请求放入 sync queue 队列</li>\n<li>第二次握手，server 回复 SYN + ACK 给 client，client 收到，状态改变为 ESTABLISHED，并发送 ACK 给 server</li>\n<li>第三次握手，server 收到 ACK，状态改变为 ESTABLISHED，将该请求从 sync queue 放入 accept queue</li>\n</ol>\n<p>其中</p>\n<ul>\n<li><p>在 linux 2.2 之前，backlog 大小包括了两个队列的大小，在 2.2 之后，分别用下面两个参数来控制</p>\n</li>\n<li><p>sync queue - 半连接队列</p>\n<ul>\n<li>大小通过 &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog 指定，在 <code>syncookies</code> 启用的情况下，逻辑上没有最大值限制，这个设置便被忽略</li>\n</ul>\n</li>\n<li><p>accept queue - 全连接队列</p>\n<ul>\n<li>其大小通过 &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn 指定，在使用 listen 函数时，内核会根据传入的 backlog 参数与系统参数，取二者的较小值</li>\n<li>如果 accpet queue 队列满了，server 将发送一个拒绝连接的错误信息到 client</li>\n</ul>\n</li>\n</ul>\n<p>netty 中</p>\n<p>可以通过  option(ChannelOption.SO_BACKLOG, 值) 来设置大小</p>\n<p>可以通过下面源码查看默认大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DefaultServerSocketChannelConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DefaultChannelConfig</span><br>                                              <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ServerSocketChannelConfig</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">backlog</span> <span class=\"hljs-operator\">=</span> NetUtil.SOMAXCONN;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>课堂调试关键断点为：<code>io.netty.channel.nio.NioEventLoop#processSelectedKey</code></p>\n<p>oio 中更容易说明，不用 debug 模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Server</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">ServerSocket</span> <span class=\"hljs-variable\">ss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerSocket</span>(<span class=\"hljs-number\">8888</span>, <span class=\"hljs-number\">2</span>);<br>        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">accept</span> <span class=\"hljs-operator\">=</span> ss.accept();<br>        System.out.println(accept);<br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端启动 4 个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Client</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>();<br>            System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()+<span class=\"hljs-string\">&quot; connecting...&quot;</span>);<br>            s.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8888</span>),<span class=\"hljs-number\">1000</span>);<br>            System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()+<span class=\"hljs-string\">&quot; connected...&quot;</span>);<br>            s.getOutputStream().write(<span class=\"hljs-number\">1</span>);<br>            System.in.read();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()+<span class=\"hljs-string\">&quot; connecting timeout...&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>第 1，2，3 个客户端都打印，但除了第一个处于 accpet 外，其它两个都处于 accept queue 中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Tue Apr <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">28</span> CST <span class=\"hljs-number\">2020</span> connecting...<br>Tue Apr <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">28</span> CST <span class=\"hljs-number\">2020</span> connected...<br></code></pre></td></tr></table></figure>\n\n<p>第 4 个客户端连接时</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">Tue</span> Apr <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">58</span> CST <span class=\"hljs-number\">2020</span> connecting...<br><span class=\"hljs-attribute\">Tue</span> Apr <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">59</span> CST <span class=\"hljs-number\">2020</span> connecting timeout...<br><span class=\"hljs-attribute\">java</span>.net.SocketTimeoutException: connect timed out<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"3）ulimit-n\"><a href=\"#3）ulimit-n\" class=\"headerlink\" title=\"3）ulimit -n\"></a>3）ulimit -n</h4><ul>\n<li>属于操作系统参数</li>\n</ul>\n<h4 id=\"4）TCP-NODELAY\"><a href=\"#4）TCP-NODELAY\" class=\"headerlink\" title=\"4）TCP_NODELAY\"></a>4）TCP_NODELAY</h4><ul>\n<li>属于 SocketChannal 参数</li>\n</ul>\n<h4 id=\"5）SO-SNDBUF-amp-SO-RCVBUF\"><a href=\"#5）SO-SNDBUF-amp-SO-RCVBUF\" class=\"headerlink\" title=\"5）SO_SNDBUF &amp; SO_RCVBUF\"></a>5）SO_SNDBUF &amp; SO_RCVBUF</h4><ul>\n<li>SO_SNDBUF 属于 SocketChannal 参数</li>\n<li>SO_RCVBUF 既可用于 SocketChannal 参数，也可以用于 ServerSocketChannal 参数（建议设置到 ServerSocketChannal 上）</li>\n</ul>\n<h4 id=\"6）ALLOCATOR\"><a href=\"#6）ALLOCATOR\" class=\"headerlink\" title=\"6）ALLOCATOR\"></a>6）ALLOCATOR</h4><ul>\n<li>属于 SocketChannal 参数</li>\n<li>用来分配 ByteBuf， ctx.alloc()</li>\n</ul>\n<h4 id=\"7）RCVBUF-ALLOCATOR\"><a href=\"#7）RCVBUF-ALLOCATOR\" class=\"headerlink\" title=\"7）RCVBUF_ALLOCATOR\"></a>7）RCVBUF_ALLOCATOR</h4><ul>\n<li>属于 SocketChannal 参数</li>\n<li>控制 netty 接收缓冲区大小</li>\n<li>负责入站数据的分配，决定入站缓冲区的大小（并可动态调整），统一采用 direct 直接内存，具体池化还是非池化由 allocator 决定</li>\n</ul>\n<h3 id=\"1-3-RPC-框架\"><a href=\"#1-3-RPC-框架\" class=\"headerlink\" title=\"1.3 RPC 框架\"></a>1.3 RPC 框架</h3><h4 id=\"1）准备工作\"><a href=\"#1）准备工作\" class=\"headerlink\" title=\"1）准备工作\"></a>1）准备工作</h4><p>这些代码可以认为是现成的，无需从头编写练习</p>\n<p>为了简化起见，在原来聊天项目的基础上新增 Rpc 请求和响应消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Message</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br><br>    <span class=\"hljs-comment\">// 省略旧的代码</span><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">RPC_MESSAGE_TYPE_REQUEST</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">101</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span>  <span class=\"hljs-variable\">RPC_MESSAGE_TYPE_RESPONSE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">102</span>;<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>        messageClasses.put(RPC_MESSAGE_TYPE_REQUEST, RpcRequestMessage.class);<br>        messageClasses.put(RPC_MESSAGE_TYPE_RESPONSE, RpcResponseMessage.class);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>请求消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@ToString(callSuper = true)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcRequestMessage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 调用的接口全限定名，服务端根据它找到实现</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> String interfaceName;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 调用接口中的方法名</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> String methodName;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 方法返回类型</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Class&lt;?&gt; returnType;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 方法参数类型数组</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Class[] parameterTypes;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 方法参数值数组</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Object[] parameterValue;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">RpcRequestMessage</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sequenceId, String interfaceName, String methodName, Class&lt;?&gt; returnType, Class[] parameterTypes, Object[] parameterValue)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>.setSequenceId(sequenceId);<br>        <span class=\"hljs-built_in\">this</span>.interfaceName = interfaceName;<br>        <span class=\"hljs-built_in\">this</span>.methodName = methodName;<br>        <span class=\"hljs-built_in\">this</span>.returnType = returnType;<br>        <span class=\"hljs-built_in\">this</span>.parameterTypes = parameterTypes;<br>        <span class=\"hljs-built_in\">this</span>.parameterValue = parameterValue;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMessageType</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> RPC_MESSAGE_TYPE_REQUEST;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>响应消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@ToString(callSuper = true)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcResponseMessage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Object returnValue;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Exception exceptionValue;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMessageType</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> RPC_MESSAGE_TYPE_RESPONSE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>服务器架子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">boss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <br>        <span class=\"hljs-comment\">// rpc 请求消息处理器，待实现</span><br>        <span class=\"hljs-type\">RpcRequestMessageHandler</span> <span class=\"hljs-variable\">RPC_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcRequestMessageHandler</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">ServerBootstrap</span> <span class=\"hljs-variable\">serverBootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(RPC_HANDLER);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> serverBootstrap.bind(<span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;server error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端架子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <br>        <span class=\"hljs-comment\">// rpc 响应消息处理器，待实现</span><br>        <span class=\"hljs-type\">RpcResponseMessageHandler</span> <span class=\"hljs-variable\">RPC_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(group);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(RPC_HANDLER);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>服务器端的 service 获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ServicesFactory</span> &#123;<br><br>    <span class=\"hljs-keyword\">static</span> Properties properties;<br>    <span class=\"hljs-keyword\">static</span> Map&lt;Class&lt;?&gt;, Object&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> Config.class.getResourceAsStream(<span class=\"hljs-string\">&quot;/application.properties&quot;</span>)) &#123;<br>            properties = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Properties</span>();<br>            properties.load(in);<br>            Set&lt;String&gt; names = properties.stringPropertyNames();<br>            <span class=\"hljs-keyword\">for</span> (String name : names) &#123;<br>                <span class=\"hljs-keyword\">if</span> (name.endsWith(<span class=\"hljs-string\">&quot;Service&quot;</span>)) &#123;<br>                    Class&lt;?&gt; interfaceClass = Class.forName(name);<br>                    Class&lt;?&gt; instanceClass = Class.forName(properties.getProperty(name));<br>                    map.put(interfaceClass, instanceClass.newInstance());<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException | ClassNotFoundException | InstantiationException | IllegalAccessException e) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionInInitializerError</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; T <span class=\"hljs-title function_\">getService</span><span class=\"hljs-params\">(Class&lt;T&gt; interfaceClass)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (T) map.get(interfaceClass);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>相关配置 application.properties</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">serializer.algorithm=Json<br>cn<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.server</span><span class=\"hljs-selector-class\">.service</span>.HelloService=cn<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.server</span><span class=\"hljs-selector-class\">.service</span>.HelloServiceImpl<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2）服务器-handler\"><a href=\"#2）服务器-handler\" class=\"headerlink\" title=\"2）服务器 handler\"></a>2）服务器 handler</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;RpcRequestMessage&gt; &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, RpcRequestMessage message)</span> &#123;<br>        <span class=\"hljs-type\">RpcResponseMessage</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcResponseMessage</span>();<br>        response.setSequenceId(message.getSequenceId());<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 获取真正的实现对象</span><br>            <span class=\"hljs-type\">HelloService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> (HelloService)<br>                    ServicesFactory.getService(Class.forName(message.getInterfaceName()));<br>            <br>            <span class=\"hljs-comment\">// 获取要调用的方法</span><br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">method</span> <span class=\"hljs-operator\">=</span> service.getClass().getMethod(message.getMethodName(), message.getParameterTypes());<br>            <br>            <span class=\"hljs-comment\">// 调用方法</span><br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">invoke</span> <span class=\"hljs-operator\">=</span> method.invoke(service, message.getParameterValue());<br>            <span class=\"hljs-comment\">// 调用成功</span><br>            response.setReturnValue(invoke);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class=\"hljs-comment\">// 调用异常</span><br>            response.setExceptionValue(e);<br>        &#125;<br>        <span class=\"hljs-comment\">// 返回结果</span><br>        ctx.writeAndFlush(response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"3）客户端代码第一版\"><a href=\"#3）客户端代码第一版\" class=\"headerlink\" title=\"3）客户端代码第一版\"></a>3）客户端代码第一版</h4><p>只发消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <span class=\"hljs-type\">RpcResponseMessageHandler</span> <span class=\"hljs-variable\">RPC_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(group);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(RPC_HANDLER);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br><br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">future</span> <span class=\"hljs-operator\">=</span> channel.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcRequestMessage</span>(<br>                    <span class=\"hljs-number\">1</span>,<br>                    <span class=\"hljs-string\">&quot;cn.itcast.server.service.HelloService&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;sayHello&quot;</span>,<br>                    String.class,<br>                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;String.class&#125;,<br>                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[]&#123;<span class=\"hljs-string\">&quot;张三&quot;</span>&#125;<br>            )).addListener(promise -&gt; &#123;<br>                <span class=\"hljs-keyword\">if</span> (!promise.isSuccess()) &#123;<br>                    <span class=\"hljs-type\">Throwable</span> <span class=\"hljs-variable\">cause</span> <span class=\"hljs-operator\">=</span> promise.cause();<br>                    log.error(<span class=\"hljs-string\">&quot;error&quot;</span>, cause);<br>                &#125;<br>            &#125;);<br><br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4）客户端-handler-第一版\"><a href=\"#4）客户端-handler-第一版\" class=\"headerlink\" title=\"4）客户端 handler 第一版\"></a>4）客户端 handler 第一版</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;RpcResponseMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, RpcResponseMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"5）客户端代码-第二版\"><a href=\"#5）客户端代码-第二版\" class=\"headerlink\" title=\"5）客户端代码 第二版\"></a>5）客户端代码 第二版</h4><p>包括 channel 管理，代理，接收结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcClientManager</span> &#123;<br><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">HelloService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> getProxyService(HelloService.class);<br>        System.out.println(service.sayHello(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>));<br><span class=\"hljs-comment\">//        System.out.println(service.sayHello(&quot;lisi&quot;));</span><br><span class=\"hljs-comment\">//        System.out.println(service.sayHello(&quot;wangwu&quot;));</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">// 创建代理类</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; T <span class=\"hljs-title function_\">getProxyService</span><span class=\"hljs-params\">(Class&lt;T&gt; serviceClass)</span> &#123;<br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">loader</span> <span class=\"hljs-operator\">=</span> serviceClass.getClassLoader();<br>        Class&lt;?&gt;[] interfaces = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;serviceClass&#125;;<br>        <span class=\"hljs-comment\">//                                                            sayHello  &quot;张三&quot;</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> Proxy.newProxyInstance(loader, interfaces, (proxy, method, args) -&gt; &#123;<br>            <span class=\"hljs-comment\">// 1. 将方法调用转换为 消息对象</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sequenceId</span> <span class=\"hljs-operator\">=</span> SequenceIdGenerator.nextId();<br>            <span class=\"hljs-type\">RpcRequestMessage</span> <span class=\"hljs-variable\">msg</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcRequestMessage</span>(<br>                    sequenceId,<br>                    serviceClass.getName(),<br>                    method.getName(),<br>                    method.getReturnType(),<br>                    method.getParameterTypes(),<br>                    args<br>            );<br>            <span class=\"hljs-comment\">// 2. 将消息对象发送出去</span><br>            getChannel().writeAndFlush(msg);<br><br>            <span class=\"hljs-comment\">// 3. 准备一个空 Promise 对象，来接收结果             指定 promise 对象异步接收结果线程</span><br>            DefaultPromise&lt;Object&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(getChannel().eventLoop());<br>            RpcResponseMessageHandler.PROMISES.put(sequenceId, promise);<br><br><span class=\"hljs-comment\">//            promise.addListener(future -&gt; &#123;</span><br><span class=\"hljs-comment\">//                // 线程</span><br><span class=\"hljs-comment\">//            &#125;);</span><br><br>            <span class=\"hljs-comment\">// 4. 等待 promise 结果</span><br>            promise.await();<br>            <span class=\"hljs-keyword\">if</span>(promise.isSuccess()) &#123;<br>                <span class=\"hljs-comment\">// 调用正常</span><br>                <span class=\"hljs-keyword\">return</span> promise.getNow();<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">// 调用失败</span><br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(promise.cause());<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> (T) o;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">LOCK</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br><br>    <span class=\"hljs-comment\">// 获取唯一的 channel 对象</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Channel <span class=\"hljs-title function_\">getChannel</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (channel != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> channel;<br>        &#125;<br>        <span class=\"hljs-keyword\">synchronized</span> (LOCK) &#123; <span class=\"hljs-comment\">//  t2</span><br>            <span class=\"hljs-keyword\">if</span> (channel != <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">// t1</span><br>                <span class=\"hljs-keyword\">return</span> channel;<br>            &#125;<br>            initChannel();<br>            <span class=\"hljs-keyword\">return</span> channel;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 初始化 channel 方法</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <span class=\"hljs-type\">RpcResponseMessageHandler</span> <span class=\"hljs-variable\">RPC_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span>();<br>        <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>        bootstrap.channel(NioSocketChannel.class);<br>        bootstrap.group(group);<br>        bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                ch.pipeline().addLast(LOGGING_HANDLER);<br>                ch.pipeline().addLast(MESSAGE_CODEC);<br>                ch.pipeline().addLast(RPC_HANDLER);<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            channel = bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().addListener(future -&gt; &#123;<br>                group.shutdownGracefully();<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"6）客户端-handler-第二版\"><a href=\"#6）客户端-handler-第二版\" class=\"headerlink\" title=\"6）客户端 handler 第二版\"></a>6）客户端 handler 第二版</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;RpcResponseMessage&gt; &#123;<br><br>    <span class=\"hljs-comment\">//                       序号      用来接收结果的 promise 对象</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Map&lt;Integer, Promise&lt;Object&gt;&gt; PROMISES = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Override</span><br><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, RpcResponseMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, msg);<br>        <span class=\"hljs-comment\">// 拿到空的 promise</span><br>        Promise&lt;Object&gt; promise = PROMISES.remove(msg.getSequenceId());<br>        <span class=\"hljs-keyword\">if</span> (promise != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">returnValue</span> <span class=\"hljs-operator\">=</span> msg.getReturnValue();<br>            <span class=\"hljs-type\">Exception</span> <span class=\"hljs-variable\">exceptionValue</span> <span class=\"hljs-operator\">=</span> msg.getExceptionValue();<br>            <span class=\"hljs-keyword\">if</span>(exceptionValue != <span class=\"hljs-literal\">null</span>) &#123;<br>                promise.setFailure(exceptionValue);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                promise.setSuccess(returnValue);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"2-源码分析\"><a href=\"#2-源码分析\" class=\"headerlink\" title=\"2. 源码分析\"></a>2. 源码分析</h2><h3 id=\"2-1-启动剖析\"><a href=\"#2-1-启动剖析\" class=\"headerlink\" title=\"2.1 启动剖析\"></a>2.1 启动剖析</h3><p>我们就来看看 netty 中对下面的代码是怎样进行处理的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//1 netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector</span><br><span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open(); <br><br><span class=\"hljs-comment\">//2 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config</span><br><span class=\"hljs-type\">NioServerSocketChannel</span> <span class=\"hljs-variable\">attachment</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioServerSocketChannel</span>();<br><br><span class=\"hljs-comment\">//3 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel</span><br><span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">serverSocketChannel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open(); <br>serverSocketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br><br><span class=\"hljs-comment\">//4 启动 nio boss 线程执行接下来的操作</span><br><br><span class=\"hljs-comment\">//5 注册（仅关联 selector 和 NioServerSocketChannel），未关注事件</span><br><span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">selectionKey</span> <span class=\"hljs-operator\">=</span> serverSocketChannel.register(selector, <span class=\"hljs-number\">0</span>, attachment);<br><br><span class=\"hljs-comment\">//6 head -&gt; 初始化器 -&gt; ServerBootstrapAcceptor -&gt; tail，初始化器是一次性的，只为添加 acceptor</span><br><br><span class=\"hljs-comment\">//7 绑定端口</span><br>serverSocketChannel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br><br><span class=\"hljs-comment\">//8 触发 channel active 事件，在 head 中关注 op_accept 事件</span><br>selectionKey.interestOps(SelectionKey.OP_ACCEPT);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>入口 <code>io.netty.bootstrap.ServerBootstrap#bind</code></p>\n<p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#doBind</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> ChannelFuture <span class=\"hljs-title function_\">doBind</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> SocketAddress localAddress)</span> &#123;<br>\t<span class=\"hljs-comment\">// 1. 执行初始化和注册 regFuture 会由 initAndRegister 设置其是否完成，从而回调 3.2 处代码</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">regFuture</span> <span class=\"hljs-operator\">=</span> initAndRegister();<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> regFuture.channel();<br>    <span class=\"hljs-keyword\">if</span> (regFuture.cause() != <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> regFuture;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 2. 因为是 initAndRegister 异步执行，需要分两种情况来看，调试时也需要通过 suspend 断点类型加以区分</span><br>    <span class=\"hljs-comment\">// 2.1 如果已经完成</span><br>    <span class=\"hljs-keyword\">if</span> (regFuture.isDone()) &#123;<br>        <span class=\"hljs-type\">ChannelPromise</span> <span class=\"hljs-variable\">promise</span> <span class=\"hljs-operator\">=</span> channel.newPromise();<br>        <span class=\"hljs-comment\">// 3.1 立刻调用 doBind0</span><br>        doBind0(regFuture, channel, localAddress, promise);<br>        <span class=\"hljs-keyword\">return</span> promise;<br>    &#125; <br>    <span class=\"hljs-comment\">// 2.2 还没有完成</span><br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">PendingRegistrationPromise</span> <span class=\"hljs-variable\">promise</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PendingRegistrationPromise</span>(channel);<br>        <span class=\"hljs-comment\">// 3.2 回调 doBind0</span><br>        regFuture.addListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelFutureListener</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                <span class=\"hljs-type\">Throwable</span> <span class=\"hljs-variable\">cause</span> <span class=\"hljs-operator\">=</span> future.cause();<br>                <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">// 处理异常...</span><br>                    promise.setFailure(cause);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    promise.registered();<br>\t\t\t\t\t<span class=\"hljs-comment\">// 3. 由注册线程去执行 doBind0</span><br>                    doBind0(regFuture, channel, localAddress, promise);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> promise;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#initAndRegister</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> ChannelFuture <span class=\"hljs-title function_\">initAndRegister</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        channel = channelFactory.newChannel();<br>        <span class=\"hljs-comment\">// 1.1 初始化 - 做的事就是添加一个初始化器 ChannelInitializer</span><br>        init(channel);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-comment\">// 处理异常...</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultChannelPromise</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FailedChannel</span>(), GlobalEventExecutor.INSTANCE).setFailure(t);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 1.2 注册 - 做的事就是将原生 channel 注册到 selector 上</span><br>    <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">regFuture</span> <span class=\"hljs-operator\">=</span> config().group().register(channel);<br>    <span class=\"hljs-keyword\">if</span> (regFuture.cause() != <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-comment\">// 处理异常...</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> regFuture;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.bootstrap.ServerBootstrap#init</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 这里 channel 实际上是 NioServerSocketChannel</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">init</span><span class=\"hljs-params\">(Channel channel)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-keyword\">final</span> Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0();<br>    <span class=\"hljs-keyword\">synchronized</span> (options) &#123;<br>        setChannelOptions(channel, options, logger);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">final</span> Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0();<br>    <span class=\"hljs-keyword\">synchronized</span> (attrs) &#123;<br>        <span class=\"hljs-keyword\">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) &#123;<br>            <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey();<br>            channel.attr(key).set(e.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> channel.pipeline();<br><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">EventLoopGroup</span> <span class=\"hljs-variable\">currentChildGroup</span> <span class=\"hljs-operator\">=</span> childGroup;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelHandler</span> <span class=\"hljs-variable\">currentChildHandler</span> <span class=\"hljs-operator\">=</span> childHandler;<br>    <span class=\"hljs-keyword\">final</span> Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] currentChildOptions;<br>    <span class=\"hljs-keyword\">final</span> Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] currentChildAttrs;<br>    <span class=\"hljs-keyword\">synchronized</span> (childOptions) &#123;<br>        currentChildOptions = childOptions.entrySet().toArray(newOptionArray(<span class=\"hljs-number\">0</span>));<br>    &#125;<br>    <span class=\"hljs-keyword\">synchronized</span> (childAttrs) &#123;<br>        currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(<span class=\"hljs-number\">0</span>));<br>    &#125;<br>\t<br>    <span class=\"hljs-comment\">// 为 NioServerSocketChannel 添加初始化器</span><br>    p.addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Channel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">pipeline</span> <span class=\"hljs-operator\">=</span> ch.pipeline();<br>            <span class=\"hljs-type\">ChannelHandler</span> <span class=\"hljs-variable\">handler</span> <span class=\"hljs-operator\">=</span> config.handler();<br>            <span class=\"hljs-keyword\">if</span> (handler != <span class=\"hljs-literal\">null</span>) &#123;<br>                pipeline.addLast(handler);<br>            &#125;<br><br>            <span class=\"hljs-comment\">// 初始化器的职责是将 ServerBootstrapAcceptor 加入至 NioServerSocketChannel</span><br>            ch.eventLoop().execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                    pipeline.addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrapAcceptor</span>(<br>                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#register</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(EventLoop eventLoop, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-comment\">// 一些检查，略...</span><br><br>    AbstractChannel.<span class=\"hljs-built_in\">this</span>.eventLoop = eventLoop;<br><br>    <span class=\"hljs-keyword\">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 首次执行 execute 方法时，会启动 nio 线程，之后注册等操作在 nio 线程上执行</span><br>            <span class=\"hljs-comment\">// 因为只有一个 NioServerSocketChannel 因此，也只会有一个 boss nio 线程</span><br>            <span class=\"hljs-comment\">// 这行代码完成的事实是 main -&gt; nio boss 线程的切换</span><br>            eventLoop.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            <span class=\"hljs-comment\">// 日志记录...</span><br>            closeForcibly();<br>            closeFuture.setClosed();<br>            safeSetFailure(promise, t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>io.netty.channel.AbstractChannel.AbstractUnsafe#register0</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register0</span><span class=\"hljs-params\">(ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">firstRegistration</span> <span class=\"hljs-operator\">=</span> neverRegistered;<br>        <span class=\"hljs-comment\">// 1.2.1 原生的 nio channel 绑定到 selector 上，注意此时没有注册 selector 关注事件，附件为 NioServerSocketChannel</span><br>        doRegister();<br>        neverRegistered = <span class=\"hljs-literal\">false</span>;<br>        registered = <span class=\"hljs-literal\">true</span>;<br><br>        <span class=\"hljs-comment\">// 1.2.2 执行 NioServerSocketChannel 初始化器的 initChannel</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br><br>        <span class=\"hljs-comment\">// 回调 3.2 io.netty.bootstrap.AbstractBootstrap#doBind0</span><br>        safeSetSuccess(promise);<br>        pipeline.fireChannelRegistered();<br>        <br>        <span class=\"hljs-comment\">// 对应 server socket channel 还未绑定，isActive 为 false</span><br>        <span class=\"hljs-keyword\">if</span> (isActive()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (firstRegistration) &#123;<br>                pipeline.fireChannelActive();<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (config().isAutoRead()) &#123;<br>                beginRead();<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-comment\">// Close the channel directly to avoid FD leak.</span><br>        closeForcibly();<br>        closeFuture.setClosed();<br>        safeSetFailure(promise, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.channel.ChannelInitializer#initChannel</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-keyword\">if</span> (initMap.add(ctx)) &#123; <span class=\"hljs-comment\">// Guard against re-entrance.</span><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 1.2.2.1 执行初始化</span><br>            initChannel((C) ctx.channel());<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable cause) &#123;<br>            exceptionCaught(ctx, cause);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            <span class=\"hljs-comment\">// 1.2.2.2 移除初始化器</span><br>            <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">pipeline</span> <span class=\"hljs-operator\">=</span> ctx.pipeline();<br>            <span class=\"hljs-keyword\">if</span> (pipeline.context(<span class=\"hljs-built_in\">this</span>) != <span class=\"hljs-literal\">null</span>) &#123;<br>                pipeline.remove(<span class=\"hljs-built_in\">this</span>);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#doBind0</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 3.1 或 3.2 执行 doBind0</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doBind0</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">        <span class=\"hljs-keyword\">final</span> ChannelFuture regFuture, <span class=\"hljs-keyword\">final</span> Channel channel,</span><br><span class=\"hljs-params\">        <span class=\"hljs-keyword\">final</span> SocketAddress localAddress, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br><br>    channel.eventLoop().execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (regFuture.isSuccess()) &#123;<br>                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                promise.setFailure(regFuture.cause());<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#bind</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bind</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> SocketAddress localAddress, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br>    assertEventLoop();<br><br>    <span class=\"hljs-keyword\">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (Boolean.TRUE.equals(config().getOption(ChannelOption.SO_BROADCAST)) &amp;&amp;<br>        localAddress <span class=\"hljs-keyword\">instanceof</span> InetSocketAddress &amp;&amp;<br>        !((InetSocketAddress) localAddress).getAddress().isAnyLocalAddress() &amp;&amp;<br>        !PlatformDependent.isWindows() &amp;&amp; !PlatformDependent.maybeSuperUser()) &#123;<br>        <span class=\"hljs-comment\">// 记录日志...</span><br>    &#125;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">wasActive</span> <span class=\"hljs-operator\">=</span> isActive();<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 3.3 执行端口绑定</span><br>        doBind(localAddress);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        safeSetFailure(promise, t);<br>        closeIfClosed();<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (!wasActive &amp;&amp; isActive()) &#123;<br>        invokeLater(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                <span class=\"hljs-comment\">// 3.4 触发 active 事件</span><br>                pipeline.fireChannelActive();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    safeSetSuccess(promise);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.3 关键代码 <code>io.netty.channel.socket.nio.NioServerSocketChannel#doBind</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doBind</span><span class=\"hljs-params\">(SocketAddress localAddress)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-keyword\">if</span> (PlatformDependent.javaVersion() &gt;= <span class=\"hljs-number\">7</span>) &#123;<br>        javaChannel().bind(localAddress, config.getBacklog());<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        javaChannel().socket().bind(localAddress, config.getBacklog());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.4 关键代码 <code>io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>    ctx.fireChannelActive();<br>\t<span class=\"hljs-comment\">// 触发 read (NioServerSocketChannel 上的 read 不是读取数据，只是为了触发 channel 的事件注册)</span><br>    readIfIsAutoRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.channel.nio.AbstractNioChannel#doBeginRead</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doBeginRead</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-comment\">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">selectionKey</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.selectionKey;<br>    <span class=\"hljs-keyword\">if</span> (!selectionKey.isValid()) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    readPending = <span class=\"hljs-literal\">true</span>;<br><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">interestOps</span> <span class=\"hljs-operator\">=</span> selectionKey.interestOps();<br>    <span class=\"hljs-comment\">// readInterestOp 取值是 16，在 NioServerSocketChannel 创建时初始化好，代表关注 accept 事件</span><br>    <span class=\"hljs-keyword\">if</span> ((interestOps &amp; readInterestOp) == <span class=\"hljs-number\">0</span>) &#123;<br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-NioEventLoop-剖析\"><a href=\"#2-2-NioEventLoop-剖析\" class=\"headerlink\" title=\"2.2 NioEventLoop 剖析\"></a>2.2 NioEventLoop 剖析</h3><p>NioEventLoop 线程不仅要处理 IO 事件，还要处理 Task（包括普通任务和定时任务），</p>\n<p>提交任务代码 <code>io.netty.util.concurrent.SingleThreadEventExecutor#execute</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">execute</span><span class=\"hljs-params\">(Runnable task)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (task == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NullPointerException</span>(<span class=\"hljs-string\">&quot;task&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">inEventLoop</span> <span class=\"hljs-operator\">=</span> inEventLoop();<br>    <span class=\"hljs-comment\">// 添加任务，其中队列使用了 jctools 提供的 mpsc 无锁队列</span><br>    addTask(task);<br>    <span class=\"hljs-keyword\">if</span> (!inEventLoop) &#123;<br>        <span class=\"hljs-comment\">// inEventLoop 如果为 false 表示由其它线程来调用 execute，即首次调用，这时需要向 eventLoop 提交首个任务，启动死循环，会执行到下面的 doStartThread</span><br>        startThread();<br>        <span class=\"hljs-keyword\">if</span> (isShutdown()) &#123;<br>            <span class=\"hljs-comment\">// 如果已经 shutdown，做拒绝逻辑，代码略...</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (!addTaskWakesUp &amp;&amp; wakesUpForTask(task)) &#123;<br>        <span class=\"hljs-comment\">// 如果线程由于 IO select 阻塞了，添加的任务的线程需要负责唤醒 NioEventLoop 线程</span><br>        wakeup(inEventLoop);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>唤醒 select 阻塞线程<code>io.netty.channel.nio.NioEventLoop#wakeup</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">wakeup</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> inEventLoop)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (!inEventLoop &amp;&amp; wakenUp.compareAndSet(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>)) &#123;<br>        selector.wakeup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>启动 EventLoop 主循环 <code>io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doStartThread</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">assert</span> thread == <span class=\"hljs-literal\">null</span>;<br>    executor.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-comment\">// 将线程池的当前线程保存在成员变量中，以便后续使用</span><br>            thread = Thread.currentThread();<br>            <span class=\"hljs-keyword\">if</span> (interrupted) &#123;<br>                thread.interrupt();<br>            &#125;<br><br>            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">success</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>            updateLastExecutionTime();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// 调用外部类 SingleThreadEventExecutor 的 run 方法，进入死循环，run 方法见下</span><br>                SingleThreadEventExecutor.<span class=\"hljs-built_in\">this</span>.run();<br>                success = <span class=\"hljs-literal\">true</span>;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>                logger.warn(<span class=\"hljs-string\">&quot;Unexpected exception from an event executor: &quot;</span>, t);<br>            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// 清理工作，代码略...</span><br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>io.netty.channel.nio.NioEventLoop#run</code> 主要任务是执行死循环，不断看有没有新任务，有没有 IO 事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// calculateStrategy 的逻辑如下：</span><br>                <span class=\"hljs-comment\">// 有任务，会执行一次 selectNow，清除上一次的 wakeup 结果，无论有没有 IO 事件，都会跳过 switch</span><br>                <span class=\"hljs-comment\">// 没有任务，会匹配 SelectStrategy.SELECT，看是否应当阻塞</span><br>                <span class=\"hljs-keyword\">switch</span> (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123;<br>                    <span class=\"hljs-keyword\">case</span> SelectStrategy.CONTINUE:<br>                        <span class=\"hljs-keyword\">continue</span>;<br><br>                    <span class=\"hljs-keyword\">case</span> SelectStrategy.BUSY_WAIT:<br><br>                    <span class=\"hljs-keyword\">case</span> SelectStrategy.SELECT:<br>                        <span class=\"hljs-comment\">// 因为 IO 线程和提交任务线程都有可能执行 wakeup，而 wakeup 属于比较昂贵的操作，因此使用了一个原子布尔对象 wakenUp，它取值为 true 时，表示该由当前线程唤醒</span><br>                        <span class=\"hljs-comment\">// 进行 select 阻塞，并设置唤醒状态为 false</span><br>                        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">oldWakenUp</span> <span class=\"hljs-operator\">=</span> wakenUp.getAndSet(<span class=\"hljs-literal\">false</span>);<br>                        <br>                        <span class=\"hljs-comment\">// 如果在这个位置，非 EventLoop 线程抢先将 wakenUp 置为 true，并 wakeup</span><br>                        <span class=\"hljs-comment\">// 下面的 select 方法不会阻塞</span><br>                        <span class=\"hljs-comment\">// 等 runAllTasks 处理完成后，到再循环进来这个阶段新增的任务会不会及时执行呢?</span><br>                        <span class=\"hljs-comment\">// 因为 oldWakenUp 为 true，因此下面的 select 方法就会阻塞，直到超时</span><br>                        <span class=\"hljs-comment\">// 才能执行，让 select 方法无谓阻塞</span><br>                        select(oldWakenUp);<br><br>                        <span class=\"hljs-keyword\">if</span> (wakenUp.get()) &#123;<br>                            selector.wakeup();<br>                        &#125;<br>                    <span class=\"hljs-keyword\">default</span>:<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                rebuildSelector0();<br>                handleLoopException(e);<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br><br>            cancelledKeys = <span class=\"hljs-number\">0</span>;<br>            needsToSelectAgain = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-comment\">// ioRatio 默认是 50</span><br>            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ioRatio</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.ioRatio;<br>            <span class=\"hljs-keyword\">if</span> (ioRatio == <span class=\"hljs-number\">100</span>) &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    processSelectedKeys();<br>                &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                    <span class=\"hljs-comment\">// ioRatio 为 100 时，总是运行完所有非 IO 任务</span><br>                    runAllTasks();<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;                <br>                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ioStartTime</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    processSelectedKeys();<br>                &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                    <span class=\"hljs-comment\">// 记录 io 事件处理耗时</span><br>                    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ioTime</span> <span class=\"hljs-operator\">=</span> System.nanoTime() - ioStartTime;<br>                    <span class=\"hljs-comment\">// 运行非 IO 任务，一旦超时会退出 runAllTasks</span><br>                    runAllTasks(ioTime * (<span class=\"hljs-number\">100</span> - ioRatio) / ioRatio);<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            handleLoopException(t);<br>        &#125;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (isShuttingDown()) &#123;<br>                closeAll();<br>                <span class=\"hljs-keyword\">if</span> (confirmShutdown()) &#123;<br>                    <span class=\"hljs-keyword\">return</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            handleLoopException(t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"⚠️-注意\"><a href=\"#⚠️-注意\" class=\"headerlink\" title=\"⚠️ 注意\"></a>⚠️ 注意</h4><blockquote>\n<p>这里有个费解的地方就是 wakeup，它既可以由提交任务的线程来调用（比较好理解），也可以由 EventLoop 线程来调用（比较费解），这里要知道 wakeup 方法的效果：</p>\n<ul>\n<li>由非 EventLoop 线程调用，会唤醒当前在执行 select 阻塞的 EventLoop 线程</li>\n<li>由 EventLoop 自己调用，会本次的 wakeup 会取消下一次的 select 操作</li>\n</ul>\n</blockquote>\n<p>参考下图</p>\n<img src=\"img/0032.png\"  />\n\n\n\n<p><code>io.netty.channel.nio.NioEventLoop#select</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">select</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> oldWakenUp)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.selector;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">selectCnt</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">currentTimeNanos</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>        <span class=\"hljs-comment\">// 计算等待时间</span><br>        <span class=\"hljs-comment\">// * 没有 scheduledTask，超时时间为 1s</span><br>        <span class=\"hljs-comment\">// * 有 scheduledTask，超时时间为 `下一个定时任务执行时间 - 当前时间`</span><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">selectDeadLineNanos</span> <span class=\"hljs-operator\">=</span> currentTimeNanos + delayNanos(currentTimeNanos);<br><br>        <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">timeoutMillis</span> <span class=\"hljs-operator\">=</span> (selectDeadLineNanos - currentTimeNanos + <span class=\"hljs-number\">500000L</span>) / <span class=\"hljs-number\">1000000L</span>;<br>            <span class=\"hljs-comment\">// 如果超时，退出循环</span><br>            <span class=\"hljs-keyword\">if</span> (timeoutMillis &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>                <span class=\"hljs-keyword\">if</span> (selectCnt == <span class=\"hljs-number\">0</span>) &#123;<br>                    selector.selectNow();<br>                    selectCnt = <span class=\"hljs-number\">1</span>;<br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            <span class=\"hljs-comment\">// 如果期间又有 task 退出循环，如果没这个判断，那么任务就会等到下次 select 超时时才能被执行</span><br>            <span class=\"hljs-comment\">// wakenUp.compareAndSet(false, true) 是让非 NioEventLoop 不必再执行 wakeup</span><br>            <span class=\"hljs-keyword\">if</span> (hasTasks() &amp;&amp; wakenUp.compareAndSet(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>)) &#123;<br>                selector.selectNow();<br>                selectCnt = <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            <span class=\"hljs-comment\">// select 有限时阻塞</span><br>            <span class=\"hljs-comment\">// 注意 nio 有 bug，当 bug 出现时，select 方法即使没有时间发生，也不会阻塞住，导致不断空轮询，cpu 占用 100%</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">selectedKeys</span> <span class=\"hljs-operator\">=</span> selector.select(timeoutMillis);<br>            <span class=\"hljs-comment\">// 计数加 1</span><br>            selectCnt ++;<br><br>            <span class=\"hljs-comment\">// 醒来后，如果有 IO 事件、或是由非 EventLoop 线程唤醒，或者有任务，退出循环</span><br>            <span class=\"hljs-keyword\">if</span> (selectedKeys != <span class=\"hljs-number\">0</span> || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (Thread.interrupted()) &#123;<br>               \t<span class=\"hljs-comment\">// 线程被打断，退出循环</span><br>                <span class=\"hljs-comment\">// 记录日志</span><br>                selectCnt = <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">time</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>            <span class=\"hljs-keyword\">if</span> (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) &gt;= currentTimeNanos) &#123;<br>                <span class=\"hljs-comment\">// 如果超时，计数重置为 1，下次循环就会 break</span><br>                selectCnt = <span class=\"hljs-number\">1</span>;<br>            &#125; <br>            <span class=\"hljs-comment\">// 计数超过阈值，由 io.netty.selectorAutoRebuildThreshold 指定，默认 512</span><br>            <span class=\"hljs-comment\">// 这是为了解决 nio 空轮询 bug</span><br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (SELECTOR_AUTO_REBUILD_THRESHOLD &gt; <span class=\"hljs-number\">0</span> &amp;&amp;<br>                    selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) &#123;<br>                <span class=\"hljs-comment\">// 重建 selector</span><br>                selector = selectRebuildSelector(selectCnt);<br>                selectCnt = <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            currentTimeNanos = time;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (selectCnt &gt; MIN_PREMATURE_SELECTOR_RETURNS) &#123;<br>            <span class=\"hljs-comment\">// 记录日志</span><br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException e) &#123;<br>        <span class=\"hljs-comment\">// 记录日志</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>处理 keys <code>io.netty.channel.nio.NioEventLoop#processSelectedKeys</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processSelectedKeys</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (selectedKeys != <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-comment\">// 通过反射将 Selector 实现类中的就绪事件集合替换为 SelectedSelectionKeySet </span><br>        <span class=\"hljs-comment\">// SelectedSelectionKeySet 底层为数组实现，可以提高遍历性能（原本为 HashSet）</span><br>        processSelectedKeysOptimized();<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        processSelectedKeysPlain(selector.selectedKeys());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>io.netty.channel.nio.NioEventLoop#processSelectedKey</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processSelectedKey</span><span class=\"hljs-params\">(SelectionKey k, AbstractNioChannel ch)</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> AbstractNioChannel.<span class=\"hljs-type\">NioUnsafe</span> <span class=\"hljs-variable\">unsafe</span> <span class=\"hljs-operator\">=</span> ch.unsafe();<br>    <span class=\"hljs-comment\">// 当 key 取消或关闭时会导致这个 key 无效</span><br>    <span class=\"hljs-keyword\">if</span> (!k.isValid()) &#123;<br>        <span class=\"hljs-comment\">// 无效时处理...</span><br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readyOps</span> <span class=\"hljs-operator\">=</span> k.readyOps();<br>        <span class=\"hljs-comment\">// 连接事件</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; SelectionKey.OP_CONNECT) != <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ops</span> <span class=\"hljs-operator\">=</span> k.interestOps();<br>            ops &amp;= ~SelectionKey.OP_CONNECT;<br>            k.interestOps(ops);<br><br>            unsafe.finishConnect();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 可写事件</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; SelectionKey.OP_WRITE) != <span class=\"hljs-number\">0</span>) &#123;<br>            ch.unsafe().forceFlush();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 可读或可接入事件</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"hljs-number\">0</span> || readyOps == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 如果是可接入 io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read</span><br>            <span class=\"hljs-comment\">// 如果是可读 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read</span><br>            unsafe.read();<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException ignored) &#123;<br>        unsafe.close(unsafe.voidPromise());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-accept-剖析\"><a href=\"#2-3-accept-剖析\" class=\"headerlink\" title=\"2.3 accept 剖析\"></a>2.3 accept 剖析</h3><p>nio 中如下代码，在 netty 中的流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//1 阻塞直到事件发生</span><br>selector.select();<br><br>Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();<br><span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;    <br>    <span class=\"hljs-comment\">//2 拿到一个事件</span><br>    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>    <br>    <span class=\"hljs-comment\">//3 如果是 accept 事件</span><br>    <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>        <br>        <span class=\"hljs-comment\">//4 执行 accept</span><br>        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> serverSocketChannel.accept();<br>        channel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>        <br>        <span class=\"hljs-comment\">//5 关注 read 事件</span><br>        channel.register(selector, SelectionKey.OP_READ);<br>    &#125;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>先来看可接入事件处理（accept）</p>\n<p><code>io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">read</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">eventLoop</span><span class=\"hljs-params\">()</span>.inEventLoop();<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelConfig</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> config();<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">pipeline</span> <span class=\"hljs-operator\">=</span> pipeline();    <br>    <span class=\"hljs-keyword\">final</span> RecvByteBufAllocator.<span class=\"hljs-type\">Handle</span> <span class=\"hljs-variable\">allocHandle</span> <span class=\"hljs-operator\">=</span> unsafe().recvBufAllocHandle();<br>    allocHandle.reset(config);<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">closed</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-type\">Throwable</span> <span class=\"hljs-variable\">exception</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">do</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// doReadMessages 中执行了 accept 并创建 NioSocketChannel 作为消息放入 readBuf</span><br>                <span class=\"hljs-comment\">// readBuf 是一个 ArrayList 用来缓存消息</span><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">localRead</span> <span class=\"hljs-operator\">=</span> doReadMessages(readBuf);<br>                <span class=\"hljs-keyword\">if</span> (localRead == <span class=\"hljs-number\">0</span>) &#123;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>                <span class=\"hljs-keyword\">if</span> (localRead &lt; <span class=\"hljs-number\">0</span>) &#123;<br>                    closed = <span class=\"hljs-literal\">true</span>;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>\t\t\t\t<span class=\"hljs-comment\">// localRead 为 1，就一条消息，即接收一个客户端连接</span><br>                allocHandle.incMessagesRead(localRead);<br>            &#125; <span class=\"hljs-keyword\">while</span> (allocHandle.continueReading());<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            exception = t;<br>        &#125;<br><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> readBuf.size();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i ++) &#123;<br>            readPending = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-comment\">// 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理</span><br>            <span class=\"hljs-comment\">// io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead</span><br>            pipeline.fireChannelRead(readBuf.get(i));<br>        &#125;<br>        readBuf.clear();<br>        allocHandle.readComplete();<br>        pipeline.fireChannelReadComplete();<br><br>        <span class=\"hljs-keyword\">if</span> (exception != <span class=\"hljs-literal\">null</span>) &#123;<br>            closed = closeOnReadError(exception);<br><br>            pipeline.fireExceptionCaught(exception);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (closed) &#123;<br>            inputShutdown = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">if</span> (isOpen()) &#123;<br>                close(voidPromise());<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>关键代码 <code>io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>    <span class=\"hljs-comment\">// 这时的 msg 是 NioSocketChannel</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> (Channel) msg;<br><br>    <span class=\"hljs-comment\">// NioSocketChannel 添加  childHandler 即初始化器</span><br>    child.pipeline().addLast(childHandler);<br><br>    <span class=\"hljs-comment\">// 设置选项</span><br>    setChannelOptions(child, childOptions, logger);<br><br>    <span class=\"hljs-keyword\">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;<br>        child.attr((AttributeKey&lt;Object&gt;) e.getKey()).set(e.getValue());<br>    &#125;<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 注册 NioSocketChannel 到 nio worker 线程，接下来的处理也移交至 nio worker 线程</span><br>        childGroup.register(child).addListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelFutureListener</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                <span class=\"hljs-keyword\">if</span> (!future.isSuccess()) &#123;<br>                    forceClose(child, future.cause());<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        forceClose(child, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>又回到了熟悉的 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#register</code>  方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(EventLoop eventLoop, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-comment\">// 一些检查，略...</span><br><br>    AbstractChannel.<span class=\"hljs-built_in\">this</span>.eventLoop = eventLoop;<br><br>    <span class=\"hljs-keyword\">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 这行代码完成的事实是 nio boss -&gt; nio worker 线程的切换</span><br>            eventLoop.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            <span class=\"hljs-comment\">// 日志记录...</span><br>            closeForcibly();<br>            closeFuture.setClosed();<br>            safeSetFailure(promise, t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>io.netty.channel.AbstractChannel.AbstractUnsafe#register0</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register0</span><span class=\"hljs-params\">(ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">firstRegistration</span> <span class=\"hljs-operator\">=</span> neverRegistered;<br>        doRegister();<br>        neverRegistered = <span class=\"hljs-literal\">false</span>;<br>        registered = <span class=\"hljs-literal\">true</span>;<br>\t\t<br>        <span class=\"hljs-comment\">// 执行初始化器，执行前 pipeline 中只有 head -&gt; 初始化器 -&gt; tail</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br>        <span class=\"hljs-comment\">// 执行后就是 head -&gt; logging handler -&gt; my handler -&gt; tail</span><br><br>        safeSetSuccess(promise);<br>        pipeline.fireChannelRegistered();<br>        <br>        <span class=\"hljs-keyword\">if</span> (isActive()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (firstRegistration) &#123;<br>                <span class=\"hljs-comment\">// 触发 pipeline 上 active 事件</span><br>                pipeline.fireChannelActive();<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (config().isAutoRead()) &#123;<br>                beginRead();<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        closeForcibly();<br>        closeFuture.setClosed();<br>        safeSetFailure(promise, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>回到了熟悉的代码 <code>io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>    ctx.fireChannelActive();<br>\t<span class=\"hljs-comment\">// 触发 read (NioSocketChannel 这里 read，只是为了触发 channel 的事件注册，还未涉及数据读取)</span><br>    readIfIsAutoRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>io.netty.channel.nio.AbstractNioChannel#doBeginRead</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doBeginRead</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-comment\">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">selectionKey</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.selectionKey;<br>    <span class=\"hljs-keyword\">if</span> (!selectionKey.isValid()) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    readPending = <span class=\"hljs-literal\">true</span>;<br>\t<span class=\"hljs-comment\">// 这时候 interestOps 是 0</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">interestOps</span> <span class=\"hljs-operator\">=</span> selectionKey.interestOps();<br>    <span class=\"hljs-keyword\">if</span> ((interestOps &amp; readInterestOp) == <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 关注 read 事件</span><br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-read-剖析\"><a href=\"#2-4-read-剖析\" class=\"headerlink\" title=\"2.4 read 剖析\"></a>2.4 read 剖析</h3><p>再来看可读事件 <code>io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read</code>，注意发送的数据未必能够一次读完，因此会触发多次 nio read 事件，一次事件内会触发多次 pipeline read，一次事件会触发一次 pipeline read complete</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">read</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelConfig</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> config();<br>    <span class=\"hljs-keyword\">if</span> (shouldBreakReadReady(config)) &#123;<br>        clearReadPending();<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">pipeline</span> <span class=\"hljs-operator\">=</span> pipeline();<br>    <span class=\"hljs-comment\">// io.netty.allocator.type 决定 allocator 的实现</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ByteBufAllocator</span> <span class=\"hljs-variable\">allocator</span> <span class=\"hljs-operator\">=</span> config.getAllocator();<br>    <span class=\"hljs-comment\">// 用来分配 byteBuf，确定单次读取大小</span><br>    <span class=\"hljs-keyword\">final</span> RecvByteBufAllocator.<span class=\"hljs-type\">Handle</span> <span class=\"hljs-variable\">allocHandle</span> <span class=\"hljs-operator\">=</span> recvBufAllocHandle();<br>    allocHandle.reset(config);<br><br>    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">byteBuf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">close</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">do</span> &#123;<br>            byteBuf = allocHandle.allocate(allocator);<br>            <span class=\"hljs-comment\">// 读取</span><br>            allocHandle.lastBytesRead(doReadBytes(byteBuf));<br>            <span class=\"hljs-keyword\">if</span> (allocHandle.lastBytesRead() &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>                byteBuf.release();<br>                byteBuf = <span class=\"hljs-literal\">null</span>;<br>                close = allocHandle.lastBytesRead() &lt; <span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">if</span> (close) &#123;<br>                    readPending = <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            allocHandle.incMessagesRead(<span class=\"hljs-number\">1</span>);<br>            readPending = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-comment\">// 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理 NioSocketChannel 上的 handler</span><br>            pipeline.fireChannelRead(byteBuf);<br>            byteBuf = <span class=\"hljs-literal\">null</span>;<br>        &#125; <br>        <span class=\"hljs-comment\">// 是否要继续循环</span><br>        <span class=\"hljs-keyword\">while</span> (allocHandle.continueReading());<br><br>        allocHandle.readComplete();<br>        <span class=\"hljs-comment\">// 触发 read complete 事件</span><br>        pipeline.fireChannelReadComplete();<br><br>        <span class=\"hljs-keyword\">if</span> (close) &#123;<br>            closeOnRead(pipeline);<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        handleReadException(pipeline, byteBuf, t, close, allocHandle);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle#continueReading(io.netty.util.UncheckedBooleanSupplier)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">continueReading</span><span class=\"hljs-params\">(UncheckedBooleanSupplier maybeMoreDataSupplier)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <br>           <span class=\"hljs-comment\">// 一般为 true</span><br>           config.isAutoRead() &amp;&amp;<br>           <span class=\"hljs-comment\">// respectMaybeMoreData 默认为 true</span><br>           <span class=\"hljs-comment\">// maybeMoreDataSupplier 的逻辑是如果预期读取字节与实际读取字节相等，返回 true</span><br>           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &amp;&amp;<br>           <span class=\"hljs-comment\">// 小于最大次数，maxMessagePerRead 默认 16</span><br>           totalMessages &lt; maxMessagePerRead &amp;&amp;<br>           <span class=\"hljs-comment\">// 实际读到了数据</span><br>           totalBytesRead &gt; <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>该笔记是B站黑马的Netty视频的配套笔记4。</p>","more":"<h1 id=\"四-优化与源码\"><a href=\"#四-优化与源码\" class=\"headerlink\" title=\"四. 优化与源码\"></a>四. 优化与源码</h1><h2 id=\"1-优化\"><a href=\"#1-优化\" class=\"headerlink\" title=\"1. 优化\"></a>1. 优化</h2><h3 id=\"1-1-扩展序列化算法\"><a href=\"#1-1-扩展序列化算法\" class=\"headerlink\" title=\"1.1 扩展序列化算法\"></a>1.1 扩展序列化算法</h3><p>序列化，反序列化主要用在消息正文的转换上</p>\n<ul>\n<li>序列化时，需要将 Java 对象变为要传输的数据（可以是 byte[]，或 json 等，最终都需要变成 byte[]）</li>\n<li>反序列化时，需要将传入的正文数据还原成 Java 对象，便于处理</li>\n</ul>\n<p>目前的代码仅支持 Java 自带的序列化，反序列化机制，核心代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 反序列化</span><br><span class=\"hljs-type\">byte</span>[] body = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[bodyLength];<br>byteByf.readBytes(body);<br><span class=\"hljs-type\">ObjectInputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(body));<br><span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> (Message) in.readObject();<br>message.setSequenceId(sequenceId);<br><br><span class=\"hljs-comment\">// 序列化</span><br><span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectOutputStream</span>(out).writeObject(message);<br><span class=\"hljs-type\">byte</span>[] bytes = out.toByteArray();<br></code></pre></td></tr></table></figure>\n\n<p>为了支持更多序列化算法，抽象一个 Serializer 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Serializer</span> &#123;<br><br>    <span class=\"hljs-comment\">// 反序列化方法</span><br>    &lt;T&gt; T <span class=\"hljs-title function_\">deserialize</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz, <span class=\"hljs-type\">byte</span>[] bytes)</span>;<br><br>    <span class=\"hljs-comment\">// 序列化方法</span><br>    &lt;T&gt; <span class=\"hljs-type\">byte</span>[] serialize(T object);<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>提供两个实现，我这里直接将实现加入了枚举类 Serializer.Algorithm 中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">SerializerAlgorithm</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializer</span> &#123;<br>\t<span class=\"hljs-comment\">// Java 实现</span><br>    Java &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> &lt;T&gt; T <span class=\"hljs-title function_\">deserialize</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz, <span class=\"hljs-type\">byte</span>[] bytes)</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">ObjectInputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <br>                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(bytes));<br>                <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">object</span> <span class=\"hljs-operator\">=</span> in.readObject();<br>                <span class=\"hljs-keyword\">return</span> (T) object;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException | ClassNotFoundException e) &#123;<br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;SerializerAlgorithm.Java 反序列化错误&quot;</span>, e);<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-type\">byte</span>[] serialize(T object) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectOutputStream</span>(out).writeObject(object);<br>                <span class=\"hljs-keyword\">return</span> out.toByteArray();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;SerializerAlgorithm.Java 序列化错误&quot;</span>, e);<br>            &#125;<br>        &#125;<br>    &#125;, <br>    <span class=\"hljs-comment\">// Json 实现(引入了 Gson 依赖)</span><br>    Json &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> &lt;T&gt; T <span class=\"hljs-title function_\">deserialize</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz, <span class=\"hljs-type\">byte</span>[] bytes)</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>().fromJson(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(bytes, StandardCharsets.UTF_8), clazz);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-type\">byte</span>[] serialize(T object) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>().toJson(object).getBytes(StandardCharsets.UTF_8);<br>        &#125;<br>    &#125;;<br><br>    <span class=\"hljs-comment\">// 需要从协议的字节中得到是哪种序列化算法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> SerializerAlgorithm <span class=\"hljs-title function_\">getByInt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> type)</span> &#123;<br>        SerializerAlgorithm[] array = SerializerAlgorithm.values();<br>        <span class=\"hljs-keyword\">if</span> (type &lt; <span class=\"hljs-number\">0</span> || type &gt; array.length - <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;超过 SerializerAlgorithm 范围&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> array[type];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>增加配置类和配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Config</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> Properties properties;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> Config.class.getResourceAsStream(<span class=\"hljs-string\">&quot;/application.properties&quot;</span>)) &#123;<br>            properties = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Properties</span>();<br>            properties.load(in);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionInInitializerError</span>(e);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getServerPort</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> properties.getProperty(<span class=\"hljs-string\">&quot;server.port&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span>(value == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">8080</span>;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> Integer.parseInt(value);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Serializer.Algorithm <span class=\"hljs-title function_\">getSerializerAlgorithm</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> properties.getProperty(<span class=\"hljs-string\">&quot;serializer.algorithm&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span>(value == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> Serializer.Algorithm.Java;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> Serializer.Algorithm.valueOf(value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">serializer.algorithm</span>=<span class=\"hljs-string\">Json</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>修改编解码器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MessageCodecSharable</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MessageToMessageCodec</span>&lt;ByteBuf, Message&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">encode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Message msg, List&lt;Object&gt; outList)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> ctx.alloc().buffer();<br>        <span class=\"hljs-comment\">// 1. 4 字节的魔数</span><br>        out.writeBytes(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;);<br>        <span class=\"hljs-comment\">// 2. 1 字节的版本,</span><br>        out.writeByte(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-comment\">// 3. 1 字节的序列化方式 jdk 0 , json 1</span><br>        out.writeByte(Config.getSerializerAlgorithm().ordinal());<br>        <span class=\"hljs-comment\">// 4. 1 字节的指令类型</span><br>        out.writeByte(msg.getMessageType());<br>        <span class=\"hljs-comment\">// 5. 4 个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class=\"hljs-comment\">// 无意义，对齐填充</span><br>        out.writeByte(<span class=\"hljs-number\">0xff</span>);<br>        <span class=\"hljs-comment\">// 6. 获取内容的字节数组</span><br>        <span class=\"hljs-type\">byte</span>[] bytes = Config.getSerializerAlgorithm().serialize(msg);<br>        <span class=\"hljs-comment\">// 7. 长度</span><br>        out.writeInt(bytes.length);<br>        <span class=\"hljs-comment\">// 8. 写入内容</span><br>        out.writeBytes(bytes);<br>        outList.add(out);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decode</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">magicNum</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">version</span> <span class=\"hljs-operator\">=</span> in.readByte();<br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">serializerAlgorithm</span> <span class=\"hljs-operator\">=</span> in.readByte(); <span class=\"hljs-comment\">// 0 或 1</span><br>        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">messageType</span> <span class=\"hljs-operator\">=</span> in.readByte(); <span class=\"hljs-comment\">// 0,1,2...</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sequenceId</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        in.readByte();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> in.readInt();<br>        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[length];<br>        in.readBytes(bytes, <span class=\"hljs-number\">0</span>, length);<br><br>        <span class=\"hljs-comment\">// 找到反序列化算法</span><br>        Serializer.<span class=\"hljs-type\">Algorithm</span> <span class=\"hljs-variable\">algorithm</span> <span class=\"hljs-operator\">=</span> Serializer.Algorithm.values()[serializerAlgorithm];<br>        <span class=\"hljs-comment\">// 确定具体消息类型</span><br>        Class&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span>&gt; messageClass = Message.getMessageClass(messageType);<br>        <span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> algorithm.deserialize(messageClass, bytes);<br><span class=\"hljs-comment\">//        log.debug(&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;, magicNum, version, serializerType, messageType, sequenceId, length);</span><br><span class=\"hljs-comment\">//        log.debug(&quot;&#123;&#125;&quot;, message);</span><br>        out.add(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>其中确定具体消息类型，可以根据 <code>消息类型字节</code> 获取到对应的 <code>消息 class</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Message</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 根据消息类型字节，获得对应的消息 class</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> messageType 消息类型字节</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 消息 class</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Class&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span>&gt; getMessageClass(<span class=\"hljs-type\">int</span> messageType) &#123;<br>        <span class=\"hljs-keyword\">return</span> messageClasses.get(messageType);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> sequenceId;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> messageType;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMessageType</span><span class=\"hljs-params\">()</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">LoginRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">LoginResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ChatRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ChatResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupCreateRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupCreateResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupJoinRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupJoinResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">7</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupQuitRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">8</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupQuitResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">9</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupChatRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupChatResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">11</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupMembersRequestMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">12</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">GroupMembersResponseMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">13</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">PingMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">14</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">PongMessage</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">15</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Map&lt;Integer, Class&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span>&gt;&gt; messageClasses = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        messageClasses.put(LoginRequestMessage, LoginRequestMessage.class);<br>        messageClasses.put(LoginResponseMessage, LoginResponseMessage.class);<br>        messageClasses.put(ChatRequestMessage, ChatRequestMessage.class);<br>        messageClasses.put(ChatResponseMessage, ChatResponseMessage.class);<br>        messageClasses.put(GroupCreateRequestMessage, GroupCreateRequestMessage.class);<br>        messageClasses.put(GroupCreateResponseMessage, GroupCreateResponseMessage.class);<br>        messageClasses.put(GroupJoinRequestMessage, GroupJoinRequestMessage.class);<br>        messageClasses.put(GroupJoinResponseMessage, GroupJoinResponseMessage.class);<br>        messageClasses.put(GroupQuitRequestMessage, GroupQuitRequestMessage.class);<br>        messageClasses.put(GroupQuitResponseMessage, GroupQuitResponseMessage.class);<br>        messageClasses.put(GroupChatRequestMessage, GroupChatRequestMessage.class);<br>        messageClasses.put(GroupChatResponseMessage, GroupChatResponseMessage.class);<br>        messageClasses.put(GroupMembersRequestMessage, GroupMembersRequestMessage.class);<br>        messageClasses.put(GroupMembersResponseMessage, GroupMembersResponseMessage.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-参数调优\"><a href=\"#1-2-参数调优\" class=\"headerlink\" title=\"1.2 参数调优\"></a>1.2 参数调优</h3><h4 id=\"1）CONNECT-TIMEOUT-MILLIS\"><a href=\"#1）CONNECT-TIMEOUT-MILLIS\" class=\"headerlink\" title=\"1）CONNECT_TIMEOUT_MILLIS\"></a>1）CONNECT_TIMEOUT_MILLIS</h4><ul>\n<li><p>属于 SocketChannal 参数</p>\n</li>\n<li><p>用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 timeout 异常</p>\n</li>\n<li><p>SO_TIMEOUT 主要用在阻塞 IO，阻塞 IO 中 accept，read 等都是无限等待的，如果不希望永远阻塞，使用它调整超时时间</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestConnectionTimeout</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>()<br>                    .group(group)<br>                    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class=\"hljs-number\">300</span>)<br>                    .channel(NioSocketChannel.class)<br>                    .handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>());<br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">future</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">8080</span>);<br>            future.sync().channel().closeFuture().sync(); <span class=\"hljs-comment\">// 断点1</span><br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            log.debug(<span class=\"hljs-string\">&quot;timeout&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>另外源码部分 <code>io.netty.channel.nio.AbstractNioChannel.AbstractNioUnsafe#connect</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">connect</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">        <span class=\"hljs-keyword\">final</span> SocketAddress remoteAddress, <span class=\"hljs-keyword\">final</span> SocketAddress localAddress, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-comment\">// ...</span><br>    <span class=\"hljs-comment\">// Schedule connect timeout.</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">connectTimeoutMillis</span> <span class=\"hljs-operator\">=</span> config().getConnectTimeoutMillis();<br>    <span class=\"hljs-keyword\">if</span> (connectTimeoutMillis &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        connectTimeoutFuture = eventLoop().schedule(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;                <br>                <span class=\"hljs-type\">ChannelPromise</span> <span class=\"hljs-variable\">connectPromise</span> <span class=\"hljs-operator\">=</span> AbstractNioChannel.<span class=\"hljs-built_in\">this</span>.connectPromise;<br>                <span class=\"hljs-type\">ConnectTimeoutException</span> <span class=\"hljs-variable\">cause</span> <span class=\"hljs-operator\">=</span><br>                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConnectTimeoutException</span>(<span class=\"hljs-string\">&quot;connection timed out: &quot;</span> + remoteAddress); <span class=\"hljs-comment\">// 断点2</span><br>                <span class=\"hljs-keyword\">if</span> (connectPromise != <span class=\"hljs-literal\">null</span> &amp;&amp; connectPromise.tryFailure(cause)) &#123;<br>                    close(voidPromise());<br>                &#125;<br>            &#125;<br>        &#125;, connectTimeoutMillis, TimeUnit.MILLISECONDS);<br>    &#125;<br>\t<span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2）SO-BACKLOG\"><a href=\"#2）SO-BACKLOG\" class=\"headerlink\" title=\"2）SO_BACKLOG\"></a>2）SO_BACKLOG</h4><ul>\n<li>属于 ServerSocketChannal 参数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mermaid\">sequenceDiagram<br><br>participant c as client<br>participant s as server<br>participant sq as syns queue<br>participant aq as accept queue<br><br>s -&gt;&gt; s : bind()<br>s -&gt;&gt; s : listen()<br>c -&gt;&gt; c : connect()<br>c -&gt;&gt; s : 1. SYN<br>Note left of c : SYN_SEND<br>s -&gt;&gt; sq : put<br>Note right of s : SYN_RCVD<br>s -&gt;&gt; c : 2. SYN + ACK<br>Note left of c : ESTABLISHED<br>c -&gt;&gt; s : 3. ACK<br>sq -&gt;&gt; aq : put<br>Note right of s : ESTABLISHED<br>aq --&gt;&gt; s : <br>s -&gt;&gt; s : accept()<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>第一次握手，client 发送 SYN 到 server，状态修改为 SYN_SEND，server 收到，状态改变为 SYN_REVD，并将该请求放入 sync queue 队列</li>\n<li>第二次握手，server 回复 SYN + ACK 给 client，client 收到，状态改变为 ESTABLISHED，并发送 ACK 给 server</li>\n<li>第三次握手，server 收到 ACK，状态改变为 ESTABLISHED，将该请求从 sync queue 放入 accept queue</li>\n</ol>\n<p>其中</p>\n<ul>\n<li><p>在 linux 2.2 之前，backlog 大小包括了两个队列的大小，在 2.2 之后，分别用下面两个参数来控制</p>\n</li>\n<li><p>sync queue - 半连接队列</p>\n<ul>\n<li>大小通过 &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog 指定，在 <code>syncookies</code> 启用的情况下，逻辑上没有最大值限制，这个设置便被忽略</li>\n</ul>\n</li>\n<li><p>accept queue - 全连接队列</p>\n<ul>\n<li>其大小通过 &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn 指定，在使用 listen 函数时，内核会根据传入的 backlog 参数与系统参数，取二者的较小值</li>\n<li>如果 accpet queue 队列满了，server 将发送一个拒绝连接的错误信息到 client</li>\n</ul>\n</li>\n</ul>\n<p>netty 中</p>\n<p>可以通过  option(ChannelOption.SO_BACKLOG, 值) 来设置大小</p>\n<p>可以通过下面源码查看默认大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DefaultServerSocketChannelConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DefaultChannelConfig</span><br>                                              <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ServerSocketChannelConfig</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">backlog</span> <span class=\"hljs-operator\">=</span> NetUtil.SOMAXCONN;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>课堂调试关键断点为：<code>io.netty.channel.nio.NioEventLoop#processSelectedKey</code></p>\n<p>oio 中更容易说明，不用 debug 模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Server</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">ServerSocket</span> <span class=\"hljs-variable\">ss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerSocket</span>(<span class=\"hljs-number\">8888</span>, <span class=\"hljs-number\">2</span>);<br>        <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">accept</span> <span class=\"hljs-operator\">=</span> ss.accept();<br>        System.out.println(accept);<br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端启动 4 个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Client</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Socket</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Socket</span>();<br>            System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()+<span class=\"hljs-string\">&quot; connecting...&quot;</span>);<br>            s.connect(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8888</span>),<span class=\"hljs-number\">1000</span>);<br>            System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()+<span class=\"hljs-string\">&quot; connected...&quot;</span>);<br>            s.getOutputStream().write(<span class=\"hljs-number\">1</span>);<br>            System.in.read();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()+<span class=\"hljs-string\">&quot; connecting timeout...&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>第 1，2，3 个客户端都打印，但除了第一个处于 accpet 外，其它两个都处于 accept queue 中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Tue Apr <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">28</span> CST <span class=\"hljs-number\">2020</span> connecting...<br>Tue Apr <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">28</span> CST <span class=\"hljs-number\">2020</span> connected...<br></code></pre></td></tr></table></figure>\n\n<p>第 4 个客户端连接时</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">Tue</span> Apr <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">58</span> CST <span class=\"hljs-number\">2020</span> connecting...<br><span class=\"hljs-attribute\">Tue</span> Apr <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">59</span> CST <span class=\"hljs-number\">2020</span> connecting timeout...<br><span class=\"hljs-attribute\">java</span>.net.SocketTimeoutException: connect timed out<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"3）ulimit-n\"><a href=\"#3）ulimit-n\" class=\"headerlink\" title=\"3）ulimit -n\"></a>3）ulimit -n</h4><ul>\n<li>属于操作系统参数</li>\n</ul>\n<h4 id=\"4）TCP-NODELAY\"><a href=\"#4）TCP-NODELAY\" class=\"headerlink\" title=\"4）TCP_NODELAY\"></a>4）TCP_NODELAY</h4><ul>\n<li>属于 SocketChannal 参数</li>\n</ul>\n<h4 id=\"5）SO-SNDBUF-amp-SO-RCVBUF\"><a href=\"#5）SO-SNDBUF-amp-SO-RCVBUF\" class=\"headerlink\" title=\"5）SO_SNDBUF &amp; SO_RCVBUF\"></a>5）SO_SNDBUF &amp; SO_RCVBUF</h4><ul>\n<li>SO_SNDBUF 属于 SocketChannal 参数</li>\n<li>SO_RCVBUF 既可用于 SocketChannal 参数，也可以用于 ServerSocketChannal 参数（建议设置到 ServerSocketChannal 上）</li>\n</ul>\n<h4 id=\"6）ALLOCATOR\"><a href=\"#6）ALLOCATOR\" class=\"headerlink\" title=\"6）ALLOCATOR\"></a>6）ALLOCATOR</h4><ul>\n<li>属于 SocketChannal 参数</li>\n<li>用来分配 ByteBuf， ctx.alloc()</li>\n</ul>\n<h4 id=\"7）RCVBUF-ALLOCATOR\"><a href=\"#7）RCVBUF-ALLOCATOR\" class=\"headerlink\" title=\"7）RCVBUF_ALLOCATOR\"></a>7）RCVBUF_ALLOCATOR</h4><ul>\n<li>属于 SocketChannal 参数</li>\n<li>控制 netty 接收缓冲区大小</li>\n<li>负责入站数据的分配，决定入站缓冲区的大小（并可动态调整），统一采用 direct 直接内存，具体池化还是非池化由 allocator 决定</li>\n</ul>\n<h3 id=\"1-3-RPC-框架\"><a href=\"#1-3-RPC-框架\" class=\"headerlink\" title=\"1.3 RPC 框架\"></a>1.3 RPC 框架</h3><h4 id=\"1）准备工作\"><a href=\"#1）准备工作\" class=\"headerlink\" title=\"1）准备工作\"></a>1）准备工作</h4><p>这些代码可以认为是现成的，无需从头编写练习</p>\n<p>为了简化起见，在原来聊天项目的基础上新增 Rpc 请求和响应消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Message</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br><br>    <span class=\"hljs-comment\">// 省略旧的代码</span><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">RPC_MESSAGE_TYPE_REQUEST</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">101</span>;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span>  <span class=\"hljs-variable\">RPC_MESSAGE_TYPE_RESPONSE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">102</span>;<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>        messageClasses.put(RPC_MESSAGE_TYPE_REQUEST, RpcRequestMessage.class);<br>        messageClasses.put(RPC_MESSAGE_TYPE_RESPONSE, RpcResponseMessage.class);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>请求消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@ToString(callSuper = true)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcRequestMessage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 调用的接口全限定名，服务端根据它找到实现</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> String interfaceName;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 调用接口中的方法名</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> String methodName;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 方法返回类型</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Class&lt;?&gt; returnType;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 方法参数类型数组</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Class[] parameterTypes;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 方法参数值数组</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Object[] parameterValue;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">RpcRequestMessage</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sequenceId, String interfaceName, String methodName, Class&lt;?&gt; returnType, Class[] parameterTypes, Object[] parameterValue)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>.setSequenceId(sequenceId);<br>        <span class=\"hljs-built_in\">this</span>.interfaceName = interfaceName;<br>        <span class=\"hljs-built_in\">this</span>.methodName = methodName;<br>        <span class=\"hljs-built_in\">this</span>.returnType = returnType;<br>        <span class=\"hljs-built_in\">this</span>.parameterTypes = parameterTypes;<br>        <span class=\"hljs-built_in\">this</span>.parameterValue = parameterValue;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMessageType</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> RPC_MESSAGE_TYPE_REQUEST;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>响应消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@ToString(callSuper = true)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcResponseMessage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Message</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Object returnValue;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Exception exceptionValue;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMessageType</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> RPC_MESSAGE_TYPE_RESPONSE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>服务器架子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcServer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">boss</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">worker</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <br>        <span class=\"hljs-comment\">// rpc 请求消息处理器，待实现</span><br>        <span class=\"hljs-type\">RpcRequestMessageHandler</span> <span class=\"hljs-variable\">RPC_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcRequestMessageHandler</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">ServerBootstrap</span> <span class=\"hljs-variable\">serverBootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(RPC_HANDLER);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> serverBootstrap.bind(<span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;server error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>客户端架子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <br>        <span class=\"hljs-comment\">// rpc 响应消息处理器，待实现</span><br>        <span class=\"hljs-type\">RpcResponseMessageHandler</span> <span class=\"hljs-variable\">RPC_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(group);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(RPC_HANDLER);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>服务器端的 service 获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ServicesFactory</span> &#123;<br><br>    <span class=\"hljs-keyword\">static</span> Properties properties;<br>    <span class=\"hljs-keyword\">static</span> Map&lt;Class&lt;?&gt;, Object&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> Config.class.getResourceAsStream(<span class=\"hljs-string\">&quot;/application.properties&quot;</span>)) &#123;<br>            properties = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Properties</span>();<br>            properties.load(in);<br>            Set&lt;String&gt; names = properties.stringPropertyNames();<br>            <span class=\"hljs-keyword\">for</span> (String name : names) &#123;<br>                <span class=\"hljs-keyword\">if</span> (name.endsWith(<span class=\"hljs-string\">&quot;Service&quot;</span>)) &#123;<br>                    Class&lt;?&gt; interfaceClass = Class.forName(name);<br>                    Class&lt;?&gt; instanceClass = Class.forName(properties.getProperty(name));<br>                    map.put(interfaceClass, instanceClass.newInstance());<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException | ClassNotFoundException | InstantiationException | IllegalAccessException e) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExceptionInInitializerError</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; T <span class=\"hljs-title function_\">getService</span><span class=\"hljs-params\">(Class&lt;T&gt; interfaceClass)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (T) map.get(interfaceClass);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>相关配置 application.properties</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">serializer.algorithm=Json<br>cn<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.server</span><span class=\"hljs-selector-class\">.service</span>.HelloService=cn<span class=\"hljs-selector-class\">.itcast</span><span class=\"hljs-selector-class\">.server</span><span class=\"hljs-selector-class\">.service</span>.HelloServiceImpl<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2）服务器-handler\"><a href=\"#2）服务器-handler\" class=\"headerlink\" title=\"2）服务器 handler\"></a>2）服务器 handler</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcRequestMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;RpcRequestMessage&gt; &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, RpcRequestMessage message)</span> &#123;<br>        <span class=\"hljs-type\">RpcResponseMessage</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcResponseMessage</span>();<br>        response.setSequenceId(message.getSequenceId());<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 获取真正的实现对象</span><br>            <span class=\"hljs-type\">HelloService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> (HelloService)<br>                    ServicesFactory.getService(Class.forName(message.getInterfaceName()));<br>            <br>            <span class=\"hljs-comment\">// 获取要调用的方法</span><br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">method</span> <span class=\"hljs-operator\">=</span> service.getClass().getMethod(message.getMethodName(), message.getParameterTypes());<br>            <br>            <span class=\"hljs-comment\">// 调用方法</span><br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">invoke</span> <span class=\"hljs-operator\">=</span> method.invoke(service, message.getParameterValue());<br>            <span class=\"hljs-comment\">// 调用成功</span><br>            response.setReturnValue(invoke);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class=\"hljs-comment\">// 调用异常</span><br>            response.setExceptionValue(e);<br>        &#125;<br>        <span class=\"hljs-comment\">// 返回结果</span><br>        ctx.writeAndFlush(response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"3）客户端代码第一版\"><a href=\"#3）客户端代码第一版\" class=\"headerlink\" title=\"3）客户端代码第一版\"></a>3）客户端代码第一版</h4><p>只发消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcClient</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <span class=\"hljs-type\">RpcResponseMessageHandler</span> <span class=\"hljs-variable\">RPC_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(group);<br>            bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(RPC_HANDLER);<br>                &#125;<br>            &#125;);<br>            <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br><br>            <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">future</span> <span class=\"hljs-operator\">=</span> channel.writeAndFlush(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcRequestMessage</span>(<br>                    <span class=\"hljs-number\">1</span>,<br>                    <span class=\"hljs-string\">&quot;cn.itcast.server.service.HelloService&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;sayHello&quot;</span>,<br>                    String.class,<br>                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;String.class&#125;,<br>                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[]&#123;<span class=\"hljs-string\">&quot;张三&quot;</span>&#125;<br>            )).addListener(promise -&gt; &#123;<br>                <span class=\"hljs-keyword\">if</span> (!promise.isSuccess()) &#123;<br>                    <span class=\"hljs-type\">Throwable</span> <span class=\"hljs-variable\">cause</span> <span class=\"hljs-operator\">=</span> promise.cause();<br>                    log.error(<span class=\"hljs-string\">&quot;error&quot;</span>, cause);<br>                &#125;<br>            &#125;);<br><br>            channel.closeFuture().sync();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4）客户端-handler-第一版\"><a href=\"#4）客户端-handler-第一版\" class=\"headerlink\" title=\"4）客户端 handler 第一版\"></a>4）客户端 handler 第一版</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;RpcResponseMessage&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, RpcResponseMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"5）客户端代码-第二版\"><a href=\"#5）客户端代码-第二版\" class=\"headerlink\" title=\"5）客户端代码 第二版\"></a>5）客户端代码 第二版</h4><p>包括 channel 管理，代理，接收结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcClientManager</span> &#123;<br><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">HelloService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> getProxyService(HelloService.class);<br>        System.out.println(service.sayHello(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>));<br><span class=\"hljs-comment\">//        System.out.println(service.sayHello(&quot;lisi&quot;));</span><br><span class=\"hljs-comment\">//        System.out.println(service.sayHello(&quot;wangwu&quot;));</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">// 创建代理类</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; T <span class=\"hljs-title function_\">getProxyService</span><span class=\"hljs-params\">(Class&lt;T&gt; serviceClass)</span> &#123;<br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">loader</span> <span class=\"hljs-operator\">=</span> serviceClass.getClassLoader();<br>        Class&lt;?&gt;[] interfaces = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]&#123;serviceClass&#125;;<br>        <span class=\"hljs-comment\">//                                                            sayHello  &quot;张三&quot;</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> Proxy.newProxyInstance(loader, interfaces, (proxy, method, args) -&gt; &#123;<br>            <span class=\"hljs-comment\">// 1. 将方法调用转换为 消息对象</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sequenceId</span> <span class=\"hljs-operator\">=</span> SequenceIdGenerator.nextId();<br>            <span class=\"hljs-type\">RpcRequestMessage</span> <span class=\"hljs-variable\">msg</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcRequestMessage</span>(<br>                    sequenceId,<br>                    serviceClass.getName(),<br>                    method.getName(),<br>                    method.getReturnType(),<br>                    method.getParameterTypes(),<br>                    args<br>            );<br>            <span class=\"hljs-comment\">// 2. 将消息对象发送出去</span><br>            getChannel().writeAndFlush(msg);<br><br>            <span class=\"hljs-comment\">// 3. 准备一个空 Promise 对象，来接收结果             指定 promise 对象异步接收结果线程</span><br>            DefaultPromise&lt;Object&gt; promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultPromise</span>&lt;&gt;(getChannel().eventLoop());<br>            RpcResponseMessageHandler.PROMISES.put(sequenceId, promise);<br><br><span class=\"hljs-comment\">//            promise.addListener(future -&gt; &#123;</span><br><span class=\"hljs-comment\">//                // 线程</span><br><span class=\"hljs-comment\">//            &#125;);</span><br><br>            <span class=\"hljs-comment\">// 4. 等待 promise 结果</span><br>            promise.await();<br>            <span class=\"hljs-keyword\">if</span>(promise.isSuccess()) &#123;<br>                <span class=\"hljs-comment\">// 调用正常</span><br>                <span class=\"hljs-keyword\">return</span> promise.getNow();<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">// 调用失败</span><br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(promise.cause());<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> (T) o;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">LOCK</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br><br>    <span class=\"hljs-comment\">// 获取唯一的 channel 对象</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Channel <span class=\"hljs-title function_\">getChannel</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (channel != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> channel;<br>        &#125;<br>        <span class=\"hljs-keyword\">synchronized</span> (LOCK) &#123; <span class=\"hljs-comment\">//  t2</span><br>            <span class=\"hljs-keyword\">if</span> (channel != <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">// t1</span><br>                <span class=\"hljs-keyword\">return</span> channel;<br>            &#125;<br>            initChannel();<br>            <span class=\"hljs-keyword\">return</span> channel;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 初始化 channel 方法</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">NioEventLoopGroup</span> <span class=\"hljs-variable\">group</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioEventLoopGroup</span>();<br>        <span class=\"hljs-type\">LoggingHandler</span> <span class=\"hljs-variable\">LOGGING_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class=\"hljs-type\">MessageCodecSharable</span> <span class=\"hljs-variable\">MESSAGE_CODEC</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MessageCodecSharable</span>();<br>        <span class=\"hljs-type\">RpcResponseMessageHandler</span> <span class=\"hljs-variable\">RPC_HANDLER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span>();<br>        <span class=\"hljs-type\">Bootstrap</span> <span class=\"hljs-variable\">bootstrap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bootstrap</span>();<br>        bootstrap.channel(NioSocketChannel.class);<br>        bootstrap.group(group);<br>        bootstrap.handler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(SocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                ch.pipeline().addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProcotolFrameDecoder</span>());<br>                ch.pipeline().addLast(LOGGING_HANDLER);<br>                ch.pipeline().addLast(MESSAGE_CODEC);<br>                ch.pipeline().addLast(RPC_HANDLER);<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            channel = bootstrap.connect(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">8080</span>).sync().channel();<br>            channel.closeFuture().addListener(future -&gt; &#123;<br>                group.shutdownGracefully();<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            log.error(<span class=\"hljs-string\">&quot;client error&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"6）客户端-handler-第二版\"><a href=\"#6）客户端-handler-第二版\" class=\"headerlink\" title=\"6）客户端 handler 第二版\"></a>6）客户端 handler 第二版</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@ChannelHandler</span>.Sharable<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RpcResponseMessageHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleChannelInboundHandler</span>&lt;RpcResponseMessage&gt; &#123;<br><br>    <span class=\"hljs-comment\">//                       序号      用来接收结果的 promise 对象</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Map&lt;Integer, Promise&lt;Object&gt;&gt; PROMISES = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Override</span><br><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead0</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, RpcResponseMessage msg)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        log.debug(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, msg);<br>        <span class=\"hljs-comment\">// 拿到空的 promise</span><br>        Promise&lt;Object&gt; promise = PROMISES.remove(msg.getSequenceId());<br>        <span class=\"hljs-keyword\">if</span> (promise != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">returnValue</span> <span class=\"hljs-operator\">=</span> msg.getReturnValue();<br>            <span class=\"hljs-type\">Exception</span> <span class=\"hljs-variable\">exceptionValue</span> <span class=\"hljs-operator\">=</span> msg.getExceptionValue();<br>            <span class=\"hljs-keyword\">if</span>(exceptionValue != <span class=\"hljs-literal\">null</span>) &#123;<br>                promise.setFailure(exceptionValue);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                promise.setSuccess(returnValue);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"2-源码分析\"><a href=\"#2-源码分析\" class=\"headerlink\" title=\"2. 源码分析\"></a>2. 源码分析</h2><h3 id=\"2-1-启动剖析\"><a href=\"#2-1-启动剖析\" class=\"headerlink\" title=\"2.1 启动剖析\"></a>2.1 启动剖析</h3><p>我们就来看看 netty 中对下面的代码是怎样进行处理的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//1 netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector</span><br><span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> Selector.open(); <br><br><span class=\"hljs-comment\">//2 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config</span><br><span class=\"hljs-type\">NioServerSocketChannel</span> <span class=\"hljs-variable\">attachment</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NioServerSocketChannel</span>();<br><br><span class=\"hljs-comment\">//3 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel</span><br><span class=\"hljs-type\">ServerSocketChannel</span> <span class=\"hljs-variable\">serverSocketChannel</span> <span class=\"hljs-operator\">=</span> ServerSocketChannel.open(); <br>serverSocketChannel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br><br><span class=\"hljs-comment\">//4 启动 nio boss 线程执行接下来的操作</span><br><br><span class=\"hljs-comment\">//5 注册（仅关联 selector 和 NioServerSocketChannel），未关注事件</span><br><span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">selectionKey</span> <span class=\"hljs-operator\">=</span> serverSocketChannel.register(selector, <span class=\"hljs-number\">0</span>, attachment);<br><br><span class=\"hljs-comment\">//6 head -&gt; 初始化器 -&gt; ServerBootstrapAcceptor -&gt; tail，初始化器是一次性的，只为添加 acceptor</span><br><br><span class=\"hljs-comment\">//7 绑定端口</span><br>serverSocketChannel.bind(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InetSocketAddress</span>(<span class=\"hljs-number\">8080</span>));<br><br><span class=\"hljs-comment\">//8 触发 channel active 事件，在 head 中关注 op_accept 事件</span><br>selectionKey.interestOps(SelectionKey.OP_ACCEPT);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>入口 <code>io.netty.bootstrap.ServerBootstrap#bind</code></p>\n<p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#doBind</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> ChannelFuture <span class=\"hljs-title function_\">doBind</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> SocketAddress localAddress)</span> &#123;<br>\t<span class=\"hljs-comment\">// 1. 执行初始化和注册 regFuture 会由 initAndRegister 设置其是否完成，从而回调 3.2 处代码</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">regFuture</span> <span class=\"hljs-operator\">=</span> initAndRegister();<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> regFuture.channel();<br>    <span class=\"hljs-keyword\">if</span> (regFuture.cause() != <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> regFuture;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 2. 因为是 initAndRegister 异步执行，需要分两种情况来看，调试时也需要通过 suspend 断点类型加以区分</span><br>    <span class=\"hljs-comment\">// 2.1 如果已经完成</span><br>    <span class=\"hljs-keyword\">if</span> (regFuture.isDone()) &#123;<br>        <span class=\"hljs-type\">ChannelPromise</span> <span class=\"hljs-variable\">promise</span> <span class=\"hljs-operator\">=</span> channel.newPromise();<br>        <span class=\"hljs-comment\">// 3.1 立刻调用 doBind0</span><br>        doBind0(regFuture, channel, localAddress, promise);<br>        <span class=\"hljs-keyword\">return</span> promise;<br>    &#125; <br>    <span class=\"hljs-comment\">// 2.2 还没有完成</span><br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">PendingRegistrationPromise</span> <span class=\"hljs-variable\">promise</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PendingRegistrationPromise</span>(channel);<br>        <span class=\"hljs-comment\">// 3.2 回调 doBind0</span><br>        regFuture.addListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelFutureListener</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                <span class=\"hljs-type\">Throwable</span> <span class=\"hljs-variable\">cause</span> <span class=\"hljs-operator\">=</span> future.cause();<br>                <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">// 处理异常...</span><br>                    promise.setFailure(cause);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    promise.registered();<br>\t\t\t\t\t<span class=\"hljs-comment\">// 3. 由注册线程去执行 doBind0</span><br>                    doBind0(regFuture, channel, localAddress, promise);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> promise;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#initAndRegister</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> ChannelFuture <span class=\"hljs-title function_\">initAndRegister</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        channel = channelFactory.newChannel();<br>        <span class=\"hljs-comment\">// 1.1 初始化 - 做的事就是添加一个初始化器 ChannelInitializer</span><br>        init(channel);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-comment\">// 处理异常...</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultChannelPromise</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FailedChannel</span>(), GlobalEventExecutor.INSTANCE).setFailure(t);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 1.2 注册 - 做的事就是将原生 channel 注册到 selector 上</span><br>    <span class=\"hljs-type\">ChannelFuture</span> <span class=\"hljs-variable\">regFuture</span> <span class=\"hljs-operator\">=</span> config().group().register(channel);<br>    <span class=\"hljs-keyword\">if</span> (regFuture.cause() != <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-comment\">// 处理异常...</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> regFuture;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.bootstrap.ServerBootstrap#init</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 这里 channel 实际上是 NioServerSocketChannel</span><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">init</span><span class=\"hljs-params\">(Channel channel)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-keyword\">final</span> Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0();<br>    <span class=\"hljs-keyword\">synchronized</span> (options) &#123;<br>        setChannelOptions(channel, options, logger);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">final</span> Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0();<br>    <span class=\"hljs-keyword\">synchronized</span> (attrs) &#123;<br>        <span class=\"hljs-keyword\">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) &#123;<br>            <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey();<br>            channel.attr(key).set(e.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> channel.pipeline();<br><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">EventLoopGroup</span> <span class=\"hljs-variable\">currentChildGroup</span> <span class=\"hljs-operator\">=</span> childGroup;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelHandler</span> <span class=\"hljs-variable\">currentChildHandler</span> <span class=\"hljs-operator\">=</span> childHandler;<br>    <span class=\"hljs-keyword\">final</span> Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] currentChildOptions;<br>    <span class=\"hljs-keyword\">final</span> Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] currentChildAttrs;<br>    <span class=\"hljs-keyword\">synchronized</span> (childOptions) &#123;<br>        currentChildOptions = childOptions.entrySet().toArray(newOptionArray(<span class=\"hljs-number\">0</span>));<br>    &#125;<br>    <span class=\"hljs-keyword\">synchronized</span> (childAttrs) &#123;<br>        currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(<span class=\"hljs-number\">0</span>));<br>    &#125;<br>\t<br>    <span class=\"hljs-comment\">// 为 NioServerSocketChannel 添加初始化器</span><br>    p.addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Channel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">pipeline</span> <span class=\"hljs-operator\">=</span> ch.pipeline();<br>            <span class=\"hljs-type\">ChannelHandler</span> <span class=\"hljs-variable\">handler</span> <span class=\"hljs-operator\">=</span> config.handler();<br>            <span class=\"hljs-keyword\">if</span> (handler != <span class=\"hljs-literal\">null</span>) &#123;<br>                pipeline.addLast(handler);<br>            &#125;<br><br>            <span class=\"hljs-comment\">// 初始化器的职责是将 ServerBootstrapAcceptor 加入至 NioServerSocketChannel</span><br>            ch.eventLoop().execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                    pipeline.addLast(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerBootstrapAcceptor</span>(<br>                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#register</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(EventLoop eventLoop, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-comment\">// 一些检查，略...</span><br><br>    AbstractChannel.<span class=\"hljs-built_in\">this</span>.eventLoop = eventLoop;<br><br>    <span class=\"hljs-keyword\">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 首次执行 execute 方法时，会启动 nio 线程，之后注册等操作在 nio 线程上执行</span><br>            <span class=\"hljs-comment\">// 因为只有一个 NioServerSocketChannel 因此，也只会有一个 boss nio 线程</span><br>            <span class=\"hljs-comment\">// 这行代码完成的事实是 main -&gt; nio boss 线程的切换</span><br>            eventLoop.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            <span class=\"hljs-comment\">// 日志记录...</span><br>            closeForcibly();<br>            closeFuture.setClosed();<br>            safeSetFailure(promise, t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>io.netty.channel.AbstractChannel.AbstractUnsafe#register0</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register0</span><span class=\"hljs-params\">(ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">firstRegistration</span> <span class=\"hljs-operator\">=</span> neverRegistered;<br>        <span class=\"hljs-comment\">// 1.2.1 原生的 nio channel 绑定到 selector 上，注意此时没有注册 selector 关注事件，附件为 NioServerSocketChannel</span><br>        doRegister();<br>        neverRegistered = <span class=\"hljs-literal\">false</span>;<br>        registered = <span class=\"hljs-literal\">true</span>;<br><br>        <span class=\"hljs-comment\">// 1.2.2 执行 NioServerSocketChannel 初始化器的 initChannel</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br><br>        <span class=\"hljs-comment\">// 回调 3.2 io.netty.bootstrap.AbstractBootstrap#doBind0</span><br>        safeSetSuccess(promise);<br>        pipeline.fireChannelRegistered();<br>        <br>        <span class=\"hljs-comment\">// 对应 server socket channel 还未绑定，isActive 为 false</span><br>        <span class=\"hljs-keyword\">if</span> (isActive()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (firstRegistration) &#123;<br>                pipeline.fireChannelActive();<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (config().isAutoRead()) &#123;<br>                beginRead();<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-comment\">// Close the channel directly to avoid FD leak.</span><br>        closeForcibly();<br>        closeFuture.setClosed();<br>        safeSetFailure(promise, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.channel.ChannelInitializer#initChannel</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">initChannel</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-keyword\">if</span> (initMap.add(ctx)) &#123; <span class=\"hljs-comment\">// Guard against re-entrance.</span><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 1.2.2.1 执行初始化</span><br>            initChannel((C) ctx.channel());<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable cause) &#123;<br>            exceptionCaught(ctx, cause);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            <span class=\"hljs-comment\">// 1.2.2.2 移除初始化器</span><br>            <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">pipeline</span> <span class=\"hljs-operator\">=</span> ctx.pipeline();<br>            <span class=\"hljs-keyword\">if</span> (pipeline.context(<span class=\"hljs-built_in\">this</span>) != <span class=\"hljs-literal\">null</span>) &#123;<br>                pipeline.remove(<span class=\"hljs-built_in\">this</span>);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#doBind0</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 3.1 或 3.2 执行 doBind0</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doBind0</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">        <span class=\"hljs-keyword\">final</span> ChannelFuture regFuture, <span class=\"hljs-keyword\">final</span> Channel channel,</span><br><span class=\"hljs-params\">        <span class=\"hljs-keyword\">final</span> SocketAddress localAddress, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br><br>    channel.eventLoop().execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (regFuture.isSuccess()) &#123;<br>                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                promise.setFailure(regFuture.cause());<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#bind</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bind</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> SocketAddress localAddress, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br>    assertEventLoop();<br><br>    <span class=\"hljs-keyword\">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (Boolean.TRUE.equals(config().getOption(ChannelOption.SO_BROADCAST)) &amp;&amp;<br>        localAddress <span class=\"hljs-keyword\">instanceof</span> InetSocketAddress &amp;&amp;<br>        !((InetSocketAddress) localAddress).getAddress().isAnyLocalAddress() &amp;&amp;<br>        !PlatformDependent.isWindows() &amp;&amp; !PlatformDependent.maybeSuperUser()) &#123;<br>        <span class=\"hljs-comment\">// 记录日志...</span><br>    &#125;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">wasActive</span> <span class=\"hljs-operator\">=</span> isActive();<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 3.3 执行端口绑定</span><br>        doBind(localAddress);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        safeSetFailure(promise, t);<br>        closeIfClosed();<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (!wasActive &amp;&amp; isActive()) &#123;<br>        invokeLater(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                <span class=\"hljs-comment\">// 3.4 触发 active 事件</span><br>                pipeline.fireChannelActive();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    safeSetSuccess(promise);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.3 关键代码 <code>io.netty.channel.socket.nio.NioServerSocketChannel#doBind</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doBind</span><span class=\"hljs-params\">(SocketAddress localAddress)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-keyword\">if</span> (PlatformDependent.javaVersion() &gt;= <span class=\"hljs-number\">7</span>) &#123;<br>        javaChannel().bind(localAddress, config.getBacklog());<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        javaChannel().socket().bind(localAddress, config.getBacklog());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.4 关键代码 <code>io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>    ctx.fireChannelActive();<br>\t<span class=\"hljs-comment\">// 触发 read (NioServerSocketChannel 上的 read 不是读取数据，只是为了触发 channel 的事件注册)</span><br>    readIfIsAutoRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关键代码 <code>io.netty.channel.nio.AbstractNioChannel#doBeginRead</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doBeginRead</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-comment\">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">selectionKey</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.selectionKey;<br>    <span class=\"hljs-keyword\">if</span> (!selectionKey.isValid()) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    readPending = <span class=\"hljs-literal\">true</span>;<br><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">interestOps</span> <span class=\"hljs-operator\">=</span> selectionKey.interestOps();<br>    <span class=\"hljs-comment\">// readInterestOp 取值是 16，在 NioServerSocketChannel 创建时初始化好，代表关注 accept 事件</span><br>    <span class=\"hljs-keyword\">if</span> ((interestOps &amp; readInterestOp) == <span class=\"hljs-number\">0</span>) &#123;<br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-NioEventLoop-剖析\"><a href=\"#2-2-NioEventLoop-剖析\" class=\"headerlink\" title=\"2.2 NioEventLoop 剖析\"></a>2.2 NioEventLoop 剖析</h3><p>NioEventLoop 线程不仅要处理 IO 事件，还要处理 Task（包括普通任务和定时任务），</p>\n<p>提交任务代码 <code>io.netty.util.concurrent.SingleThreadEventExecutor#execute</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">execute</span><span class=\"hljs-params\">(Runnable task)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (task == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NullPointerException</span>(<span class=\"hljs-string\">&quot;task&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">inEventLoop</span> <span class=\"hljs-operator\">=</span> inEventLoop();<br>    <span class=\"hljs-comment\">// 添加任务，其中队列使用了 jctools 提供的 mpsc 无锁队列</span><br>    addTask(task);<br>    <span class=\"hljs-keyword\">if</span> (!inEventLoop) &#123;<br>        <span class=\"hljs-comment\">// inEventLoop 如果为 false 表示由其它线程来调用 execute，即首次调用，这时需要向 eventLoop 提交首个任务，启动死循环，会执行到下面的 doStartThread</span><br>        startThread();<br>        <span class=\"hljs-keyword\">if</span> (isShutdown()) &#123;<br>            <span class=\"hljs-comment\">// 如果已经 shutdown，做拒绝逻辑，代码略...</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (!addTaskWakesUp &amp;&amp; wakesUpForTask(task)) &#123;<br>        <span class=\"hljs-comment\">// 如果线程由于 IO select 阻塞了，添加的任务的线程需要负责唤醒 NioEventLoop 线程</span><br>        wakeup(inEventLoop);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>唤醒 select 阻塞线程<code>io.netty.channel.nio.NioEventLoop#wakeup</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">wakeup</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> inEventLoop)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (!inEventLoop &amp;&amp; wakenUp.compareAndSet(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>)) &#123;<br>        selector.wakeup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>启动 EventLoop 主循环 <code>io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doStartThread</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">assert</span> thread == <span class=\"hljs-literal\">null</span>;<br>    executor.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-comment\">// 将线程池的当前线程保存在成员变量中，以便后续使用</span><br>            thread = Thread.currentThread();<br>            <span class=\"hljs-keyword\">if</span> (interrupted) &#123;<br>                thread.interrupt();<br>            &#125;<br><br>            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">success</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>            updateLastExecutionTime();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// 调用外部类 SingleThreadEventExecutor 的 run 方法，进入死循环，run 方法见下</span><br>                SingleThreadEventExecutor.<span class=\"hljs-built_in\">this</span>.run();<br>                success = <span class=\"hljs-literal\">true</span>;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>                logger.warn(<span class=\"hljs-string\">&quot;Unexpected exception from an event executor: &quot;</span>, t);<br>            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// 清理工作，代码略...</span><br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>io.netty.channel.nio.NioEventLoop#run</code> 主要任务是执行死循环，不断看有没有新任务，有没有 IO 事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// calculateStrategy 的逻辑如下：</span><br>                <span class=\"hljs-comment\">// 有任务，会执行一次 selectNow，清除上一次的 wakeup 结果，无论有没有 IO 事件，都会跳过 switch</span><br>                <span class=\"hljs-comment\">// 没有任务，会匹配 SelectStrategy.SELECT，看是否应当阻塞</span><br>                <span class=\"hljs-keyword\">switch</span> (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123;<br>                    <span class=\"hljs-keyword\">case</span> SelectStrategy.CONTINUE:<br>                        <span class=\"hljs-keyword\">continue</span>;<br><br>                    <span class=\"hljs-keyword\">case</span> SelectStrategy.BUSY_WAIT:<br><br>                    <span class=\"hljs-keyword\">case</span> SelectStrategy.SELECT:<br>                        <span class=\"hljs-comment\">// 因为 IO 线程和提交任务线程都有可能执行 wakeup，而 wakeup 属于比较昂贵的操作，因此使用了一个原子布尔对象 wakenUp，它取值为 true 时，表示该由当前线程唤醒</span><br>                        <span class=\"hljs-comment\">// 进行 select 阻塞，并设置唤醒状态为 false</span><br>                        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">oldWakenUp</span> <span class=\"hljs-operator\">=</span> wakenUp.getAndSet(<span class=\"hljs-literal\">false</span>);<br>                        <br>                        <span class=\"hljs-comment\">// 如果在这个位置，非 EventLoop 线程抢先将 wakenUp 置为 true，并 wakeup</span><br>                        <span class=\"hljs-comment\">// 下面的 select 方法不会阻塞</span><br>                        <span class=\"hljs-comment\">// 等 runAllTasks 处理完成后，到再循环进来这个阶段新增的任务会不会及时执行呢?</span><br>                        <span class=\"hljs-comment\">// 因为 oldWakenUp 为 true，因此下面的 select 方法就会阻塞，直到超时</span><br>                        <span class=\"hljs-comment\">// 才能执行，让 select 方法无谓阻塞</span><br>                        select(oldWakenUp);<br><br>                        <span class=\"hljs-keyword\">if</span> (wakenUp.get()) &#123;<br>                            selector.wakeup();<br>                        &#125;<br>                    <span class=\"hljs-keyword\">default</span>:<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                rebuildSelector0();<br>                handleLoopException(e);<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br><br>            cancelledKeys = <span class=\"hljs-number\">0</span>;<br>            needsToSelectAgain = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-comment\">// ioRatio 默认是 50</span><br>            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ioRatio</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.ioRatio;<br>            <span class=\"hljs-keyword\">if</span> (ioRatio == <span class=\"hljs-number\">100</span>) &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    processSelectedKeys();<br>                &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                    <span class=\"hljs-comment\">// ioRatio 为 100 时，总是运行完所有非 IO 任务</span><br>                    runAllTasks();<br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;                <br>                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ioStartTime</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    processSelectedKeys();<br>                &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                    <span class=\"hljs-comment\">// 记录 io 事件处理耗时</span><br>                    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ioTime</span> <span class=\"hljs-operator\">=</span> System.nanoTime() - ioStartTime;<br>                    <span class=\"hljs-comment\">// 运行非 IO 任务，一旦超时会退出 runAllTasks</span><br>                    runAllTasks(ioTime * (<span class=\"hljs-number\">100</span> - ioRatio) / ioRatio);<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            handleLoopException(t);<br>        &#125;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (isShuttingDown()) &#123;<br>                closeAll();<br>                <span class=\"hljs-keyword\">if</span> (confirmShutdown()) &#123;<br>                    <span class=\"hljs-keyword\">return</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            handleLoopException(t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"⚠️-注意\"><a href=\"#⚠️-注意\" class=\"headerlink\" title=\"⚠️ 注意\"></a>⚠️ 注意</h4><blockquote>\n<p>这里有个费解的地方就是 wakeup，它既可以由提交任务的线程来调用（比较好理解），也可以由 EventLoop 线程来调用（比较费解），这里要知道 wakeup 方法的效果：</p>\n<ul>\n<li>由非 EventLoop 线程调用，会唤醒当前在执行 select 阻塞的 EventLoop 线程</li>\n<li>由 EventLoop 自己调用，会本次的 wakeup 会取消下一次的 select 操作</li>\n</ul>\n</blockquote>\n<p>参考下图</p>\n<img src=\"img/0032.png\"  />\n\n\n\n<p><code>io.netty.channel.nio.NioEventLoop#select</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">select</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> oldWakenUp)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">Selector</span> <span class=\"hljs-variable\">selector</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.selector;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">selectCnt</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">currentTimeNanos</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>        <span class=\"hljs-comment\">// 计算等待时间</span><br>        <span class=\"hljs-comment\">// * 没有 scheduledTask，超时时间为 1s</span><br>        <span class=\"hljs-comment\">// * 有 scheduledTask，超时时间为 `下一个定时任务执行时间 - 当前时间`</span><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">selectDeadLineNanos</span> <span class=\"hljs-operator\">=</span> currentTimeNanos + delayNanos(currentTimeNanos);<br><br>        <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">timeoutMillis</span> <span class=\"hljs-operator\">=</span> (selectDeadLineNanos - currentTimeNanos + <span class=\"hljs-number\">500000L</span>) / <span class=\"hljs-number\">1000000L</span>;<br>            <span class=\"hljs-comment\">// 如果超时，退出循环</span><br>            <span class=\"hljs-keyword\">if</span> (timeoutMillis &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>                <span class=\"hljs-keyword\">if</span> (selectCnt == <span class=\"hljs-number\">0</span>) &#123;<br>                    selector.selectNow();<br>                    selectCnt = <span class=\"hljs-number\">1</span>;<br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            <span class=\"hljs-comment\">// 如果期间又有 task 退出循环，如果没这个判断，那么任务就会等到下次 select 超时时才能被执行</span><br>            <span class=\"hljs-comment\">// wakenUp.compareAndSet(false, true) 是让非 NioEventLoop 不必再执行 wakeup</span><br>            <span class=\"hljs-keyword\">if</span> (hasTasks() &amp;&amp; wakenUp.compareAndSet(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>)) &#123;<br>                selector.selectNow();<br>                selectCnt = <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            <span class=\"hljs-comment\">// select 有限时阻塞</span><br>            <span class=\"hljs-comment\">// 注意 nio 有 bug，当 bug 出现时，select 方法即使没有时间发生，也不会阻塞住，导致不断空轮询，cpu 占用 100%</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">selectedKeys</span> <span class=\"hljs-operator\">=</span> selector.select(timeoutMillis);<br>            <span class=\"hljs-comment\">// 计数加 1</span><br>            selectCnt ++;<br><br>            <span class=\"hljs-comment\">// 醒来后，如果有 IO 事件、或是由非 EventLoop 线程唤醒，或者有任务，退出循环</span><br>            <span class=\"hljs-keyword\">if</span> (selectedKeys != <span class=\"hljs-number\">0</span> || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (Thread.interrupted()) &#123;<br>               \t<span class=\"hljs-comment\">// 线程被打断，退出循环</span><br>                <span class=\"hljs-comment\">// 记录日志</span><br>                selectCnt = <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">time</span> <span class=\"hljs-operator\">=</span> System.nanoTime();<br>            <span class=\"hljs-keyword\">if</span> (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) &gt;= currentTimeNanos) &#123;<br>                <span class=\"hljs-comment\">// 如果超时，计数重置为 1，下次循环就会 break</span><br>                selectCnt = <span class=\"hljs-number\">1</span>;<br>            &#125; <br>            <span class=\"hljs-comment\">// 计数超过阈值，由 io.netty.selectorAutoRebuildThreshold 指定，默认 512</span><br>            <span class=\"hljs-comment\">// 这是为了解决 nio 空轮询 bug</span><br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (SELECTOR_AUTO_REBUILD_THRESHOLD &gt; <span class=\"hljs-number\">0</span> &amp;&amp;<br>                    selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) &#123;<br>                <span class=\"hljs-comment\">// 重建 selector</span><br>                selector = selectRebuildSelector(selectCnt);<br>                selectCnt = <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            currentTimeNanos = time;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (selectCnt &gt; MIN_PREMATURE_SELECTOR_RETURNS) &#123;<br>            <span class=\"hljs-comment\">// 记录日志</span><br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException e) &#123;<br>        <span class=\"hljs-comment\">// 记录日志</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>处理 keys <code>io.netty.channel.nio.NioEventLoop#processSelectedKeys</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processSelectedKeys</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (selectedKeys != <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-comment\">// 通过反射将 Selector 实现类中的就绪事件集合替换为 SelectedSelectionKeySet </span><br>        <span class=\"hljs-comment\">// SelectedSelectionKeySet 底层为数组实现，可以提高遍历性能（原本为 HashSet）</span><br>        processSelectedKeysOptimized();<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        processSelectedKeysPlain(selector.selectedKeys());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>io.netty.channel.nio.NioEventLoop#processSelectedKey</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processSelectedKey</span><span class=\"hljs-params\">(SelectionKey k, AbstractNioChannel ch)</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> AbstractNioChannel.<span class=\"hljs-type\">NioUnsafe</span> <span class=\"hljs-variable\">unsafe</span> <span class=\"hljs-operator\">=</span> ch.unsafe();<br>    <span class=\"hljs-comment\">// 当 key 取消或关闭时会导致这个 key 无效</span><br>    <span class=\"hljs-keyword\">if</span> (!k.isValid()) &#123;<br>        <span class=\"hljs-comment\">// 无效时处理...</span><br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">readyOps</span> <span class=\"hljs-operator\">=</span> k.readyOps();<br>        <span class=\"hljs-comment\">// 连接事件</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; SelectionKey.OP_CONNECT) != <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ops</span> <span class=\"hljs-operator\">=</span> k.interestOps();<br>            ops &amp;= ~SelectionKey.OP_CONNECT;<br>            k.interestOps(ops);<br><br>            unsafe.finishConnect();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 可写事件</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; SelectionKey.OP_WRITE) != <span class=\"hljs-number\">0</span>) &#123;<br>            ch.unsafe().forceFlush();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 可读或可接入事件</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"hljs-number\">0</span> || readyOps == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 如果是可接入 io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read</span><br>            <span class=\"hljs-comment\">// 如果是可读 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read</span><br>            unsafe.read();<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException ignored) &#123;<br>        unsafe.close(unsafe.voidPromise());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-accept-剖析\"><a href=\"#2-3-accept-剖析\" class=\"headerlink\" title=\"2.3 accept 剖析\"></a>2.3 accept 剖析</h3><p>nio 中如下代码，在 netty 中的流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//1 阻塞直到事件发生</span><br>selector.select();<br><br>Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();<br><span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;    <br>    <span class=\"hljs-comment\">//2 拿到一个事件</span><br>    <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> iter.next();<br>    <br>    <span class=\"hljs-comment\">//3 如果是 accept 事件</span><br>    <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>        <br>        <span class=\"hljs-comment\">//4 执行 accept</span><br>        <span class=\"hljs-type\">SocketChannel</span> <span class=\"hljs-variable\">channel</span> <span class=\"hljs-operator\">=</span> serverSocketChannel.accept();<br>        channel.configureBlocking(<span class=\"hljs-literal\">false</span>);<br>        <br>        <span class=\"hljs-comment\">//5 关注 read 事件</span><br>        channel.register(selector, SelectionKey.OP_READ);<br>    &#125;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>先来看可接入事件处理（accept）</p>\n<p><code>io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">read</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">eventLoop</span><span class=\"hljs-params\">()</span>.inEventLoop();<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelConfig</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> config();<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">pipeline</span> <span class=\"hljs-operator\">=</span> pipeline();    <br>    <span class=\"hljs-keyword\">final</span> RecvByteBufAllocator.<span class=\"hljs-type\">Handle</span> <span class=\"hljs-variable\">allocHandle</span> <span class=\"hljs-operator\">=</span> unsafe().recvBufAllocHandle();<br>    allocHandle.reset(config);<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">closed</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-type\">Throwable</span> <span class=\"hljs-variable\">exception</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">do</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// doReadMessages 中执行了 accept 并创建 NioSocketChannel 作为消息放入 readBuf</span><br>                <span class=\"hljs-comment\">// readBuf 是一个 ArrayList 用来缓存消息</span><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">localRead</span> <span class=\"hljs-operator\">=</span> doReadMessages(readBuf);<br>                <span class=\"hljs-keyword\">if</span> (localRead == <span class=\"hljs-number\">0</span>) &#123;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>                <span class=\"hljs-keyword\">if</span> (localRead &lt; <span class=\"hljs-number\">0</span>) &#123;<br>                    closed = <span class=\"hljs-literal\">true</span>;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>\t\t\t\t<span class=\"hljs-comment\">// localRead 为 1，就一条消息，即接收一个客户端连接</span><br>                allocHandle.incMessagesRead(localRead);<br>            &#125; <span class=\"hljs-keyword\">while</span> (allocHandle.continueReading());<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            exception = t;<br>        &#125;<br><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> readBuf.size();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i ++) &#123;<br>            readPending = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-comment\">// 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理</span><br>            <span class=\"hljs-comment\">// io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead</span><br>            pipeline.fireChannelRead(readBuf.get(i));<br>        &#125;<br>        readBuf.clear();<br>        allocHandle.readComplete();<br>        pipeline.fireChannelReadComplete();<br><br>        <span class=\"hljs-keyword\">if</span> (exception != <span class=\"hljs-literal\">null</span>) &#123;<br>            closed = closeOnReadError(exception);<br><br>            pipeline.fireExceptionCaught(exception);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (closed) &#123;<br>            inputShutdown = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">if</span> (isOpen()) &#123;<br>                close(voidPromise());<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>关键代码 <code>io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>    <span class=\"hljs-comment\">// 这时的 msg 是 NioSocketChannel</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Channel</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> (Channel) msg;<br><br>    <span class=\"hljs-comment\">// NioSocketChannel 添加  childHandler 即初始化器</span><br>    child.pipeline().addLast(childHandler);<br><br>    <span class=\"hljs-comment\">// 设置选项</span><br>    setChannelOptions(child, childOptions, logger);<br><br>    <span class=\"hljs-keyword\">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;<br>        child.attr((AttributeKey&lt;Object&gt;) e.getKey()).set(e.getValue());<br>    &#125;<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 注册 NioSocketChannel 到 nio worker 线程，接下来的处理也移交至 nio worker 线程</span><br>        childGroup.register(child).addListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChannelFutureListener</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>                <span class=\"hljs-keyword\">if</span> (!future.isSuccess()) &#123;<br>                    forceClose(child, future.cause());<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        forceClose(child, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>又回到了熟悉的 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#register</code>  方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(EventLoop eventLoop, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-comment\">// 一些检查，略...</span><br><br>    AbstractChannel.<span class=\"hljs-built_in\">this</span>.eventLoop = eventLoop;<br><br>    <span class=\"hljs-keyword\">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 这行代码完成的事实是 nio boss -&gt; nio worker 线程的切换</span><br>            eventLoop.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            <span class=\"hljs-comment\">// 日志记录...</span><br>            closeForcibly();<br>            closeFuture.setClosed();<br>            safeSetFailure(promise, t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>io.netty.channel.AbstractChannel.AbstractUnsafe#register0</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register0</span><span class=\"hljs-params\">(ChannelPromise promise)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">firstRegistration</span> <span class=\"hljs-operator\">=</span> neverRegistered;<br>        doRegister();<br>        neverRegistered = <span class=\"hljs-literal\">false</span>;<br>        registered = <span class=\"hljs-literal\">true</span>;<br>\t\t<br>        <span class=\"hljs-comment\">// 执行初始化器，执行前 pipeline 中只有 head -&gt; 初始化器 -&gt; tail</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br>        <span class=\"hljs-comment\">// 执行后就是 head -&gt; logging handler -&gt; my handler -&gt; tail</span><br><br>        safeSetSuccess(promise);<br>        pipeline.fireChannelRegistered();<br>        <br>        <span class=\"hljs-keyword\">if</span> (isActive()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (firstRegistration) &#123;<br>                <span class=\"hljs-comment\">// 触发 pipeline 上 active 事件</span><br>                pipeline.fireChannelActive();<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (config().isAutoRead()) &#123;<br>                beginRead();<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        closeForcibly();<br>        closeFuture.setClosed();<br>        safeSetFailure(promise, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>回到了熟悉的代码 <code>io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> &#123;<br>    ctx.fireChannelActive();<br>\t<span class=\"hljs-comment\">// 触发 read (NioSocketChannel 这里 read，只是为了触发 channel 的事件注册，还未涉及数据读取)</span><br>    readIfIsAutoRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>io.netty.channel.nio.AbstractNioChannel#doBeginRead</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doBeginRead</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-comment\">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">SelectionKey</span> <span class=\"hljs-variable\">selectionKey</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.selectionKey;<br>    <span class=\"hljs-keyword\">if</span> (!selectionKey.isValid()) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    readPending = <span class=\"hljs-literal\">true</span>;<br>\t<span class=\"hljs-comment\">// 这时候 interestOps 是 0</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">interestOps</span> <span class=\"hljs-operator\">=</span> selectionKey.interestOps();<br>    <span class=\"hljs-keyword\">if</span> ((interestOps &amp; readInterestOp) == <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 关注 read 事件</span><br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-read-剖析\"><a href=\"#2-4-read-剖析\" class=\"headerlink\" title=\"2.4 read 剖析\"></a>2.4 read 剖析</h3><p>再来看可读事件 <code>io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read</code>，注意发送的数据未必能够一次读完，因此会触发多次 nio read 事件，一次事件内会触发多次 pipeline read，一次事件会触发一次 pipeline read complete</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">read</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelConfig</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> config();<br>    <span class=\"hljs-keyword\">if</span> (shouldBreakReadReady(config)) &#123;<br>        clearReadPending();<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ChannelPipeline</span> <span class=\"hljs-variable\">pipeline</span> <span class=\"hljs-operator\">=</span> pipeline();<br>    <span class=\"hljs-comment\">// io.netty.allocator.type 决定 allocator 的实现</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ByteBufAllocator</span> <span class=\"hljs-variable\">allocator</span> <span class=\"hljs-operator\">=</span> config.getAllocator();<br>    <span class=\"hljs-comment\">// 用来分配 byteBuf，确定单次读取大小</span><br>    <span class=\"hljs-keyword\">final</span> RecvByteBufAllocator.<span class=\"hljs-type\">Handle</span> <span class=\"hljs-variable\">allocHandle</span> <span class=\"hljs-operator\">=</span> recvBufAllocHandle();<br>    allocHandle.reset(config);<br><br>    <span class=\"hljs-type\">ByteBuf</span> <span class=\"hljs-variable\">byteBuf</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">close</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">do</span> &#123;<br>            byteBuf = allocHandle.allocate(allocator);<br>            <span class=\"hljs-comment\">// 读取</span><br>            allocHandle.lastBytesRead(doReadBytes(byteBuf));<br>            <span class=\"hljs-keyword\">if</span> (allocHandle.lastBytesRead() &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>                byteBuf.release();<br>                byteBuf = <span class=\"hljs-literal\">null</span>;<br>                close = allocHandle.lastBytesRead() &lt; <span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">if</span> (close) &#123;<br>                    readPending = <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            allocHandle.incMessagesRead(<span class=\"hljs-number\">1</span>);<br>            readPending = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-comment\">// 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理 NioSocketChannel 上的 handler</span><br>            pipeline.fireChannelRead(byteBuf);<br>            byteBuf = <span class=\"hljs-literal\">null</span>;<br>        &#125; <br>        <span class=\"hljs-comment\">// 是否要继续循环</span><br>        <span class=\"hljs-keyword\">while</span> (allocHandle.continueReading());<br><br>        allocHandle.readComplete();<br>        <span class=\"hljs-comment\">// 触发 read complete 事件</span><br>        pipeline.fireChannelReadComplete();<br><br>        <span class=\"hljs-keyword\">if</span> (close) &#123;<br>            closeOnRead(pipeline);<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        handleReadException(pipeline, byteBuf, t, close, allocHandle);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle#continueReading(io.netty.util.UncheckedBooleanSupplier)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">continueReading</span><span class=\"hljs-params\">(UncheckedBooleanSupplier maybeMoreDataSupplier)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <br>           <span class=\"hljs-comment\">// 一般为 true</span><br>           config.isAutoRead() &amp;&amp;<br>           <span class=\"hljs-comment\">// respectMaybeMoreData 默认为 true</span><br>           <span class=\"hljs-comment\">// maybeMoreDataSupplier 的逻辑是如果预期读取字节与实际读取字节相等，返回 true</span><br>           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &amp;&amp;<br>           <span class=\"hljs-comment\">// 小于最大次数，maxMessagePerRead 默认 16</span><br>           totalMessages &lt; maxMessagePerRead &amp;&amp;<br>           <span class=\"hljs-comment\">// 实际读到了数据</span><br>           totalBytesRead &gt; <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"dbRouter","date":"2023-05-10T13:54:57.000Z","_content":"\n当业务变得极其庞大的时候，原有的单表可能不足以维持业务的正常发展，此时就需要进行分库分表操作，来缓解数据库的压力\n<!-- more -->\n# dbRouter\n![image.png](01.png)\n## DBRouter.java\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE,ElementType.METHOD})\npublic @interface DBRouter {\n    String key () default \"\";\n}\n```\n**@Documented**是Java中的一个元注解，它用于指示被该注解修饰的注解是否会被包含在JavaDoc文档中。<br />具体来说，当一个注解添加了@Documented注解后，使用该注解修饰的类、方法或字段等等，在生成JavaDoc文档时，这些注解会被包含在文档中，并能够被文档工具展示出来。如果没有使用@Documented注解，则这些注解不会被包含在JavaDoc文档中。<br />举个例子，比如在编写自己的Java框架或库时，可能会定义一些自定义注解，这些注解可能是用来描述类、方法、参数等信息的，如果想让其他人更好地了解这些注解的作用以及如何使用它们，就可以为这些注解添加@Documented注解，这样在生成JavaDoc文档时，这些注解就可以被包含进去，方便用户查看和阅读。<br />因此，@Documented注解的作用就是告诉Java编译器，将被该注解修饰的注解包含在JavaDoc文档中，使得开发者可以更方便地了解和使用这些注解。\n\n**@Retention(RetentionPolicy.RUNTIME)** 是Java中的一个元注解，它用于指示被该注解修饰的注解的保留策略，即在什么时候该注解会失效。<br />具体来说，@Retention(RetentionPolicy.RUNTIME)表示被该注解修饰的注解会在运行时保留，并可以通过反射机制获取到。换句话说，如果没有使用@Retention(RetentionPolicy.RUNTIME)注解，则该注解修饰的注解会在编译时被丢弃，而无法在程序运行时获取到。<br />举个例子，假设我们定义了一个自定义注解@MyAnnotation，并希望在程序运行时能够通过反射获取到该注解的信息，例如注解的属性值等等。此时就需要为@MyAnnotation添加@Retention(RetentionPolicy.RUNTIME)注解，以便让该注解在运行时保持不变。<br />因此，@Retention(RetentionPolicy.RUNTIME)注解的作用是指定被该注解修饰的注解的保留策略为运行时保留，并且可以通过反射机制获取注解信息，这对于编写某些框架或库非常有用。\n\n**@Target({ElementType.TYPE, ElementType.METHOD})** 是Java中的一个元注解，用于指定被该注解修饰的注解可以应用的目标元素类型。<br />具体来说，@Target({ElementType.TYPE, ElementType.METHOD})表示被该注解修饰的注解可以应用在类、接口和枚举类型上，同时也可以应用在方法上。如果尝试将这个注解用于其他的目标元素类型，如属性、构造函数等，则会编译错误。<br />举个例子，假设我们定义了一个自定义注解@MyAnnotation，并希望让这个注解可以用于类、接口和枚举类型上，同时也可以用于方法上。此时就需要为@MyAnnotation添加@Target({ElementType.TYPE, ElementType.METHOD})注解，以便限制该注解的使用范围，避免出现不合理或者意外的情况。<br />因此，@Target({ElementType.TYPE, ElementType.METHOD})注解的作用是指定被该注解修饰的注解可以应用的目标元素类型，它可以限制注解的使用范围，使得注解的作用更加明确和准确。\n\n## DBContextHolder.java\n```java\npublic class DBContextHolder {\n    private final static ThreadLocal<String> dbKey = new ThreadLocal<>();\n    private final static ThreadLocal<String> tbKey = new ThreadLocal<>();\n    //get方法\n    public static String getDBKey() {\n        return dbKey.get();\n    }\n\n    public static String getTBKey() {\n        return tbKey.get();\n    }\n\n    //set方法\n    public static void setDBKey(String dbKeyIdx){\n        dbKey.set(dbKeyIdx);\n    }\n    public static void setTBKey(String tbKeyIdx){\n        tbKey.set(tbKeyIdx);\n    }\n    //清空key\n    public static void clearDBKey(){\n        dbKey.remove();\n    }\n\n    public static void clearTBKey(){\n        tbKey.remove();\n    }\n}\n```\n这个类是一个线程池上下文管理类，主要用来管理当前线程使用的数据库和表的名称。<br />具体来说，这个类中定义了两个ThreadLocal类型的静态变量：dbKey和tbKey。这两个变量分别用于存储当前线程使用的数据库名称和表名称，它们的值可以在应用程序运行时通过代码来设置或者获取。<br />通过使用这个类，我们可以在应用程序中动态切换数据库和表，而无需修改实际执行查询和操作的代码。例如，在某些情况下需要进行读写分离，可以在读操作前将dbKey设置为读库的名称，在写操作前将其设置为写库的名称；在某些情况下需要动态选择表名，可以先通过某种规则计算出表名，然后将其设置到tbKey中，再执行相关操作。<br />总之，DBContextHolder类的作用是提供一种机制，让应用程序可以动态地切换数据库和表，从而更加灵活地控制数据的访问和操作。该类通常会与其他数据源相关组件（如AbstractRoutingDataSource）配合使用，以实现多数据源或者动态数据源切换等功能。\n\n**remove()**方法是ThreadLocal类中的一个实例方法，用于将当前线程绑定的变量值删除。在DBContextHolder类中，clearDBKey()和clearTBKey()方法分别调用了dbKey.remove()和tbKey.remove()方法，用于清空当前线程绑定的数据库和表名称。<br />由于ThreadLocal对象通常是与线程一一对应的，因此使用remove()方法可以防止内存泄漏。如果不清除线程绑定的变量值，可能会出现以下情况之一：\n\n- 当前线程结束后，ThreadLocal对象仍然持有该变量的引用，导致该变量无法被GC回收，从而发生内存泄漏。\n- 由于线程池的复用机制，下一个使用该线程的任务可能会意外地继承上一个任务的线程绑定变量值，导致程序出现错误或者异常行为。\n\n因此，在使用ThreadLocal时，最好在不再需要使用线程绑定变量的时候调用remove()方法进行清理。在DBContextHolder类中，clearDBKey()和clearTBKey()方法的作用就是通过调用remove()方法来清空当前线程绑定的数据库和表名称，以便下一次使用线程时，这些变量的值不会影响到其他任务。\n\n## DynamicDataSource.java\n```java\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n    @Override\n    protected Object determineCurrentLookupKey() {\n    \treturn \"db\" + DBContextHolder.getDBKey();\n    }\n}\n```\n\nAbstractRoutingDataSource在Mybatis中引入了spring-jdbc依赖，所以不必刻意再次单独引入spring-jdbc依赖<br />**AbstractRoutingDataSource抽象类**<br />AbstractRoutingDataSource是Spring框架中的一个数据源类，它可以根据特定的规则动态切换应用程序连接到的数据源。<br />在某些应用程序中，需要使用多个数据库（例如：读写分离），此时就需要使用AbstractRoutingDataSource来实现动态切换数据源。通过继承AbstractRoutingDataSource类并实现determineCurrentLookupKey()方法，可以定义选择数据源的逻辑，例如基于线程上下文、基于请求参数、基于用户权限等。**当应用程序需要访问数据库时，Spring框架会自动调用determineCurrentLookupKey()方法获取当前要使用的数据源，然后将数据源交给JdbcTemplate或其他数据访问组件使用。**<br />因此，AbstractRoutingDataSource的作用是提供一种机制，让Spring应用程序可以基于运行时的条件选择不同的数据源，并且无需修改现有代码即可实现数据源的切换。\n## DataSourceAutoConfig.java\n```java\npackage com.tute.middleware.db.router.config;\n\nimport com.tute.middleware.db.router.DBRouterConfig;\nimport com.tute.middleware.db.router.dynamic.DynamicDataSource;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n* 2023/5/10\n**/\n\npublic class DataSourceAutoConfig implements EnvironmentAware {\n    private Map<String, Map<String,Object>> dataSourceMap = new HashMap<>();\n\n    private int dbCount; //数据库的数量\n    private int tbCount; //表的数量\n\n    @Bean\n    public DBRouterConfig dbRouterConfig(){\n        return new DBRouterConfig(dbCount,tbCount);\n    }\n\n    @Bean\n    public DataSource dataSource(){\n        // 创建数据源\n        Map<Object,Object> targetDataSource = new HashMap<>();\n        for (String dbInfo : dataSourceMap.keySet()) {\n            //根据外层Map的KeySet的key拿到内层的Map\n            Map<String, Object> objMap = dataSourceMap.get(dbInfo);\n            targetDataSource.put(dbInfo,new DriverManagerDataSource(\n                objMap.get(\"url\").toString(),\n                objMap.get(\"username\").toString(),\n                objMap.get(\"password\").toString()));\n        }\n        //设置数据源\n        DynamicDataSource dynamicDataSource = new DynamicDataSource();\n        dynamicDataSource.setTargetDataSources(targetDataSource);\n        /*\n        这行代码是将一个targetDataSource数据源对象设置为动态数据源dynamicDataSource的\n        目标数据源。在Spring中，通过DynamicDataSource和AbstractRoutingDataSource两个类的配合使用，\n        可以实现动态切换多个数据源。\n\t\t具体来说，DynamicDataSource是对AbstractRoutingDataSource的一\n        个扩展，它除了支持动态数据源的切换外，还支持针对不同的查询/操作类型选择不同的数据源。\n        setTargetDataSources()方法就是用于设置动态数据源的目标数据源的，\n        即将targetDataSource对象作为参数传递进去，表示该动态数据源会从targetDataSource中获取\n        所有可用的数据源。\n\t\t在实际应用中，targetDataSource通常是一个Map类型的对象，用于存储多个数据源对象，\n\t\t例如读写分离、分表等场景下需要使用多个数据源。\n        每个数据源需要有一个标识符，如数据库名称或者其他标识符，以便在程序运行时进行调用和切换。\n        设置了目标数据源后，动态数据源就可以根据特定的规则或条件来动态地切换数据源，\n        并且能够确保在当前线程中只有一个数据源被使用。\n        因此，这行代码的作用是将targetDataSource设置为动态数据源的目标数据源，\n        使得动态数据源可以从targetDataSource中获取到所有可用的数据源，\n        并在需要访问数据时可以自动切换数据源。\n\t\t*/\n        return dynamicDataSource;\n    }\n    @Override\n    public void setEnvironment(Environment environment) {\n\n    }\n}\n```\n>             targetDataSource.put(dbInfo,new DriverManagerDataSource(\n>                 objMap.get(\"url\").toString(),\n>                 objMap.get(\"username\").toString(),\n>                 objMap.get(\"password\").toString()));\n\n首先，这段代码中使用了`new DriverManagerDataSource()`语句创建了一个`DriverManagerDataSource`对象，并通过构造函数传入了数据库连接URL、用户名和密码等信息。`DriverManagerDataSource`是Spring JDBC框架中的一个数据源实现类，它可以根据提供的数据库连接信息来创建一个JDBC连接。<br />然后，将创建的`DriverManagerDataSource`对象存储到`targetDataSource`中，其中`dbInfo`表示该数据源的名称或者标识符，通常是一个字符串；`targetDataSource.put(dbInfo, dataSource)`方法将该数据源对象和对应的名称关联起来并存储到`targetDataSource`中，以便在程序运行时进行调用和切换。<br />通常情况下，`targetDataSource`是一个Map类型的对象，用于存储多个数据源对象，例如读写分离、分表等场景下需要使用多个数据源。在实际应用中，`targetDataSource`通常会被注入到`AbstractRoutingDataSource`类中，以实现数据源的动态切换功能。<br />综上所述，这段代码的作用是创建一个数据库连接，并将其存储到`targetDataSource`中，以便在需要访问对应数据库时可以从`targetDataSource`中获取到正确的连接。\n\n>  dynamicDataSource.setTargetDataSources(targetDataSource);\n\n 这行代码是将一个`targetDataSource`数据源对象设置为动态数据源`dynamicDataSource`的目标数据源。在Spring中，通过`DynamicDataSource`和`AbstractRoutingDataSource`两个类的配合使用，可以实现动态切换多个数据源。<br />具体来说，`DynamicDataSource`是对`AbstractRoutingDataSource`的一个扩展，它除了支持动态数据源的切换外，还支持针对不同的查询/操作类型选择不同的数据源。`setTargetDataSources()`方法就是用于设置动态数据源的目标数据源的，即将`targetDataSource`对象作为参数传递进去，表示该动态数据源会从`targetDataSource`中获取所有可用的数据源。<br />在实际应用中，`targetDataSource`通常是一个Map类型的对象，用于存储多个数据源对象，例如读写分离、分表等场景下需要使用多个数据源。每个数据源需要有一个标识符，如数据库名称或者其他标识符，以便在程序运行时进行调用和切换。设置了目标数据源后，动态数据源就可以根据特定的规则或条件来动态地切换数据源，并且能够确保在当前线程中只有一个数据源被使用。<br />因此，这行代码的作用是将`targetDataSource`设置为动态数据源的目标数据源，使得动态数据源可以从`targetDataSource`中获取到所有可用的数据源，并在需要访问数据时可以自动切换数据源。\n## DataSourceAutoConfig.java\n```java\n/**\n* 2023/5/10\n**/\n\n@Configuration\npublic class DataSourceAutoConfig implements EnvironmentAware {\n    private Map<String, Map<String, Object>> dataSourceMap = new HashMap<>();\n\n    private int dbCount; //数据库的数量\n    private int tbCount; //表的数量\n\n    @Bean\n    public DBRouterConfig dbRouterConfig() {\n        return new DBRouterConfig(dbCount, tbCount);\n    }\n\n    @Bean\n    public DataSource dataSource() {\n        // 创建数据源\n        Map<Object, Object> targetDataSource = new HashMap<>();\n        for (String dbInfo : dataSourceMap.keySet()) {\n            //根据外层Map的KeySet的key拿到内层的Map\n            Map<String, Object> objMap = dataSourceMap.get(dbInfo);\n            targetDataSource.put(dbInfo, new DriverManagerDataSource(\n                objMap.get(\"url\").toString(),\n                objMap.get(\"username\").toString(),\n                objMap.get(\"password\").toString()));\n        }\n        //设置数据源\n        DynamicDataSource dynamicDataSource = new DynamicDataSource();\n        dynamicDataSource.setTargetDataSources(targetDataSource);\n        return dynamicDataSource;\n    }\n\n    @Override\n    public void setEnvironment(Environment environment) {\n        String prefix = \"router.jdbc.datasource\";\n        dbCount = Integer.parseInt(Objects.requireNonNull(environment.getProperty(prefix + \"dbCount\")));\n        tbCount = Integer.parseInt(Objects.requireNonNull(environment.getProperty(prefix + \"tbCount\")));\n\n        String dataSources = environment.getProperty(prefix + \"list\");\n        for (String dbInfo : dataSources.split(\",\")) {\n            Map<String, Object> dataSourceProps = PropertyUtil.handle(environment, prefix + dbInfo, Map.class);\n            dataSourceMap.put(dbInfo, dataSourceProps);\n        }\n\n    }\n}\n```\n\n### PropertyUtil.java\n\n```java\n\n/**\n * 2023/5/10\n **/\n\npublic class PropertyUtil {\n    private static int springBootVersion = 1;\n\n    static {\n        try {\n            Class.forName(\"org.springframework.boot.bind.RelaxedPropertyResolver\");\n        } catch (ClassNotFoundException e) {\n            springBootVersion = 2;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T handle(final Environment environment, final String prefix, final Class<T> targetClass) {\n        if (springBootVersion == 1) {\n            return (T) v1(environment, prefix);\n        }\n        return (T) v2(environment, prefix, targetClass);\n    }\n\n    private static Object v1(Environment environment, String prefix) {\n        try {\n            Class<?> resolverClass = Class.forName(\"org.springframework.boot.bind.RelaxedPropertyResolver\");\n            Constructor<?> resolverConstructor = resolverClass.getDeclaredConstructor(PropertyResolver.class);\n            Method getSubPropertiesMethod = resolverClass.getDeclaredMethod(\"getSubProperties\", String.class);\n            Object resolverObject = resolverConstructor.newInstance(environment);\n            String prefixParam = prefix.endsWith(\".\") ? prefix : prefix + \".\";\n            return getSubPropertiesMethod.invoke(resolverObject, prefixParam);\n        } catch (final ClassNotFoundException | NoSuchMethodException | SecurityException | InstantiationException\n                       | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n            throw new RuntimeException(ex.getMessage(), ex);\n        }\n    }\n\n    private static Object v2(Environment environment, String prefix, Class<?> targetClass) {\n        try {\n            Class<?> binderClass = Class.forName(\"org.springframework.boot.context.properties.bind.Binder\");\n            Method getMethod = binderClass.getDeclaredMethod(\"get\", Environment.class);\n            Method bindMethod = binderClass.getDeclaredMethod(\"bind\", String.class, Class.class);\n            //public static Binder get(Environment environment) {\n            //\t\treturn get(environment, null);\n            //\t} Create a new {@link Binder} instance from the specified environment.\n            Object binderObject = getMethod.invoke(null, environment);\n            String prefixParam = prefix.endsWith(\".\") ? prefix.substring(0, prefix.length() - 1) : prefix;\n            Object bindResultObject = bindMethod.invoke(binderObject, prefixParam, targetClass);\n            Method resultGetMethod = bindResultObject.getClass().getDeclaredMethod(\"get\");\n//            /**\n//             * Return the object that was bound or throw a {@link NoSuchElementException} if no\n//             * value was bound.\n//             * @return the bound value (never {@code null})\n//             * @throws NoSuchElementException if no value was bound\n//             * @see #isBound()\n//             */\n//            public T get() throws NoSuchElementException {\n//                if (this.value == null) {\n//                    throw new NoSuchElementException(\"No value bound\");\n//                }\n//                return this.value;\n//            }\n            return resultGetMethod.invoke(bindResultObject);\n        } catch (final ClassNotFoundException | NoSuchMethodException | SecurityException | IllegalAccessException\n                       | IllegalArgumentException | InvocationTargetException ex) {\n            throw new RuntimeException(ex.getMessage(), ex);\n        }\n    }\n}\n\n```\n\n在Spring Boot 2.x版本中，`org.springframework.boot.bind.RelaxedPropertyResolver`类已经被废弃并移除了。官方文档建议使用`org.springframework.boot.context.properties.bind.BindResult`和`org.springframework.boot.context.properties.bind.Binder`类来代替。<br />具体来说，`BindResult`类封装了配置属性的绑定结果，并提供了一些便捷的方法来获取绑定后的属性值，例如`get()`、`getOrNull()`等。`Binder`类则是一个工厂类，用于创建配置属性绑定器对象，并通过`bind()`方法将属性绑定到Java对象中。<br />需要注意的是，在Spring Boot 2.x版本中，还引入了一种新的注解方式`@ConfigurationProperties`来绑定属性，该方式比`RelaxedPropertyResolver`更加直观和易用。可以通过在应用程序的配置文件中为Java对象指定前缀来实现对属性的绑定，例如：\n```yaml\nmyapp:\n  db:\n    url: jdbc:mysql://localhost:3306/mydb\n    username: root\n    password: password\n```\n然后在Java代码中使用`@ConfigurationProperties(prefix = \"myapp.db\")`注解来指定要绑定的前缀，例如：\n```java\n@Configuration\n@ConfigurationProperties(prefix = \"myapp.db\")\npublic class DataSourceProperties {\n    private String url;\n    private String username;\n    private String password;\n    // ...\n}\n```\n以上示例代码中`DataSourceProperties`类的属性名与配置文件中的属性名一一对应，这样就可以自动将配置文件中的属性值绑定到Java对象中了。\n\n```\n@SuppressWarnings(\"unchecked\")\npublic static <T> T handle(final Environment environment, final String prefix, final Class<T> targetClass) {\n    switch (springBootVersion) {\n        case 1:\n            return (T) v1(environment, prefix);\n        default:\n            return (T) v2(environment, prefix, targetClass);\n    }\n}\n```\n在Java中，**final关键字**可以用来修饰变量、方法和类等元素，表示它们是不可变的或者不可继承的。在这个方法的形参中加上final关键字，主要是为了限制这些参数不被修改，从而增强代码的可靠性和安全性。<br />具体来说，将形参加上final关键字，有以下几个好处：\n\n1. 防止无意间修改参数值：在方法执行的过程中，如果修改了某个参数的值，可能会影响到程序的正确性。将参数标记为final后，编译器会阻止在方法内部对参数进行修改，避免出现意外的错误。\n2. 提高代码可读性：通过使用final关键字，可以让代码更加简洁明了，表达出开发者的意图。同时，也方便其他开发者阅读和理解代码。\n3. 优化代码执行效率：在一定程度上，使用final关键字还可以提高代码的执行效率。因为final变量只需要赋值一次就固定了，所以在运行时可以直接使用变量的值，而不必每次都去重新计算。\n\n总之，将方法的形参加上final关键字，可以使代码更加健壮、简洁、高效，从而提高代码的质量和可维护性。\n\n**@SuppressWarnings(\"unchecked\")** 注解的作用是告诉编译器在忽略范型类型转换警告时不需要提示，即抑制编译器产生\"unchecked warning\"警告信息。\n\n在Java中，泛型是一种静态检查机制，可以在编译时检测一些可能发生的类型转换错误。但是，在某些情况下，由于Java的类型擦除机制，编译器无法检测到所有的类型错误。例如，当使用原始类型时，编译器无法检测到泛型类型转换错误。此时，编译器会产生“unchecked warning”警告信息，提醒开发者可能存在类型安全问题。<br />通过在代码中添加@SuppressWarnings(\"unchecked\")注解，可以告诉编译器忽略对该行代码的类型检查，从而消除编译器产生的“unchecked warning”警告信息。需要注意的是，使用@SuppressWarnings(\"unchecked\")注解应该谨慎，只有在确保该行代码不会产生类型安全问题时才能使用。<br />总之，@SuppressWarnings(\"unchecked\")注解的作用是抑制编译器对Java泛型类型转换的警告信息，通常用于一些不能避免的类型转换操作，但同时也要注意尽可能减少使用该注解，以保证程序的类型安全性。\n\n### v1方法：\n这段代码的作用是获取Spring Boot应用程序中指定前缀的子属性，并返回一个**Map类型的结果**，其中键为属性名，值为属性值。\n\n具体来说，该方法在运行时通过反射机制调用了org.springframework.boot.bind.RelaxedPropertyResolver类中的方法来获取属性。首先，该方法使用Class.forName()方法获取RelaxedPropertyResolver类的Class对象，然后通过getDeclaredConstructor()方法获取该类带有一个PropertyResolver参数的构造器。接着，使用getDeclaredMethod()方法获取getSubProperties()方法的引用，这个方法接受一个字符串参数，表示要获取哪个属性的子属性。最后，通过反射机制创建RelaxedPropertyResolver类的实例，并调用getSubProperties()方法来获取指定前缀的子属性。<br />代码中的prefix参数表示要获取的属性前缀，例如\"spring.datasource\"。该方法将前缀参数传递给getSubProperties()方法，然后将返回的Map类型的结果转换成一个符合预期的Map类型并返回。如果在运行时出现异常，则会抛出一个运行时异常，并将原始异常信息和堆栈跟踪记录下来。<br />需要注意的是，在Spring Boot 2.x版本中，RelaxedPropertyResolver类已经被废弃并移除了。建议使用org.springframework.boot.context.properties.bind.Binder类来替代。\n### v2方法：\n这段代码的作用是使用反射机制绑定Spring Boot应用程序中指定前缀的属性到Java对象中，并返回绑定后的Java对象。<br />具体来说，该方法在运行时通过反射机制调用了org.springframework.boot.context.properties.bind.Binder类中的方法来实现属性绑定。首先，该方法使用Class.forName()方法获取Binder类的Class对象，然后使用getDeclaredMethod()方法获取该类的两个反射方法引用：get()方法和bind()方法。接着，通过反射机制调用get()方法创建Binder对象实例，并将该对象存储在变量binderObject中。然后使用bind()方法将指定前缀的属性绑定到Java对象中。最后，通过反射机制调用Result.get()方法从绑定结果对象中获取绑定的Java对象。<br />需要注意的是，该方法中的prefix参数表示要绑定的前缀，例如\"spring.datasource\"；targetClass参数表示要绑定的Java类类型，例如DataSourceProperties.class。同时，也要注意在运行时出现异常时，会抛出一个运行时异常，并将原始异常信息和堆栈跟踪记录下来。<br />总之，该方法利用反射机制实现了基于前缀的配置属性自动绑定到Java对象上。该方法可以将配置文件中指定前缀的属性值映射、注入到Java对象中，方便进行后续操作。\n\n问：为什么在这段代码中使用反射机制呢？<br />在这段代码中，使用反射机制的主要原因是为了解决接口和实现类之间的依赖关系问题。具体来说，`org.springframework.boot.context.properties.bind.Binder`类是Spring Boot框架内部使用的一个工具类，用于将配置文件中的属性值绑定到Java对象上。如果直接调用`new`关键字创建该类的对象，会导致编译时依赖于该类的具体实现，从而造成程序耦合度过高的问题。<br />使用反射机制可以在运行时动态获取`Binder`类的引用，并根据需要进行方法调用。这种方式可以有效地减少程序的耦合度，提高代码的灵活性和可维护性。另外，通过使用反射机制，我们还可以轻松地替换`Binder`类的具体实现，以满足不同的业务需求。<br />总之，使用反射机制可以帮助我们解决接口和实现类之间的依赖关系问题，从而提高程序的灵活性和可维护性。当然，在使用反射机制时也要注意安全性和效率方面的问题，尽量避免滥用反射。\n\n## DBRouterJoinPoint.java\n```\n@Aspect\n@Component(\"db-router-point\")\npublic class DBRouterJoinPoint {\n\n    private Logger logger = LoggerFactory.getLogger(DBRouterJoinPoint.class);\n\n    @Autowired\n    private DBRouterConfig dbRouterConfig;\n\n    @Pointcut(\"@annotation(cn.bugstack.middleware.db.router.annotation.DBRouter)\")\n    public void aopPoint() {\n    }\n\n    @Around(\"aopPoint() && @annotation(dbRouter)\")\n    public Object doRouter(ProceedingJoinPoint jp, DBRouter dbRouter) throws Throwable {\n        String dbKey = dbRouter.key();\n        if (StringUtils.isBlank(dbKey)) throw new RuntimeException(\"annotation DBRouter key is null！\");\n        \n        String dbKeyAttr = getAttrValue(dbKey, jp.getArgs());\n        int size = dbRouterConfig.getDbCount() * dbRouterConfig.getTbCount();\n       \n        int idx = (size - 1) & (dbKeyAttr.hashCode() ^ (dbKeyAttr.hashCode() >>> 16));\n      \n        int dbIdx = idx / dbRouterConfig.getTbCount() + 1;\n        int tbIdx = idx - dbRouterConfig.getTbCount() * (dbIdx - 1);\n  \n        DBContextHolder.setDBKey(String.format(\"%02d\", dbIdx));\n        DBContextHolder.setTBKey(String.format(\"%02d\", tbIdx));\n        logger.info(\"数据库路由 method：{} dbIdx：{} tbIdx：{}\", getMethod(jp).getName(), dbIdx, tbIdx);\n  \n        try {\n            return jp.proceed();\n        } finally {\n            DBContextHolder.clearDBKey();\n            DBContextHolder.clearTBKey();\n        }\n    }\n\n    private Method getMethod(JoinPoint jp) throws NoSuchMethodException {\n        Signature sig = jp.getSignature();\n        MethodSignature methodSignature = (MethodSignature) sig;\n        return jp.getTarget().getClass().getMethod(methodSignature.getName(), methodSignature.getParameterTypes());\n    }\n\n    public String getAttrValue(String attr, Object[] args) {\n        String filedValue = null;\n        for (Object arg : args) {\n            try {\n                if (StringUtils.isNotBlank(filedValue)) break;\n                filedValue = BeanUtils.getProperty(arg, attr);\n            } catch (Exception e) {\n                logger.error(\"获取路由属性值失败 attr：{}\", attr, e);\n            }\n        }\n        return filedValue;\n    }\n\n}\n```\n\n这个类是一个使用了 Spring AOP 框架的切面（Aspect），主要作用如下：\n● 在使用注解 @DBRouter 标记的方法调用前后，拦截方法调用并动态计算出目标数据源信息，并将其存储到 ThreadLocal 中。\n● 提供一系列辅助方法，例如计算路由、获取 Bean 属性值等。\n具体来说，这个类中的 @Pointcut 注解定义了一个切入点，该切入点用于匹配所有带有 @DBRouter 注解的方法。而 @Around 注解则表示这是一个环绕通知类型的切面，它会在目标方法执行前和执行后都执行逻辑。\n在 doRouter 方法中，首先从 DBRouter 注解中读取路由键，然后根据所需的路由键属性以及当前方法参数列表中的值计算出路由结果，并将其设置到 ThreadLocal 中，以便后续访问数据库时能够正确地选择数据源。最后，在目标方法执行完毕后，使用 finally 块清除 ThreadLocal 中的数据源信息。\n此外，还有一些辅助方法，如 getMethod 方法用于获取 Join Point 对应的方法对象，getAttrValue 方法用于根据属性名称获取 Bean 对象的属性值等。\n总之，这个类的作用是为带有 @DBRouter 注解的方法提供动态路由功能，并使用 Spring AOP 框架实现对方法调用的拦截和增强。\n\nprivate Logger logger = LoggerFactory.getLogger(DBRouterJoinPoint.class);\n这行代码的作用是声明一个日志记录器，用于在程序运行时输出日志信息。具体来说，该日志记录器使用了SLF4J（Simple Logging Facade for Java）框架提供的LoggerFactory.getLogger()静态方法来创建一个Logger对象。其中，DBRouterJoinPoint.class参数表示要获取日志记录器所属的类名。\n在程序开发中，日志记录器是一种非常重要的工具，可以帮助开发者实时监控程序运行状态、调试错误、排查故障等。通过使用日志记录器，开发者可以将程序的运行过程和相关信息输出到指定的日志文件或控制台中，方便进行后续分析和处理。\n在上述代码中，通过声明一个日志记录器，我们可以在程序运行时输出一些有用的信息，例如：\nlogger.info(\"Start executing DB router logic\");\n这条语句可以用来输出程序开始执行DB路由逻辑的提示信息。如果程序出现问题，我们也可以在日志中查看错误信息，例如：\nlogger.error(\"An error occurred while executing DB router logic\", e);\n这条语句可以用来输出程序执行DB路由逻辑时出现的异常信息，并将异常堆栈跟踪记录下来，以便后续进行排查和处理。\n总之，通过使用日志记录器，我们可以更好地了解程序的运行状态，快速定位问题并进行及时处理，提高程序的可靠性和可维护性。\n\n@Pointcut(\"@annotation(com.tute.middleware.db.router.annotation.DBRouter)\")\npublic void aopPoint(){\n\n}\n这段代码是一个AOP切入点（Pointcut），用于定义一个切入点表达式，表示在被@DBRouter注解标记的方法上进行切面增强。\n具体来说，该切入点通过@annotation()表达式来匹配所有被@DBRouter注解标记的方法。当程序中有一个方法被@DBRouter注解标记时，AOP框架会将该方法作为一个连接点（Join Point）进行拦截。然后，根据切面编程的规则，在目标方法执行前、执行后或异常抛出时，执行相应的增强逻辑，例如记录日志、事务管理、安全检查等等。\n需要注意的是，该切入点本身不包含任何增强逻辑，只是一个定义了切入点的空方法。在实际使用中，我们通常会定义多个切入点，并结合切面（Aspect）类一起使用，例如：\n@Aspect\n@Component\npublic class DBRouterAspect {\n \n    private static final Logger logger = LoggerFactory.getLogger(DBRouterAspect.class);\n \n    @Pointcut(\"@annotation(com.tute.middleware.db.router.annotation.DBRouter)\")\n    public void aopPoint() {}\n \n    @Before(\"aopPoint()\")\n    public void before(JoinPoint joinPoint) {\n        logger.info(\"开始执行DB路由逻辑...\");\n    }\n \n    @AfterReturning(pointcut = \"aopPoint()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        logger.info(\"DB路由逻辑执行完毕，返回值为：{}\", result);\n    }\n \n    @AfterThrowing(pointcut = \"aopPoint()\", throwing = \"e\")\n    public void afterThrowing(JoinPoint joinPoint, Exception e) {\n        logger.error(\"DB路由逻辑执行异常，异常信息为：{}\", e);\n    }\n}\n在上述代码中，我们定义了一个DBRouterAspect切面类，用于对所有被@DBRouter注解标记的方法进行增强。该切面类中包括一个切入点（使用了@Pointcut注解定义）、一个前置增强（使用了@Before注解定义）、一个正常返回增强（使用了@AfterReturning注解定义）和一个异常抛出增强（使用了@AfterThrowing注解定义）。前置增强、正常返回增强和异常抛出增强都是在目标方法执行前、执行后或异常抛出时执行的具体逻辑。\n总之，AOP切入点是AOP编程的重要组成部分，可以帮助我们精确地定义需要增强的连接点，从而实现更加灵活和可维护的编程。\n\n在 Spring Boot 中，默认已开启了对注解 AOP 的支持，因此不需要进行额外的配置即可使用注解方式的 AOP。具体来说，只需要满足以下两个条件即可：\n1. 在工程中引入 spring-boot-starter-aop 依赖。\n2. 定义一个切面类，并使用 @Aspect 注解标记该类，然后在目标方法上使用注解来标识需要被拦截和增强的方法。\n当应用程序启动时，Spring Boot 将自动扫描项目中定义的所有 @Aspect 类，并根据其定义的切入点和通知类型来创建代理对象，从而实现对目标方法的拦截和增强。\n总之，在 Spring Boot 中使用注解方式的 AOP 是非常方便的，只需要按照上述步骤即可完成配置，无需进行其他复杂的配置。\n\nStringUtils.isBlank(dbKey) 和 StringUtils.isEmpty(dbKey) 是 Apache Commons Lang 库中的两个字符串处理方法，它们的区别如下：\n\n* StringUtils.isBlank(dbKey) ：判断给定字符串是否为空或仅包含空格、制表符、换行符等不可见字符，如果是则返回 true，否则返回 false。例如，如果 dbKey 为 \" \" 或 \"\\t\\n\" 等，则返回 true，否则返回 false。\n\n* StringUtils.isEmpty(dbKey) ：判断给定字符串是否为空或长度为 0，如果是则返回 true，否则返回 false。例如，如果 dbKey 为 \"\" 或 null，则返回 true，否则返回 false。\n因此，可以总结出以下区别：\n\n* isBlank() 方法考虑了除空字符串外的其他所有不可见字符，而 isEmpty() 方法不考虑这些字符。\n\n* isEmpty() 方法只检查字符串是否为空或具有零长度，而 isBlank() 方法还检查字符串是否全部由空格组成。\n在使用时，需要根据具体情况来选择使用哪个方法。如果需要判断一个字符串是否为空或者只包含空格、制表符、回车符等不可见字符，应该使用 isBlank()；如果只需要判断一个字符串是否为空或长度为 0，则可以使用 isEmpty()。\n\n\n@Around(\"aopPoint() && @annotation(dbRouter)\") 是一个用于定义切面的注解。它是 Spring AOP 框架中的一部分，用于在运行时根据指定的切入点表达式（Pointcut expression）拦截方法调用，并织入额外的逻辑。\n具体来说，这个注解的含义如下：\n\n* @Around 表示这个注解是一个环绕通知类型的切面，即会在目标方法执行前和执行后都执行一些逻辑。\n\n* \"aopPoint() && @annotation(dbRouter)\" 是一个切入点表达式，用于指定需要被拦截的目标方法。它由两个部分组成： \n  \n  * aopPoint()：表示使用名为 aopPoint 的切入点，该切入点是一个方法，用于定义需要被拦截的目标方法。这个切入点可能包含多个匹配规则，例如 execution()、within()、args() 等等。\n  * @annotation(dbRouter)：表示目标方法必须带有 dbRouter 注解才会被拦截。这里的 dbRouter 是自定义注解类型的名称，它可以作为一个切入点的限定条件，只有符合条件的目标方法才会被拦截。\n因此，@Around(\"aopPoint() && @annotation(dbRouter)\") 注解的作用是定义一个环绕通知切面，该切面会拦截带有 dbRouter 注解的目标方法，并在目标方法执行前和执行后织入额外的逻辑。\n\n在 Spring AOP 框架中，切入点表达式（Pointcut expression）由两个部分组成：切入点和匹配规则。\n切入点定义了一个或多个方法的集合，而匹配规则则指定了哪些方法可以被包含在切入点中。匹配规则常用的有以下几种：\n\n* execution()：用于匹配方法执行的 Join Point（连接点），并且需要指定方法的签名。例如，execution(public * com.example.demo.*.*(..)) 表示匹配所有公共方法。\n\n* within()：用于匹配某个类或某个包内的所有 Join Point，需要指定类名或包名。例如，within(com.example.demo.service.*) 表示匹配 com.example.demo.service 包下的所有 Join Point。\n\n* this() / target() / args()：用于匹配当前正在被代理的对象、目标对象或方法参数等 Join Point 相关的信息。\n\n* @annotation() / @within() / @target()：用于匹配带有特定注解的 Join Point，需要指定注解类型。例如，@annotation(MyAnnotation) 表示匹配所有带有 MyAnnotation 注解的\n方法。\n\n这些匹配规则可以单独使用，也可以结合起来使用，以定义更精确的切入点。在实际开发中，我们可以根据具体需求选择合适的匹配规则来定义切入点，以实现拦截目标方法并织入额外逻辑的目的。\n路由算法\n```\npublic Object doRouter(ProceedingJoinPoint jp, DBRouter dbRouter) throws Throwable {\n        String dbKey = dbRouter.key();\n        if (StringUtils.isBlank(dbKey)) throw new RuntimeException(\"annotation DBRouter key is null！\");\n        \n        String dbKeyAttr = getAttrValue(dbKey, jp.getArgs());\n        int size = dbRouterConfig.getDbCount() * dbRouterConfig.getTbCount();\n       \n        int idx = (size - 1) & (dbKeyAttr.hashCode() ^ (dbKeyAttr.hashCode() >>> 16));\n      \n        int dbIdx = idx / dbRouterConfig.getTbCount() + 1;\n        int tbIdx = idx - dbRouterConfig.getTbCount() * (dbIdx - 1);\n  \n        DBContextHolder.setDBKey(String.format(\"%02d\", dbIdx));\n        DBContextHolder.setTBKey(String.format(\"%02d\", tbIdx));\n        logger.info(\"数据库路由 method：{} dbIdx：{} tbIdx：{}\", getMethod(jp).getName(), dbIdx, tbIdx);\n  \n        try {\n            return jp.proceed();\n        } finally {\n            DBContextHolder.clearDBKey();\n            DBContextHolder.clearTBKey();\n        }\n    }\n```\n\n这段代码实现了一个数据库的路由功能。具体来说，它基于传入的注解（DBRouter）中的键值（key），计算出该操作要使用的数据库和表的索引，并将其存储在上下文中（DBContextHolder）。这样，在整个操作过程中，就可以根据上下文中的索引选择正确的数据库和表，而不需要显式地指定或硬编码。最终，无论执行是否成功，上下文都会被清除以释放资源。\n\n### 为什么使用扰动函数\n\n理论上来说字符串的hashCode是一个int类型值，那可以直接作为数组下标了，且不会出现碰撞。但是这个hashCode的取值范围是[-2147483648, 2147483647]，有将近40亿的长度，谁也不能把数组初始化的这么大，内存也是放不下的。\n我们默认初始化的Map大小是16个长度 DEFAULT_INITIAL_CAPACITY = 1 << 4，所以获取的Hash值并不能直接作为下标使用，需要与数组长度进行取模运算得到一个下标值，也就是我们上面做的散列列子。\n那么，hashMap源码这里不只是直接获取哈希值，还进行了一次扰动计算，(h = key.hashCode()) ^ (h >>> 16)。把哈希值右移16位，也就正好是自己长度的一半，之后与原哈希值做异或运算，这样就混合了原哈希值中的高位和低位，增大了**随机性**。\n","source":"_posts/2023-05-10-dbRouter.md","raw":"---\ntitle: dbRouter\ndate: 2023-05-10 21:54:57\ntags: \n- Database\n- Java\n- programing\ncategories:\n- Java\n---\n\n当业务变得极其庞大的时候，原有的单表可能不足以维持业务的正常发展，此时就需要进行分库分表操作，来缓解数据库的压力\n<!-- more -->\n# dbRouter\n![image.png](01.png)\n## DBRouter.java\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE,ElementType.METHOD})\npublic @interface DBRouter {\n    String key () default \"\";\n}\n```\n**@Documented**是Java中的一个元注解，它用于指示被该注解修饰的注解是否会被包含在JavaDoc文档中。<br />具体来说，当一个注解添加了@Documented注解后，使用该注解修饰的类、方法或字段等等，在生成JavaDoc文档时，这些注解会被包含在文档中，并能够被文档工具展示出来。如果没有使用@Documented注解，则这些注解不会被包含在JavaDoc文档中。<br />举个例子，比如在编写自己的Java框架或库时，可能会定义一些自定义注解，这些注解可能是用来描述类、方法、参数等信息的，如果想让其他人更好地了解这些注解的作用以及如何使用它们，就可以为这些注解添加@Documented注解，这样在生成JavaDoc文档时，这些注解就可以被包含进去，方便用户查看和阅读。<br />因此，@Documented注解的作用就是告诉Java编译器，将被该注解修饰的注解包含在JavaDoc文档中，使得开发者可以更方便地了解和使用这些注解。\n\n**@Retention(RetentionPolicy.RUNTIME)** 是Java中的一个元注解，它用于指示被该注解修饰的注解的保留策略，即在什么时候该注解会失效。<br />具体来说，@Retention(RetentionPolicy.RUNTIME)表示被该注解修饰的注解会在运行时保留，并可以通过反射机制获取到。换句话说，如果没有使用@Retention(RetentionPolicy.RUNTIME)注解，则该注解修饰的注解会在编译时被丢弃，而无法在程序运行时获取到。<br />举个例子，假设我们定义了一个自定义注解@MyAnnotation，并希望在程序运行时能够通过反射获取到该注解的信息，例如注解的属性值等等。此时就需要为@MyAnnotation添加@Retention(RetentionPolicy.RUNTIME)注解，以便让该注解在运行时保持不变。<br />因此，@Retention(RetentionPolicy.RUNTIME)注解的作用是指定被该注解修饰的注解的保留策略为运行时保留，并且可以通过反射机制获取注解信息，这对于编写某些框架或库非常有用。\n\n**@Target({ElementType.TYPE, ElementType.METHOD})** 是Java中的一个元注解，用于指定被该注解修饰的注解可以应用的目标元素类型。<br />具体来说，@Target({ElementType.TYPE, ElementType.METHOD})表示被该注解修饰的注解可以应用在类、接口和枚举类型上，同时也可以应用在方法上。如果尝试将这个注解用于其他的目标元素类型，如属性、构造函数等，则会编译错误。<br />举个例子，假设我们定义了一个自定义注解@MyAnnotation，并希望让这个注解可以用于类、接口和枚举类型上，同时也可以用于方法上。此时就需要为@MyAnnotation添加@Target({ElementType.TYPE, ElementType.METHOD})注解，以便限制该注解的使用范围，避免出现不合理或者意外的情况。<br />因此，@Target({ElementType.TYPE, ElementType.METHOD})注解的作用是指定被该注解修饰的注解可以应用的目标元素类型，它可以限制注解的使用范围，使得注解的作用更加明确和准确。\n\n## DBContextHolder.java\n```java\npublic class DBContextHolder {\n    private final static ThreadLocal<String> dbKey = new ThreadLocal<>();\n    private final static ThreadLocal<String> tbKey = new ThreadLocal<>();\n    //get方法\n    public static String getDBKey() {\n        return dbKey.get();\n    }\n\n    public static String getTBKey() {\n        return tbKey.get();\n    }\n\n    //set方法\n    public static void setDBKey(String dbKeyIdx){\n        dbKey.set(dbKeyIdx);\n    }\n    public static void setTBKey(String tbKeyIdx){\n        tbKey.set(tbKeyIdx);\n    }\n    //清空key\n    public static void clearDBKey(){\n        dbKey.remove();\n    }\n\n    public static void clearTBKey(){\n        tbKey.remove();\n    }\n}\n```\n这个类是一个线程池上下文管理类，主要用来管理当前线程使用的数据库和表的名称。<br />具体来说，这个类中定义了两个ThreadLocal类型的静态变量：dbKey和tbKey。这两个变量分别用于存储当前线程使用的数据库名称和表名称，它们的值可以在应用程序运行时通过代码来设置或者获取。<br />通过使用这个类，我们可以在应用程序中动态切换数据库和表，而无需修改实际执行查询和操作的代码。例如，在某些情况下需要进行读写分离，可以在读操作前将dbKey设置为读库的名称，在写操作前将其设置为写库的名称；在某些情况下需要动态选择表名，可以先通过某种规则计算出表名，然后将其设置到tbKey中，再执行相关操作。<br />总之，DBContextHolder类的作用是提供一种机制，让应用程序可以动态地切换数据库和表，从而更加灵活地控制数据的访问和操作。该类通常会与其他数据源相关组件（如AbstractRoutingDataSource）配合使用，以实现多数据源或者动态数据源切换等功能。\n\n**remove()**方法是ThreadLocal类中的一个实例方法，用于将当前线程绑定的变量值删除。在DBContextHolder类中，clearDBKey()和clearTBKey()方法分别调用了dbKey.remove()和tbKey.remove()方法，用于清空当前线程绑定的数据库和表名称。<br />由于ThreadLocal对象通常是与线程一一对应的，因此使用remove()方法可以防止内存泄漏。如果不清除线程绑定的变量值，可能会出现以下情况之一：\n\n- 当前线程结束后，ThreadLocal对象仍然持有该变量的引用，导致该变量无法被GC回收，从而发生内存泄漏。\n- 由于线程池的复用机制，下一个使用该线程的任务可能会意外地继承上一个任务的线程绑定变量值，导致程序出现错误或者异常行为。\n\n因此，在使用ThreadLocal时，最好在不再需要使用线程绑定变量的时候调用remove()方法进行清理。在DBContextHolder类中，clearDBKey()和clearTBKey()方法的作用就是通过调用remove()方法来清空当前线程绑定的数据库和表名称，以便下一次使用线程时，这些变量的值不会影响到其他任务。\n\n## DynamicDataSource.java\n```java\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n    @Override\n    protected Object determineCurrentLookupKey() {\n    \treturn \"db\" + DBContextHolder.getDBKey();\n    }\n}\n```\n\nAbstractRoutingDataSource在Mybatis中引入了spring-jdbc依赖，所以不必刻意再次单独引入spring-jdbc依赖<br />**AbstractRoutingDataSource抽象类**<br />AbstractRoutingDataSource是Spring框架中的一个数据源类，它可以根据特定的规则动态切换应用程序连接到的数据源。<br />在某些应用程序中，需要使用多个数据库（例如：读写分离），此时就需要使用AbstractRoutingDataSource来实现动态切换数据源。通过继承AbstractRoutingDataSource类并实现determineCurrentLookupKey()方法，可以定义选择数据源的逻辑，例如基于线程上下文、基于请求参数、基于用户权限等。**当应用程序需要访问数据库时，Spring框架会自动调用determineCurrentLookupKey()方法获取当前要使用的数据源，然后将数据源交给JdbcTemplate或其他数据访问组件使用。**<br />因此，AbstractRoutingDataSource的作用是提供一种机制，让Spring应用程序可以基于运行时的条件选择不同的数据源，并且无需修改现有代码即可实现数据源的切换。\n## DataSourceAutoConfig.java\n```java\npackage com.tute.middleware.db.router.config;\n\nimport com.tute.middleware.db.router.DBRouterConfig;\nimport com.tute.middleware.db.router.dynamic.DynamicDataSource;\nimport org.springframework.context.EnvironmentAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.env.Environment;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n* 2023/5/10\n**/\n\npublic class DataSourceAutoConfig implements EnvironmentAware {\n    private Map<String, Map<String,Object>> dataSourceMap = new HashMap<>();\n\n    private int dbCount; //数据库的数量\n    private int tbCount; //表的数量\n\n    @Bean\n    public DBRouterConfig dbRouterConfig(){\n        return new DBRouterConfig(dbCount,tbCount);\n    }\n\n    @Bean\n    public DataSource dataSource(){\n        // 创建数据源\n        Map<Object,Object> targetDataSource = new HashMap<>();\n        for (String dbInfo : dataSourceMap.keySet()) {\n            //根据外层Map的KeySet的key拿到内层的Map\n            Map<String, Object> objMap = dataSourceMap.get(dbInfo);\n            targetDataSource.put(dbInfo,new DriverManagerDataSource(\n                objMap.get(\"url\").toString(),\n                objMap.get(\"username\").toString(),\n                objMap.get(\"password\").toString()));\n        }\n        //设置数据源\n        DynamicDataSource dynamicDataSource = new DynamicDataSource();\n        dynamicDataSource.setTargetDataSources(targetDataSource);\n        /*\n        这行代码是将一个targetDataSource数据源对象设置为动态数据源dynamicDataSource的\n        目标数据源。在Spring中，通过DynamicDataSource和AbstractRoutingDataSource两个类的配合使用，\n        可以实现动态切换多个数据源。\n\t\t具体来说，DynamicDataSource是对AbstractRoutingDataSource的一\n        个扩展，它除了支持动态数据源的切换外，还支持针对不同的查询/操作类型选择不同的数据源。\n        setTargetDataSources()方法就是用于设置动态数据源的目标数据源的，\n        即将targetDataSource对象作为参数传递进去，表示该动态数据源会从targetDataSource中获取\n        所有可用的数据源。\n\t\t在实际应用中，targetDataSource通常是一个Map类型的对象，用于存储多个数据源对象，\n\t\t例如读写分离、分表等场景下需要使用多个数据源。\n        每个数据源需要有一个标识符，如数据库名称或者其他标识符，以便在程序运行时进行调用和切换。\n        设置了目标数据源后，动态数据源就可以根据特定的规则或条件来动态地切换数据源，\n        并且能够确保在当前线程中只有一个数据源被使用。\n        因此，这行代码的作用是将targetDataSource设置为动态数据源的目标数据源，\n        使得动态数据源可以从targetDataSource中获取到所有可用的数据源，\n        并在需要访问数据时可以自动切换数据源。\n\t\t*/\n        return dynamicDataSource;\n    }\n    @Override\n    public void setEnvironment(Environment environment) {\n\n    }\n}\n```\n>             targetDataSource.put(dbInfo,new DriverManagerDataSource(\n>                 objMap.get(\"url\").toString(),\n>                 objMap.get(\"username\").toString(),\n>                 objMap.get(\"password\").toString()));\n\n首先，这段代码中使用了`new DriverManagerDataSource()`语句创建了一个`DriverManagerDataSource`对象，并通过构造函数传入了数据库连接URL、用户名和密码等信息。`DriverManagerDataSource`是Spring JDBC框架中的一个数据源实现类，它可以根据提供的数据库连接信息来创建一个JDBC连接。<br />然后，将创建的`DriverManagerDataSource`对象存储到`targetDataSource`中，其中`dbInfo`表示该数据源的名称或者标识符，通常是一个字符串；`targetDataSource.put(dbInfo, dataSource)`方法将该数据源对象和对应的名称关联起来并存储到`targetDataSource`中，以便在程序运行时进行调用和切换。<br />通常情况下，`targetDataSource`是一个Map类型的对象，用于存储多个数据源对象，例如读写分离、分表等场景下需要使用多个数据源。在实际应用中，`targetDataSource`通常会被注入到`AbstractRoutingDataSource`类中，以实现数据源的动态切换功能。<br />综上所述，这段代码的作用是创建一个数据库连接，并将其存储到`targetDataSource`中，以便在需要访问对应数据库时可以从`targetDataSource`中获取到正确的连接。\n\n>  dynamicDataSource.setTargetDataSources(targetDataSource);\n\n 这行代码是将一个`targetDataSource`数据源对象设置为动态数据源`dynamicDataSource`的目标数据源。在Spring中，通过`DynamicDataSource`和`AbstractRoutingDataSource`两个类的配合使用，可以实现动态切换多个数据源。<br />具体来说，`DynamicDataSource`是对`AbstractRoutingDataSource`的一个扩展，它除了支持动态数据源的切换外，还支持针对不同的查询/操作类型选择不同的数据源。`setTargetDataSources()`方法就是用于设置动态数据源的目标数据源的，即将`targetDataSource`对象作为参数传递进去，表示该动态数据源会从`targetDataSource`中获取所有可用的数据源。<br />在实际应用中，`targetDataSource`通常是一个Map类型的对象，用于存储多个数据源对象，例如读写分离、分表等场景下需要使用多个数据源。每个数据源需要有一个标识符，如数据库名称或者其他标识符，以便在程序运行时进行调用和切换。设置了目标数据源后，动态数据源就可以根据特定的规则或条件来动态地切换数据源，并且能够确保在当前线程中只有一个数据源被使用。<br />因此，这行代码的作用是将`targetDataSource`设置为动态数据源的目标数据源，使得动态数据源可以从`targetDataSource`中获取到所有可用的数据源，并在需要访问数据时可以自动切换数据源。\n## DataSourceAutoConfig.java\n```java\n/**\n* 2023/5/10\n**/\n\n@Configuration\npublic class DataSourceAutoConfig implements EnvironmentAware {\n    private Map<String, Map<String, Object>> dataSourceMap = new HashMap<>();\n\n    private int dbCount; //数据库的数量\n    private int tbCount; //表的数量\n\n    @Bean\n    public DBRouterConfig dbRouterConfig() {\n        return new DBRouterConfig(dbCount, tbCount);\n    }\n\n    @Bean\n    public DataSource dataSource() {\n        // 创建数据源\n        Map<Object, Object> targetDataSource = new HashMap<>();\n        for (String dbInfo : dataSourceMap.keySet()) {\n            //根据外层Map的KeySet的key拿到内层的Map\n            Map<String, Object> objMap = dataSourceMap.get(dbInfo);\n            targetDataSource.put(dbInfo, new DriverManagerDataSource(\n                objMap.get(\"url\").toString(),\n                objMap.get(\"username\").toString(),\n                objMap.get(\"password\").toString()));\n        }\n        //设置数据源\n        DynamicDataSource dynamicDataSource = new DynamicDataSource();\n        dynamicDataSource.setTargetDataSources(targetDataSource);\n        return dynamicDataSource;\n    }\n\n    @Override\n    public void setEnvironment(Environment environment) {\n        String prefix = \"router.jdbc.datasource\";\n        dbCount = Integer.parseInt(Objects.requireNonNull(environment.getProperty(prefix + \"dbCount\")));\n        tbCount = Integer.parseInt(Objects.requireNonNull(environment.getProperty(prefix + \"tbCount\")));\n\n        String dataSources = environment.getProperty(prefix + \"list\");\n        for (String dbInfo : dataSources.split(\",\")) {\n            Map<String, Object> dataSourceProps = PropertyUtil.handle(environment, prefix + dbInfo, Map.class);\n            dataSourceMap.put(dbInfo, dataSourceProps);\n        }\n\n    }\n}\n```\n\n### PropertyUtil.java\n\n```java\n\n/**\n * 2023/5/10\n **/\n\npublic class PropertyUtil {\n    private static int springBootVersion = 1;\n\n    static {\n        try {\n            Class.forName(\"org.springframework.boot.bind.RelaxedPropertyResolver\");\n        } catch (ClassNotFoundException e) {\n            springBootVersion = 2;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T handle(final Environment environment, final String prefix, final Class<T> targetClass) {\n        if (springBootVersion == 1) {\n            return (T) v1(environment, prefix);\n        }\n        return (T) v2(environment, prefix, targetClass);\n    }\n\n    private static Object v1(Environment environment, String prefix) {\n        try {\n            Class<?> resolverClass = Class.forName(\"org.springframework.boot.bind.RelaxedPropertyResolver\");\n            Constructor<?> resolverConstructor = resolverClass.getDeclaredConstructor(PropertyResolver.class);\n            Method getSubPropertiesMethod = resolverClass.getDeclaredMethod(\"getSubProperties\", String.class);\n            Object resolverObject = resolverConstructor.newInstance(environment);\n            String prefixParam = prefix.endsWith(\".\") ? prefix : prefix + \".\";\n            return getSubPropertiesMethod.invoke(resolverObject, prefixParam);\n        } catch (final ClassNotFoundException | NoSuchMethodException | SecurityException | InstantiationException\n                       | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n            throw new RuntimeException(ex.getMessage(), ex);\n        }\n    }\n\n    private static Object v2(Environment environment, String prefix, Class<?> targetClass) {\n        try {\n            Class<?> binderClass = Class.forName(\"org.springframework.boot.context.properties.bind.Binder\");\n            Method getMethod = binderClass.getDeclaredMethod(\"get\", Environment.class);\n            Method bindMethod = binderClass.getDeclaredMethod(\"bind\", String.class, Class.class);\n            //public static Binder get(Environment environment) {\n            //\t\treturn get(environment, null);\n            //\t} Create a new {@link Binder} instance from the specified environment.\n            Object binderObject = getMethod.invoke(null, environment);\n            String prefixParam = prefix.endsWith(\".\") ? prefix.substring(0, prefix.length() - 1) : prefix;\n            Object bindResultObject = bindMethod.invoke(binderObject, prefixParam, targetClass);\n            Method resultGetMethod = bindResultObject.getClass().getDeclaredMethod(\"get\");\n//            /**\n//             * Return the object that was bound or throw a {@link NoSuchElementException} if no\n//             * value was bound.\n//             * @return the bound value (never {@code null})\n//             * @throws NoSuchElementException if no value was bound\n//             * @see #isBound()\n//             */\n//            public T get() throws NoSuchElementException {\n//                if (this.value == null) {\n//                    throw new NoSuchElementException(\"No value bound\");\n//                }\n//                return this.value;\n//            }\n            return resultGetMethod.invoke(bindResultObject);\n        } catch (final ClassNotFoundException | NoSuchMethodException | SecurityException | IllegalAccessException\n                       | IllegalArgumentException | InvocationTargetException ex) {\n            throw new RuntimeException(ex.getMessage(), ex);\n        }\n    }\n}\n\n```\n\n在Spring Boot 2.x版本中，`org.springframework.boot.bind.RelaxedPropertyResolver`类已经被废弃并移除了。官方文档建议使用`org.springframework.boot.context.properties.bind.BindResult`和`org.springframework.boot.context.properties.bind.Binder`类来代替。<br />具体来说，`BindResult`类封装了配置属性的绑定结果，并提供了一些便捷的方法来获取绑定后的属性值，例如`get()`、`getOrNull()`等。`Binder`类则是一个工厂类，用于创建配置属性绑定器对象，并通过`bind()`方法将属性绑定到Java对象中。<br />需要注意的是，在Spring Boot 2.x版本中，还引入了一种新的注解方式`@ConfigurationProperties`来绑定属性，该方式比`RelaxedPropertyResolver`更加直观和易用。可以通过在应用程序的配置文件中为Java对象指定前缀来实现对属性的绑定，例如：\n```yaml\nmyapp:\n  db:\n    url: jdbc:mysql://localhost:3306/mydb\n    username: root\n    password: password\n```\n然后在Java代码中使用`@ConfigurationProperties(prefix = \"myapp.db\")`注解来指定要绑定的前缀，例如：\n```java\n@Configuration\n@ConfigurationProperties(prefix = \"myapp.db\")\npublic class DataSourceProperties {\n    private String url;\n    private String username;\n    private String password;\n    // ...\n}\n```\n以上示例代码中`DataSourceProperties`类的属性名与配置文件中的属性名一一对应，这样就可以自动将配置文件中的属性值绑定到Java对象中了。\n\n```\n@SuppressWarnings(\"unchecked\")\npublic static <T> T handle(final Environment environment, final String prefix, final Class<T> targetClass) {\n    switch (springBootVersion) {\n        case 1:\n            return (T) v1(environment, prefix);\n        default:\n            return (T) v2(environment, prefix, targetClass);\n    }\n}\n```\n在Java中，**final关键字**可以用来修饰变量、方法和类等元素，表示它们是不可变的或者不可继承的。在这个方法的形参中加上final关键字，主要是为了限制这些参数不被修改，从而增强代码的可靠性和安全性。<br />具体来说，将形参加上final关键字，有以下几个好处：\n\n1. 防止无意间修改参数值：在方法执行的过程中，如果修改了某个参数的值，可能会影响到程序的正确性。将参数标记为final后，编译器会阻止在方法内部对参数进行修改，避免出现意外的错误。\n2. 提高代码可读性：通过使用final关键字，可以让代码更加简洁明了，表达出开发者的意图。同时，也方便其他开发者阅读和理解代码。\n3. 优化代码执行效率：在一定程度上，使用final关键字还可以提高代码的执行效率。因为final变量只需要赋值一次就固定了，所以在运行时可以直接使用变量的值，而不必每次都去重新计算。\n\n总之，将方法的形参加上final关键字，可以使代码更加健壮、简洁、高效，从而提高代码的质量和可维护性。\n\n**@SuppressWarnings(\"unchecked\")** 注解的作用是告诉编译器在忽略范型类型转换警告时不需要提示，即抑制编译器产生\"unchecked warning\"警告信息。\n\n在Java中，泛型是一种静态检查机制，可以在编译时检测一些可能发生的类型转换错误。但是，在某些情况下，由于Java的类型擦除机制，编译器无法检测到所有的类型错误。例如，当使用原始类型时，编译器无法检测到泛型类型转换错误。此时，编译器会产生“unchecked warning”警告信息，提醒开发者可能存在类型安全问题。<br />通过在代码中添加@SuppressWarnings(\"unchecked\")注解，可以告诉编译器忽略对该行代码的类型检查，从而消除编译器产生的“unchecked warning”警告信息。需要注意的是，使用@SuppressWarnings(\"unchecked\")注解应该谨慎，只有在确保该行代码不会产生类型安全问题时才能使用。<br />总之，@SuppressWarnings(\"unchecked\")注解的作用是抑制编译器对Java泛型类型转换的警告信息，通常用于一些不能避免的类型转换操作，但同时也要注意尽可能减少使用该注解，以保证程序的类型安全性。\n\n### v1方法：\n这段代码的作用是获取Spring Boot应用程序中指定前缀的子属性，并返回一个**Map类型的结果**，其中键为属性名，值为属性值。\n\n具体来说，该方法在运行时通过反射机制调用了org.springframework.boot.bind.RelaxedPropertyResolver类中的方法来获取属性。首先，该方法使用Class.forName()方法获取RelaxedPropertyResolver类的Class对象，然后通过getDeclaredConstructor()方法获取该类带有一个PropertyResolver参数的构造器。接着，使用getDeclaredMethod()方法获取getSubProperties()方法的引用，这个方法接受一个字符串参数，表示要获取哪个属性的子属性。最后，通过反射机制创建RelaxedPropertyResolver类的实例，并调用getSubProperties()方法来获取指定前缀的子属性。<br />代码中的prefix参数表示要获取的属性前缀，例如\"spring.datasource\"。该方法将前缀参数传递给getSubProperties()方法，然后将返回的Map类型的结果转换成一个符合预期的Map类型并返回。如果在运行时出现异常，则会抛出一个运行时异常，并将原始异常信息和堆栈跟踪记录下来。<br />需要注意的是，在Spring Boot 2.x版本中，RelaxedPropertyResolver类已经被废弃并移除了。建议使用org.springframework.boot.context.properties.bind.Binder类来替代。\n### v2方法：\n这段代码的作用是使用反射机制绑定Spring Boot应用程序中指定前缀的属性到Java对象中，并返回绑定后的Java对象。<br />具体来说，该方法在运行时通过反射机制调用了org.springframework.boot.context.properties.bind.Binder类中的方法来实现属性绑定。首先，该方法使用Class.forName()方法获取Binder类的Class对象，然后使用getDeclaredMethod()方法获取该类的两个反射方法引用：get()方法和bind()方法。接着，通过反射机制调用get()方法创建Binder对象实例，并将该对象存储在变量binderObject中。然后使用bind()方法将指定前缀的属性绑定到Java对象中。最后，通过反射机制调用Result.get()方法从绑定结果对象中获取绑定的Java对象。<br />需要注意的是，该方法中的prefix参数表示要绑定的前缀，例如\"spring.datasource\"；targetClass参数表示要绑定的Java类类型，例如DataSourceProperties.class。同时，也要注意在运行时出现异常时，会抛出一个运行时异常，并将原始异常信息和堆栈跟踪记录下来。<br />总之，该方法利用反射机制实现了基于前缀的配置属性自动绑定到Java对象上。该方法可以将配置文件中指定前缀的属性值映射、注入到Java对象中，方便进行后续操作。\n\n问：为什么在这段代码中使用反射机制呢？<br />在这段代码中，使用反射机制的主要原因是为了解决接口和实现类之间的依赖关系问题。具体来说，`org.springframework.boot.context.properties.bind.Binder`类是Spring Boot框架内部使用的一个工具类，用于将配置文件中的属性值绑定到Java对象上。如果直接调用`new`关键字创建该类的对象，会导致编译时依赖于该类的具体实现，从而造成程序耦合度过高的问题。<br />使用反射机制可以在运行时动态获取`Binder`类的引用，并根据需要进行方法调用。这种方式可以有效地减少程序的耦合度，提高代码的灵活性和可维护性。另外，通过使用反射机制，我们还可以轻松地替换`Binder`类的具体实现，以满足不同的业务需求。<br />总之，使用反射机制可以帮助我们解决接口和实现类之间的依赖关系问题，从而提高程序的灵活性和可维护性。当然，在使用反射机制时也要注意安全性和效率方面的问题，尽量避免滥用反射。\n\n## DBRouterJoinPoint.java\n```\n@Aspect\n@Component(\"db-router-point\")\npublic class DBRouterJoinPoint {\n\n    private Logger logger = LoggerFactory.getLogger(DBRouterJoinPoint.class);\n\n    @Autowired\n    private DBRouterConfig dbRouterConfig;\n\n    @Pointcut(\"@annotation(cn.bugstack.middleware.db.router.annotation.DBRouter)\")\n    public void aopPoint() {\n    }\n\n    @Around(\"aopPoint() && @annotation(dbRouter)\")\n    public Object doRouter(ProceedingJoinPoint jp, DBRouter dbRouter) throws Throwable {\n        String dbKey = dbRouter.key();\n        if (StringUtils.isBlank(dbKey)) throw new RuntimeException(\"annotation DBRouter key is null！\");\n        \n        String dbKeyAttr = getAttrValue(dbKey, jp.getArgs());\n        int size = dbRouterConfig.getDbCount() * dbRouterConfig.getTbCount();\n       \n        int idx = (size - 1) & (dbKeyAttr.hashCode() ^ (dbKeyAttr.hashCode() >>> 16));\n      \n        int dbIdx = idx / dbRouterConfig.getTbCount() + 1;\n        int tbIdx = idx - dbRouterConfig.getTbCount() * (dbIdx - 1);\n  \n        DBContextHolder.setDBKey(String.format(\"%02d\", dbIdx));\n        DBContextHolder.setTBKey(String.format(\"%02d\", tbIdx));\n        logger.info(\"数据库路由 method：{} dbIdx：{} tbIdx：{}\", getMethod(jp).getName(), dbIdx, tbIdx);\n  \n        try {\n            return jp.proceed();\n        } finally {\n            DBContextHolder.clearDBKey();\n            DBContextHolder.clearTBKey();\n        }\n    }\n\n    private Method getMethod(JoinPoint jp) throws NoSuchMethodException {\n        Signature sig = jp.getSignature();\n        MethodSignature methodSignature = (MethodSignature) sig;\n        return jp.getTarget().getClass().getMethod(methodSignature.getName(), methodSignature.getParameterTypes());\n    }\n\n    public String getAttrValue(String attr, Object[] args) {\n        String filedValue = null;\n        for (Object arg : args) {\n            try {\n                if (StringUtils.isNotBlank(filedValue)) break;\n                filedValue = BeanUtils.getProperty(arg, attr);\n            } catch (Exception e) {\n                logger.error(\"获取路由属性值失败 attr：{}\", attr, e);\n            }\n        }\n        return filedValue;\n    }\n\n}\n```\n\n这个类是一个使用了 Spring AOP 框架的切面（Aspect），主要作用如下：\n● 在使用注解 @DBRouter 标记的方法调用前后，拦截方法调用并动态计算出目标数据源信息，并将其存储到 ThreadLocal 中。\n● 提供一系列辅助方法，例如计算路由、获取 Bean 属性值等。\n具体来说，这个类中的 @Pointcut 注解定义了一个切入点，该切入点用于匹配所有带有 @DBRouter 注解的方法。而 @Around 注解则表示这是一个环绕通知类型的切面，它会在目标方法执行前和执行后都执行逻辑。\n在 doRouter 方法中，首先从 DBRouter 注解中读取路由键，然后根据所需的路由键属性以及当前方法参数列表中的值计算出路由结果，并将其设置到 ThreadLocal 中，以便后续访问数据库时能够正确地选择数据源。最后，在目标方法执行完毕后，使用 finally 块清除 ThreadLocal 中的数据源信息。\n此外，还有一些辅助方法，如 getMethod 方法用于获取 Join Point 对应的方法对象，getAttrValue 方法用于根据属性名称获取 Bean 对象的属性值等。\n总之，这个类的作用是为带有 @DBRouter 注解的方法提供动态路由功能，并使用 Spring AOP 框架实现对方法调用的拦截和增强。\n\nprivate Logger logger = LoggerFactory.getLogger(DBRouterJoinPoint.class);\n这行代码的作用是声明一个日志记录器，用于在程序运行时输出日志信息。具体来说，该日志记录器使用了SLF4J（Simple Logging Facade for Java）框架提供的LoggerFactory.getLogger()静态方法来创建一个Logger对象。其中，DBRouterJoinPoint.class参数表示要获取日志记录器所属的类名。\n在程序开发中，日志记录器是一种非常重要的工具，可以帮助开发者实时监控程序运行状态、调试错误、排查故障等。通过使用日志记录器，开发者可以将程序的运行过程和相关信息输出到指定的日志文件或控制台中，方便进行后续分析和处理。\n在上述代码中，通过声明一个日志记录器，我们可以在程序运行时输出一些有用的信息，例如：\nlogger.info(\"Start executing DB router logic\");\n这条语句可以用来输出程序开始执行DB路由逻辑的提示信息。如果程序出现问题，我们也可以在日志中查看错误信息，例如：\nlogger.error(\"An error occurred while executing DB router logic\", e);\n这条语句可以用来输出程序执行DB路由逻辑时出现的异常信息，并将异常堆栈跟踪记录下来，以便后续进行排查和处理。\n总之，通过使用日志记录器，我们可以更好地了解程序的运行状态，快速定位问题并进行及时处理，提高程序的可靠性和可维护性。\n\n@Pointcut(\"@annotation(com.tute.middleware.db.router.annotation.DBRouter)\")\npublic void aopPoint(){\n\n}\n这段代码是一个AOP切入点（Pointcut），用于定义一个切入点表达式，表示在被@DBRouter注解标记的方法上进行切面增强。\n具体来说，该切入点通过@annotation()表达式来匹配所有被@DBRouter注解标记的方法。当程序中有一个方法被@DBRouter注解标记时，AOP框架会将该方法作为一个连接点（Join Point）进行拦截。然后，根据切面编程的规则，在目标方法执行前、执行后或异常抛出时，执行相应的增强逻辑，例如记录日志、事务管理、安全检查等等。\n需要注意的是，该切入点本身不包含任何增强逻辑，只是一个定义了切入点的空方法。在实际使用中，我们通常会定义多个切入点，并结合切面（Aspect）类一起使用，例如：\n@Aspect\n@Component\npublic class DBRouterAspect {\n \n    private static final Logger logger = LoggerFactory.getLogger(DBRouterAspect.class);\n \n    @Pointcut(\"@annotation(com.tute.middleware.db.router.annotation.DBRouter)\")\n    public void aopPoint() {}\n \n    @Before(\"aopPoint()\")\n    public void before(JoinPoint joinPoint) {\n        logger.info(\"开始执行DB路由逻辑...\");\n    }\n \n    @AfterReturning(pointcut = \"aopPoint()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        logger.info(\"DB路由逻辑执行完毕，返回值为：{}\", result);\n    }\n \n    @AfterThrowing(pointcut = \"aopPoint()\", throwing = \"e\")\n    public void afterThrowing(JoinPoint joinPoint, Exception e) {\n        logger.error(\"DB路由逻辑执行异常，异常信息为：{}\", e);\n    }\n}\n在上述代码中，我们定义了一个DBRouterAspect切面类，用于对所有被@DBRouter注解标记的方法进行增强。该切面类中包括一个切入点（使用了@Pointcut注解定义）、一个前置增强（使用了@Before注解定义）、一个正常返回增强（使用了@AfterReturning注解定义）和一个异常抛出增强（使用了@AfterThrowing注解定义）。前置增强、正常返回增强和异常抛出增强都是在目标方法执行前、执行后或异常抛出时执行的具体逻辑。\n总之，AOP切入点是AOP编程的重要组成部分，可以帮助我们精确地定义需要增强的连接点，从而实现更加灵活和可维护的编程。\n\n在 Spring Boot 中，默认已开启了对注解 AOP 的支持，因此不需要进行额外的配置即可使用注解方式的 AOP。具体来说，只需要满足以下两个条件即可：\n1. 在工程中引入 spring-boot-starter-aop 依赖。\n2. 定义一个切面类，并使用 @Aspect 注解标记该类，然后在目标方法上使用注解来标识需要被拦截和增强的方法。\n当应用程序启动时，Spring Boot 将自动扫描项目中定义的所有 @Aspect 类，并根据其定义的切入点和通知类型来创建代理对象，从而实现对目标方法的拦截和增强。\n总之，在 Spring Boot 中使用注解方式的 AOP 是非常方便的，只需要按照上述步骤即可完成配置，无需进行其他复杂的配置。\n\nStringUtils.isBlank(dbKey) 和 StringUtils.isEmpty(dbKey) 是 Apache Commons Lang 库中的两个字符串处理方法，它们的区别如下：\n\n* StringUtils.isBlank(dbKey) ：判断给定字符串是否为空或仅包含空格、制表符、换行符等不可见字符，如果是则返回 true，否则返回 false。例如，如果 dbKey 为 \" \" 或 \"\\t\\n\" 等，则返回 true，否则返回 false。\n\n* StringUtils.isEmpty(dbKey) ：判断给定字符串是否为空或长度为 0，如果是则返回 true，否则返回 false。例如，如果 dbKey 为 \"\" 或 null，则返回 true，否则返回 false。\n因此，可以总结出以下区别：\n\n* isBlank() 方法考虑了除空字符串外的其他所有不可见字符，而 isEmpty() 方法不考虑这些字符。\n\n* isEmpty() 方法只检查字符串是否为空或具有零长度，而 isBlank() 方法还检查字符串是否全部由空格组成。\n在使用时，需要根据具体情况来选择使用哪个方法。如果需要判断一个字符串是否为空或者只包含空格、制表符、回车符等不可见字符，应该使用 isBlank()；如果只需要判断一个字符串是否为空或长度为 0，则可以使用 isEmpty()。\n\n\n@Around(\"aopPoint() && @annotation(dbRouter)\") 是一个用于定义切面的注解。它是 Spring AOP 框架中的一部分，用于在运行时根据指定的切入点表达式（Pointcut expression）拦截方法调用，并织入额外的逻辑。\n具体来说，这个注解的含义如下：\n\n* @Around 表示这个注解是一个环绕通知类型的切面，即会在目标方法执行前和执行后都执行一些逻辑。\n\n* \"aopPoint() && @annotation(dbRouter)\" 是一个切入点表达式，用于指定需要被拦截的目标方法。它由两个部分组成： \n  \n  * aopPoint()：表示使用名为 aopPoint 的切入点，该切入点是一个方法，用于定义需要被拦截的目标方法。这个切入点可能包含多个匹配规则，例如 execution()、within()、args() 等等。\n  * @annotation(dbRouter)：表示目标方法必须带有 dbRouter 注解才会被拦截。这里的 dbRouter 是自定义注解类型的名称，它可以作为一个切入点的限定条件，只有符合条件的目标方法才会被拦截。\n因此，@Around(\"aopPoint() && @annotation(dbRouter)\") 注解的作用是定义一个环绕通知切面，该切面会拦截带有 dbRouter 注解的目标方法，并在目标方法执行前和执行后织入额外的逻辑。\n\n在 Spring AOP 框架中，切入点表达式（Pointcut expression）由两个部分组成：切入点和匹配规则。\n切入点定义了一个或多个方法的集合，而匹配规则则指定了哪些方法可以被包含在切入点中。匹配规则常用的有以下几种：\n\n* execution()：用于匹配方法执行的 Join Point（连接点），并且需要指定方法的签名。例如，execution(public * com.example.demo.*.*(..)) 表示匹配所有公共方法。\n\n* within()：用于匹配某个类或某个包内的所有 Join Point，需要指定类名或包名。例如，within(com.example.demo.service.*) 表示匹配 com.example.demo.service 包下的所有 Join Point。\n\n* this() / target() / args()：用于匹配当前正在被代理的对象、目标对象或方法参数等 Join Point 相关的信息。\n\n* @annotation() / @within() / @target()：用于匹配带有特定注解的 Join Point，需要指定注解类型。例如，@annotation(MyAnnotation) 表示匹配所有带有 MyAnnotation 注解的\n方法。\n\n这些匹配规则可以单独使用，也可以结合起来使用，以定义更精确的切入点。在实际开发中，我们可以根据具体需求选择合适的匹配规则来定义切入点，以实现拦截目标方法并织入额外逻辑的目的。\n路由算法\n```\npublic Object doRouter(ProceedingJoinPoint jp, DBRouter dbRouter) throws Throwable {\n        String dbKey = dbRouter.key();\n        if (StringUtils.isBlank(dbKey)) throw new RuntimeException(\"annotation DBRouter key is null！\");\n        \n        String dbKeyAttr = getAttrValue(dbKey, jp.getArgs());\n        int size = dbRouterConfig.getDbCount() * dbRouterConfig.getTbCount();\n       \n        int idx = (size - 1) & (dbKeyAttr.hashCode() ^ (dbKeyAttr.hashCode() >>> 16));\n      \n        int dbIdx = idx / dbRouterConfig.getTbCount() + 1;\n        int tbIdx = idx - dbRouterConfig.getTbCount() * (dbIdx - 1);\n  \n        DBContextHolder.setDBKey(String.format(\"%02d\", dbIdx));\n        DBContextHolder.setTBKey(String.format(\"%02d\", tbIdx));\n        logger.info(\"数据库路由 method：{} dbIdx：{} tbIdx：{}\", getMethod(jp).getName(), dbIdx, tbIdx);\n  \n        try {\n            return jp.proceed();\n        } finally {\n            DBContextHolder.clearDBKey();\n            DBContextHolder.clearTBKey();\n        }\n    }\n```\n\n这段代码实现了一个数据库的路由功能。具体来说，它基于传入的注解（DBRouter）中的键值（key），计算出该操作要使用的数据库和表的索引，并将其存储在上下文中（DBContextHolder）。这样，在整个操作过程中，就可以根据上下文中的索引选择正确的数据库和表，而不需要显式地指定或硬编码。最终，无论执行是否成功，上下文都会被清除以释放资源。\n\n### 为什么使用扰动函数\n\n理论上来说字符串的hashCode是一个int类型值，那可以直接作为数组下标了，且不会出现碰撞。但是这个hashCode的取值范围是[-2147483648, 2147483647]，有将近40亿的长度，谁也不能把数组初始化的这么大，内存也是放不下的。\n我们默认初始化的Map大小是16个长度 DEFAULT_INITIAL_CAPACITY = 1 << 4，所以获取的Hash值并不能直接作为下标使用，需要与数组长度进行取模运算得到一个下标值，也就是我们上面做的散列列子。\n那么，hashMap源码这里不只是直接获取哈希值，还进行了一次扰动计算，(h = key.hashCode()) ^ (h >>> 16)。把哈希值右移16位，也就正好是自己长度的一半，之后与原哈希值做异或运算，这样就混合了原哈希值中的高位和低位，增大了**随机性**。\n","slug":"dbRouter","published":1,"updated":"2023-05-15T14:48:40.841Z","_id":"clhhrqv3y0000s0we4psba5ev","comments":1,"layout":"post","photos":[],"link":"","content":"<p>当业务变得极其庞大的时候，原有的单表可能不足以维持业务的正常发展，此时就需要进行分库分表操作，来缓解数据库的压力</p>\n<span id=\"more\"></span>\n<h1 id=\"dbRouter\"><a href=\"#dbRouter\" class=\"headerlink\" title=\"dbRouter\"></a>dbRouter</h1><p><img src=\"/2023/05/10/dbRouter/01.png\" alt=\"image.png\"></p>\n<h2 id=\"DBRouter-java\"><a href=\"#DBRouter-java\" class=\"headerlink\" title=\"DBRouter.java\"></a>DBRouter.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> DBRouter &#123;<br>    String <span class=\"hljs-title function_\">key</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>@Documented</strong>是Java中的一个元注解，它用于指示被该注解修饰的注解是否会被包含在JavaDoc文档中。<br />具体来说，当一个注解添加了@Documented注解后，使用该注解修饰的类、方法或字段等等，在生成JavaDoc文档时，这些注解会被包含在文档中，并能够被文档工具展示出来。如果没有使用@Documented注解，则这些注解不会被包含在JavaDoc文档中。<br />举个例子，比如在编写自己的Java框架或库时，可能会定义一些自定义注解，这些注解可能是用来描述类、方法、参数等信息的，如果想让其他人更好地了解这些注解的作用以及如何使用它们，就可以为这些注解添加@Documented注解，这样在生成JavaDoc文档时，这些注解就可以被包含进去，方便用户查看和阅读。<br />因此，@Documented注解的作用就是告诉Java编译器，将被该注解修饰的注解包含在JavaDoc文档中，使得开发者可以更方便地了解和使用这些注解。</p>\n<p><strong>@Retention(RetentionPolicy.RUNTIME)</strong> 是Java中的一个元注解，它用于指示被该注解修饰的注解的保留策略，即在什么时候该注解会失效。<br />具体来说，@Retention(RetentionPolicy.RUNTIME)表示被该注解修饰的注解会在运行时保留，并可以通过反射机制获取到。换句话说，如果没有使用@Retention(RetentionPolicy.RUNTIME)注解，则该注解修饰的注解会在编译时被丢弃，而无法在程序运行时获取到。<br />举个例子，假设我们定义了一个自定义注解@MyAnnotation，并希望在程序运行时能够通过反射获取到该注解的信息，例如注解的属性值等等。此时就需要为@MyAnnotation添加@Retention(RetentionPolicy.RUNTIME)注解，以便让该注解在运行时保持不变。<br />因此，@Retention(RetentionPolicy.RUNTIME)注解的作用是指定被该注解修饰的注解的保留策略为运行时保留，并且可以通过反射机制获取注解信息，这对于编写某些框架或库非常有用。</p>\n<p><strong>@Target({ElementType.TYPE, ElementType.METHOD})</strong> 是Java中的一个元注解，用于指定被该注解修饰的注解可以应用的目标元素类型。<br />具体来说，@Target({ElementType.TYPE, ElementType.METHOD})表示被该注解修饰的注解可以应用在类、接口和枚举类型上，同时也可以应用在方法上。如果尝试将这个注解用于其他的目标元素类型，如属性、构造函数等，则会编译错误。<br />举个例子，假设我们定义了一个自定义注解@MyAnnotation，并希望让这个注解可以用于类、接口和枚举类型上，同时也可以用于方法上。此时就需要为@MyAnnotation添加@Target({ElementType.TYPE, ElementType.METHOD})注解，以便限制该注解的使用范围，避免出现不合理或者意外的情况。<br />因此，@Target({ElementType.TYPE, ElementType.METHOD})注解的作用是指定被该注解修饰的注解可以应用的目标元素类型，它可以限制注解的使用范围，使得注解的作用更加明确和准确。</p>\n<h2 id=\"DBContextHolder-java\"><a href=\"#DBContextHolder-java\" class=\"headerlink\" title=\"DBContextHolder.java\"></a>DBContextHolder.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DBContextHolder</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;String&gt; dbKey = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;String&gt; tbKey = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br>    <span class=\"hljs-comment\">//get方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getDBKey</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> dbKey.get();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getTBKey</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> tbKey.get();<br>    &#125;<br><br>    <span class=\"hljs-comment\">//set方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setDBKey</span><span class=\"hljs-params\">(String dbKeyIdx)</span>&#123;<br>        dbKey.set(dbKeyIdx);<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setTBKey</span><span class=\"hljs-params\">(String tbKeyIdx)</span>&#123;<br>        tbKey.set(tbKeyIdx);<br>    &#125;<br>    <span class=\"hljs-comment\">//清空key</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clearDBKey</span><span class=\"hljs-params\">()</span>&#123;<br>        dbKey.remove();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clearTBKey</span><span class=\"hljs-params\">()</span>&#123;<br>        tbKey.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这个类是一个线程池上下文管理类，主要用来管理当前线程使用的数据库和表的名称。<br />具体来说，这个类中定义了两个ThreadLocal类型的静态变量：dbKey和tbKey。这两个变量分别用于存储当前线程使用的数据库名称和表名称，它们的值可以在应用程序运行时通过代码来设置或者获取。<br />通过使用这个类，我们可以在应用程序中动态切换数据库和表，而无需修改实际执行查询和操作的代码。例如，在某些情况下需要进行读写分离，可以在读操作前将dbKey设置为读库的名称，在写操作前将其设置为写库的名称；在某些情况下需要动态选择表名，可以先通过某种规则计算出表名，然后将其设置到tbKey中，再执行相关操作。<br />总之，DBContextHolder类的作用是提供一种机制，让应用程序可以动态地切换数据库和表，从而更加灵活地控制数据的访问和操作。该类通常会与其他数据源相关组件（如AbstractRoutingDataSource）配合使用，以实现多数据源或者动态数据源切换等功能。</p>\n<p>**remove()**方法是ThreadLocal类中的一个实例方法，用于将当前线程绑定的变量值删除。在DBContextHolder类中，clearDBKey()和clearTBKey()方法分别调用了dbKey.remove()和tbKey.remove()方法，用于清空当前线程绑定的数据库和表名称。<br />由于ThreadLocal对象通常是与线程一一对应的，因此使用remove()方法可以防止内存泄漏。如果不清除线程绑定的变量值，可能会出现以下情况之一：</p>\n<ul>\n<li>当前线程结束后，ThreadLocal对象仍然持有该变量的引用，导致该变量无法被GC回收，从而发生内存泄漏。</li>\n<li>由于线程池的复用机制，下一个使用该线程的任务可能会意外地继承上一个任务的线程绑定变量值，导致程序出现错误或者异常行为。</li>\n</ul>\n<p>因此，在使用ThreadLocal时，最好在不再需要使用线程绑定变量的时候调用remove()方法进行清理。在DBContextHolder类中，clearDBKey()和clearTBKey()方法的作用就是通过调用remove()方法来清空当前线程绑定的数据库和表名称，以便下一次使用线程时，这些变量的值不会影响到其他任务。</p>\n<h2 id=\"DynamicDataSource-java\"><a href=\"#DynamicDataSource-java\" class=\"headerlink\" title=\"DynamicDataSource.java\"></a>DynamicDataSource.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicDataSource</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractRoutingDataSource</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title function_\">determineCurrentLookupKey</span><span class=\"hljs-params\">()</span> &#123;<br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;db&quot;</span> + DBContextHolder.getDBKey();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>AbstractRoutingDataSource在Mybatis中引入了spring-jdbc依赖，所以不必刻意再次单独引入spring-jdbc依赖<br /><strong>AbstractRoutingDataSource抽象类</strong><br />AbstractRoutingDataSource是Spring框架中的一个数据源类，它可以根据特定的规则动态切换应用程序连接到的数据源。<br />在某些应用程序中，需要使用多个数据库（例如：读写分离），此时就需要使用AbstractRoutingDataSource来实现动态切换数据源。通过继承AbstractRoutingDataSource类并实现determineCurrentLookupKey()方法，可以定义选择数据源的逻辑，例如基于线程上下文、基于请求参数、基于用户权限等。<strong>当应用程序需要访问数据库时，Spring框架会自动调用determineCurrentLookupKey()方法获取当前要使用的数据源，然后将数据源交给JdbcTemplate或其他数据访问组件使用。</strong><br />因此，AbstractRoutingDataSource的作用是提供一种机制，让Spring应用程序可以基于运行时的条件选择不同的数据源，并且无需修改现有代码即可实现数据源的切换。</p>\n<h2 id=\"DataSourceAutoConfig-java\"><a href=\"#DataSourceAutoConfig-java\" class=\"headerlink\" title=\"DataSourceAutoConfig.java\"></a>DataSourceAutoConfig.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.tute.middleware.db.router.config;<br><br><span class=\"hljs-keyword\">import</span> com.tute.middleware.db.router.DBRouterConfig;<br><span class=\"hljs-keyword\">import</span> com.tute.middleware.db.router.dynamic.DynamicDataSource;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.EnvironmentAware;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.core.env.Environment;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;<br><br><span class=\"hljs-keyword\">import</span> javax.sql.DataSource;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 2023/5/10</span><br><span class=\"hljs-comment\">**/</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceAutoConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">EnvironmentAware</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, Map&lt;String,Object&gt;&gt; dataSourceMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> dbCount; <span class=\"hljs-comment\">//数据库的数量</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> tbCount; <span class=\"hljs-comment\">//表的数量</span><br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DBRouterConfig <span class=\"hljs-title function_\">dbRouterConfig</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DBRouterConfig</span>(dbCount,tbCount);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title function_\">dataSource</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-comment\">// 创建数据源</span><br>        Map&lt;Object,Object&gt; targetDataSource = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (String dbInfo : dataSourceMap.keySet()) &#123;<br>            <span class=\"hljs-comment\">//根据外层Map的KeySet的key拿到内层的Map</span><br>            Map&lt;String, Object&gt; objMap = dataSourceMap.get(dbInfo);<br>            targetDataSource.put(dbInfo,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DriverManagerDataSource</span>(<br>                objMap.get(<span class=\"hljs-string\">&quot;url&quot;</span>).toString(),<br>                objMap.get(<span class=\"hljs-string\">&quot;username&quot;</span>).toString(),<br>                objMap.get(<span class=\"hljs-string\">&quot;password&quot;</span>).toString()));<br>        &#125;<br>        <span class=\"hljs-comment\">//设置数据源</span><br>        <span class=\"hljs-type\">DynamicDataSource</span> <span class=\"hljs-variable\">dynamicDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DynamicDataSource</span>();<br>        dynamicDataSource.setTargetDataSources(targetDataSource);<br>        <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">        这行代码是将一个targetDataSource数据源对象设置为动态数据源dynamicDataSource的</span><br><span class=\"hljs-comment\">        目标数据源。在Spring中，通过DynamicDataSource和AbstractRoutingDataSource两个类的配合使用，</span><br><span class=\"hljs-comment\">        可以实现动态切换多个数据源。</span><br><span class=\"hljs-comment\">\t\t具体来说，DynamicDataSource是对AbstractRoutingDataSource的一</span><br><span class=\"hljs-comment\">        个扩展，它除了支持动态数据源的切换外，还支持针对不同的查询/操作类型选择不同的数据源。</span><br><span class=\"hljs-comment\">        setTargetDataSources()方法就是用于设置动态数据源的目标数据源的，</span><br><span class=\"hljs-comment\">        即将targetDataSource对象作为参数传递进去，表示该动态数据源会从targetDataSource中获取</span><br><span class=\"hljs-comment\">        所有可用的数据源。</span><br><span class=\"hljs-comment\">\t\t在实际应用中，targetDataSource通常是一个Map类型的对象，用于存储多个数据源对象，</span><br><span class=\"hljs-comment\">\t\t例如读写分离、分表等场景下需要使用多个数据源。</span><br><span class=\"hljs-comment\">        每个数据源需要有一个标识符，如数据库名称或者其他标识符，以便在程序运行时进行调用和切换。</span><br><span class=\"hljs-comment\">        设置了目标数据源后，动态数据源就可以根据特定的规则或条件来动态地切换数据源，</span><br><span class=\"hljs-comment\">        并且能够确保在当前线程中只有一个数据源被使用。</span><br><span class=\"hljs-comment\">        因此，这行代码的作用是将targetDataSource设置为动态数据源的目标数据源，</span><br><span class=\"hljs-comment\">        使得动态数据源可以从targetDataSource中获取到所有可用的数据源，</span><br><span class=\"hljs-comment\">        并在需要访问数据时可以自动切换数据源。</span><br><span class=\"hljs-comment\">\t\t*/</span><br>        <span class=\"hljs-keyword\">return</span> dynamicDataSource;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setEnvironment</span><span class=\"hljs-params\">(Environment environment)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<pre><code class=\"hljs\">        targetDataSource.put(dbInfo,new DriverManagerDataSource(\n            objMap.get(&quot;url&quot;).toString(),\n            objMap.get(&quot;username&quot;).toString(),\n            objMap.get(&quot;password&quot;).toString()));\n</code></pre>\n</blockquote>\n<p>首先，这段代码中使用了<code>new DriverManagerDataSource()</code>语句创建了一个<code>DriverManagerDataSource</code>对象，并通过构造函数传入了数据库连接URL、用户名和密码等信息。<code>DriverManagerDataSource</code>是Spring JDBC框架中的一个数据源实现类，它可以根据提供的数据库连接信息来创建一个JDBC连接。<br />然后，将创建的<code>DriverManagerDataSource</code>对象存储到<code>targetDataSource</code>中，其中<code>dbInfo</code>表示该数据源的名称或者标识符，通常是一个字符串；<code>targetDataSource.put(dbInfo, dataSource)</code>方法将该数据源对象和对应的名称关联起来并存储到<code>targetDataSource</code>中，以便在程序运行时进行调用和切换。<br />通常情况下，<code>targetDataSource</code>是一个Map类型的对象，用于存储多个数据源对象，例如读写分离、分表等场景下需要使用多个数据源。在实际应用中，<code>targetDataSource</code>通常会被注入到<code>AbstractRoutingDataSource</code>类中，以实现数据源的动态切换功能。<br />综上所述，这段代码的作用是创建一个数据库连接，并将其存储到<code>targetDataSource</code>中，以便在需要访问对应数据库时可以从<code>targetDataSource</code>中获取到正确的连接。</p>\n<blockquote>\n<p> dynamicDataSource.setTargetDataSources(targetDataSource);</p>\n</blockquote>\n<p> 这行代码是将一个<code>targetDataSource</code>数据源对象设置为动态数据源<code>dynamicDataSource</code>的目标数据源。在Spring中，通过<code>DynamicDataSource</code>和<code>AbstractRoutingDataSource</code>两个类的配合使用，可以实现动态切换多个数据源。<br />具体来说，<code>DynamicDataSource</code>是对<code>AbstractRoutingDataSource</code>的一个扩展，它除了支持动态数据源的切换外，还支持针对不同的查询&#x2F;操作类型选择不同的数据源。<code>setTargetDataSources()</code>方法就是用于设置动态数据源的目标数据源的，即将<code>targetDataSource</code>对象作为参数传递进去，表示该动态数据源会从<code>targetDataSource</code>中获取所有可用的数据源。<br />在实际应用中，<code>targetDataSource</code>通常是一个Map类型的对象，用于存储多个数据源对象，例如读写分离、分表等场景下需要使用多个数据源。每个数据源需要有一个标识符，如数据库名称或者其他标识符，以便在程序运行时进行调用和切换。设置了目标数据源后，动态数据源就可以根据特定的规则或条件来动态地切换数据源，并且能够确保在当前线程中只有一个数据源被使用。<br />因此，这行代码的作用是将<code>targetDataSource</code>设置为动态数据源的目标数据源，使得动态数据源可以从<code>targetDataSource</code>中获取到所有可用的数据源，并在需要访问数据时可以自动切换数据源。</p>\n<h2 id=\"DataSourceAutoConfig-java-1\"><a href=\"#DataSourceAutoConfig-java-1\" class=\"headerlink\" title=\"DataSourceAutoConfig.java\"></a>DataSourceAutoConfig.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 2023/5/10</span><br><span class=\"hljs-comment\">**/</span><br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceAutoConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">EnvironmentAware</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, Map&lt;String, Object&gt;&gt; dataSourceMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> dbCount; <span class=\"hljs-comment\">//数据库的数量</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> tbCount; <span class=\"hljs-comment\">//表的数量</span><br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DBRouterConfig <span class=\"hljs-title function_\">dbRouterConfig</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DBRouterConfig</span>(dbCount, tbCount);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title function_\">dataSource</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 创建数据源</span><br>        Map&lt;Object, Object&gt; targetDataSource = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (String dbInfo : dataSourceMap.keySet()) &#123;<br>            <span class=\"hljs-comment\">//根据外层Map的KeySet的key拿到内层的Map</span><br>            Map&lt;String, Object&gt; objMap = dataSourceMap.get(dbInfo);<br>            targetDataSource.put(dbInfo, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DriverManagerDataSource</span>(<br>                objMap.get(<span class=\"hljs-string\">&quot;url&quot;</span>).toString(),<br>                objMap.get(<span class=\"hljs-string\">&quot;username&quot;</span>).toString(),<br>                objMap.get(<span class=\"hljs-string\">&quot;password&quot;</span>).toString()));<br>        &#125;<br>        <span class=\"hljs-comment\">//设置数据源</span><br>        <span class=\"hljs-type\">DynamicDataSource</span> <span class=\"hljs-variable\">dynamicDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DynamicDataSource</span>();<br>        dynamicDataSource.setTargetDataSources(targetDataSource);<br>        <span class=\"hljs-keyword\">return</span> dynamicDataSource;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setEnvironment</span><span class=\"hljs-params\">(Environment environment)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefix</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;router.jdbc.datasource&quot;</span>;<br>        dbCount = Integer.parseInt(Objects.requireNonNull(environment.getProperty(prefix + <span class=\"hljs-string\">&quot;dbCount&quot;</span>)));<br>        tbCount = Integer.parseInt(Objects.requireNonNull(environment.getProperty(prefix + <span class=\"hljs-string\">&quot;tbCount&quot;</span>)));<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">dataSources</span> <span class=\"hljs-operator\">=</span> environment.getProperty(prefix + <span class=\"hljs-string\">&quot;list&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (String dbInfo : dataSources.split(<span class=\"hljs-string\">&quot;,&quot;</span>)) &#123;<br>            Map&lt;String, Object&gt; dataSourceProps = PropertyUtil.handle(environment, prefix + dbInfo, Map.class);<br>            dataSourceMap.put(dbInfo, dataSourceProps);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"PropertyUtil-java\"><a href=\"#PropertyUtil-java\" class=\"headerlink\" title=\"PropertyUtil.java\"></a>PropertyUtil.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 2023/5/10</span><br><span class=\"hljs-comment\"> **/</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PropertyUtil</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">springBootVersion</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;org.springframework.boot.bind.RelaxedPropertyResolver&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            springBootVersion = <span class=\"hljs-number\">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; T <span class=\"hljs-title function_\">handle</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Environment environment, <span class=\"hljs-keyword\">final</span> String prefix, <span class=\"hljs-keyword\">final</span> Class&lt;T&gt; targetClass)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (springBootVersion == <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> (T) v1(environment, prefix);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> (T) v2(environment, prefix, targetClass);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object <span class=\"hljs-title function_\">v1</span><span class=\"hljs-params\">(Environment environment, String prefix)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class&lt;?&gt; resolverClass = Class.forName(<span class=\"hljs-string\">&quot;org.springframework.boot.bind.RelaxedPropertyResolver&quot;</span>);<br>            Constructor&lt;?&gt; resolverConstructor = resolverClass.getDeclaredConstructor(PropertyResolver.class);<br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">getSubPropertiesMethod</span> <span class=\"hljs-operator\">=</span> resolverClass.getDeclaredMethod(<span class=\"hljs-string\">&quot;getSubProperties&quot;</span>, String.class);<br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">resolverObject</span> <span class=\"hljs-operator\">=</span> resolverConstructor.newInstance(environment);<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefixParam</span> <span class=\"hljs-operator\">=</span> prefix.endsWith(<span class=\"hljs-string\">&quot;.&quot;</span>) ? prefix : prefix + <span class=\"hljs-string\">&quot;.&quot;</span>;<br>            <span class=\"hljs-keyword\">return</span> getSubPropertiesMethod.invoke(resolverObject, prefixParam);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> ClassNotFoundException | NoSuchMethodException | SecurityException | InstantiationException<br>                       | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(ex.getMessage(), ex);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object <span class=\"hljs-title function_\">v2</span><span class=\"hljs-params\">(Environment environment, String prefix, Class&lt;?&gt; targetClass)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class&lt;?&gt; binderClass = Class.forName(<span class=\"hljs-string\">&quot;org.springframework.boot.context.properties.bind.Binder&quot;</span>);<br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">getMethod</span> <span class=\"hljs-operator\">=</span> binderClass.getDeclaredMethod(<span class=\"hljs-string\">&quot;get&quot;</span>, Environment.class);<br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">bindMethod</span> <span class=\"hljs-operator\">=</span> binderClass.getDeclaredMethod(<span class=\"hljs-string\">&quot;bind&quot;</span>, String.class, Class.class);<br>            <span class=\"hljs-comment\">//public static Binder get(Environment environment) &#123;</span><br>            <span class=\"hljs-comment\">//\t\treturn get(environment, null);</span><br>            <span class=\"hljs-comment\">//\t&#125; Create a new &#123;@link Binder&#125; instance from the specified environment.</span><br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">binderObject</span> <span class=\"hljs-operator\">=</span> getMethod.invoke(<span class=\"hljs-literal\">null</span>, environment);<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefixParam</span> <span class=\"hljs-operator\">=</span> prefix.endsWith(<span class=\"hljs-string\">&quot;.&quot;</span>) ? prefix.substring(<span class=\"hljs-number\">0</span>, prefix.length() - <span class=\"hljs-number\">1</span>) : prefix;<br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">bindResultObject</span> <span class=\"hljs-operator\">=</span> bindMethod.invoke(binderObject, prefixParam, targetClass);<br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">resultGetMethod</span> <span class=\"hljs-operator\">=</span> bindResultObject.getClass().getDeclaredMethod(<span class=\"hljs-string\">&quot;get&quot;</span>);<br><span class=\"hljs-comment\">//            /**</span><br><span class=\"hljs-comment\">//             * Return the object that was bound or throw a &#123;@link NoSuchElementException&#125; if no</span><br><span class=\"hljs-comment\">//             * value was bound.</span><br><span class=\"hljs-comment\">//             * @return the bound value (never &#123;@code null&#125;)</span><br><span class=\"hljs-comment\">//             * @throws NoSuchElementException if no value was bound</span><br><span class=\"hljs-comment\">//             * @see #isBound()</span><br><span class=\"hljs-comment\">//             */</span><br><span class=\"hljs-comment\">//            public T get() throws NoSuchElementException &#123;</span><br><span class=\"hljs-comment\">//                if (this.value == null) &#123;</span><br><span class=\"hljs-comment\">//                    throw new NoSuchElementException(&quot;No value bound&quot;);</span><br><span class=\"hljs-comment\">//                &#125;</span><br><span class=\"hljs-comment\">//                return this.value;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            <span class=\"hljs-keyword\">return</span> resultGetMethod.invoke(bindResultObject);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> ClassNotFoundException | NoSuchMethodException | SecurityException | IllegalAccessException<br>                       | IllegalArgumentException | InvocationTargetException ex) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(ex.getMessage(), ex);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>在Spring Boot 2.x版本中，<code>org.springframework.boot.bind.RelaxedPropertyResolver</code>类已经被废弃并移除了。官方文档建议使用<code>org.springframework.boot.context.properties.bind.BindResult</code>和<code>org.springframework.boot.context.properties.bind.Binder</code>类来代替。<br />具体来说，<code>BindResult</code>类封装了配置属性的绑定结果，并提供了一些便捷的方法来获取绑定后的属性值，例如<code>get()</code>、<code>getOrNull()</code>等。<code>Binder</code>类则是一个工厂类，用于创建配置属性绑定器对象，并通过<code>bind()</code>方法将属性绑定到Java对象中。<br />需要注意的是，在Spring Boot 2.x版本中，还引入了一种新的注解方式<code>@ConfigurationProperties</code>来绑定属性，该方式比<code>RelaxedPropertyResolver</code>更加直观和易用。可以通过在应用程序的配置文件中为Java对象指定前缀来实现对属性的绑定，例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">myapp:</span><br>  <span class=\"hljs-attr\">db:</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/mydb</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">password</span><br></code></pre></td></tr></table></figure>\n<p>然后在Java代码中使用<code>@ConfigurationProperties(prefix = &quot;myapp.db&quot;)</code>注解来指定要绑定的前缀，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ConfigurationProperties(prefix = &quot;myapp.db&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceProperties</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String url;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>以上示例代码中<code>DataSourceProperties</code>类的属性名与配置文件中的属性名一一对应，这样就可以自动将配置文件中的属性值绑定到Java对象中了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><span class=\"hljs-meta\">@SuppressWarnings</span>(<span class=\"hljs-string\">&quot;unchecked&quot;</span>)<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">T</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">T</span> handle(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Environment</span> environment, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-keyword\">prefix</span>, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Class</span>&lt;<span class=\"hljs-type\">T</span>&gt; targetClass) &#123;<br>    <span class=\"hljs-keyword\">switch</span> (springBootVersion) &#123;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">T</span>) v1(environment, <span class=\"hljs-keyword\">prefix</span>);<br>        <span class=\"hljs-keyword\">default</span>:<br>            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">T</span>) v2(environment, <span class=\"hljs-keyword\">prefix</span>, targetClass);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在Java中，<strong>final关键字</strong>可以用来修饰变量、方法和类等元素，表示它们是不可变的或者不可继承的。在这个方法的形参中加上final关键字，主要是为了限制这些参数不被修改，从而增强代码的可靠性和安全性。<br />具体来说，将形参加上final关键字，有以下几个好处：</p>\n<ol>\n<li>防止无意间修改参数值：在方法执行的过程中，如果修改了某个参数的值，可能会影响到程序的正确性。将参数标记为final后，编译器会阻止在方法内部对参数进行修改，避免出现意外的错误。</li>\n<li>提高代码可读性：通过使用final关键字，可以让代码更加简洁明了，表达出开发者的意图。同时，也方便其他开发者阅读和理解代码。</li>\n<li>优化代码执行效率：在一定程度上，使用final关键字还可以提高代码的执行效率。因为final变量只需要赋值一次就固定了，所以在运行时可以直接使用变量的值，而不必每次都去重新计算。</li>\n</ol>\n<p>总之，将方法的形参加上final关键字，可以使代码更加健壮、简洁、高效，从而提高代码的质量和可维护性。</p>\n<p><strong>@SuppressWarnings(“unchecked”)</strong> 注解的作用是告诉编译器在忽略范型类型转换警告时不需要提示，即抑制编译器产生”unchecked warning”警告信息。</p>\n<p>在Java中，泛型是一种静态检查机制，可以在编译时检测一些可能发生的类型转换错误。但是，在某些情况下，由于Java的类型擦除机制，编译器无法检测到所有的类型错误。例如，当使用原始类型时，编译器无法检测到泛型类型转换错误。此时，编译器会产生“unchecked warning”警告信息，提醒开发者可能存在类型安全问题。<br />通过在代码中添加@SuppressWarnings(“unchecked”)注解，可以告诉编译器忽略对该行代码的类型检查，从而消除编译器产生的“unchecked warning”警告信息。需要注意的是，使用@SuppressWarnings(“unchecked”)注解应该谨慎，只有在确保该行代码不会产生类型安全问题时才能使用。<br />总之，@SuppressWarnings(“unchecked”)注解的作用是抑制编译器对Java泛型类型转换的警告信息，通常用于一些不能避免的类型转换操作，但同时也要注意尽可能减少使用该注解，以保证程序的类型安全性。</p>\n<h3 id=\"v1方法：\"><a href=\"#v1方法：\" class=\"headerlink\" title=\"v1方法：\"></a>v1方法：</h3><p>这段代码的作用是获取Spring Boot应用程序中指定前缀的子属性，并返回一个<strong>Map类型的结果</strong>，其中键为属性名，值为属性值。</p>\n<p>具体来说，该方法在运行时通过反射机制调用了org.springframework.boot.bind.RelaxedPropertyResolver类中的方法来获取属性。首先，该方法使用Class.forName()方法获取RelaxedPropertyResolver类的Class对象，然后通过getDeclaredConstructor()方法获取该类带有一个PropertyResolver参数的构造器。接着，使用getDeclaredMethod()方法获取getSubProperties()方法的引用，这个方法接受一个字符串参数，表示要获取哪个属性的子属性。最后，通过反射机制创建RelaxedPropertyResolver类的实例，并调用getSubProperties()方法来获取指定前缀的子属性。<br />代码中的prefix参数表示要获取的属性前缀，例如”spring.datasource”。该方法将前缀参数传递给getSubProperties()方法，然后将返回的Map类型的结果转换成一个符合预期的Map类型并返回。如果在运行时出现异常，则会抛出一个运行时异常，并将原始异常信息和堆栈跟踪记录下来。<br />需要注意的是，在Spring Boot 2.x版本中，RelaxedPropertyResolver类已经被废弃并移除了。建议使用org.springframework.boot.context.properties.bind.Binder类来替代。</p>\n<h3 id=\"v2方法：\"><a href=\"#v2方法：\" class=\"headerlink\" title=\"v2方法：\"></a>v2方法：</h3><p>这段代码的作用是使用反射机制绑定Spring Boot应用程序中指定前缀的属性到Java对象中，并返回绑定后的Java对象。<br />具体来说，该方法在运行时通过反射机制调用了org.springframework.boot.context.properties.bind.Binder类中的方法来实现属性绑定。首先，该方法使用Class.forName()方法获取Binder类的Class对象，然后使用getDeclaredMethod()方法获取该类的两个反射方法引用：get()方法和bind()方法。接着，通过反射机制调用get()方法创建Binder对象实例，并将该对象存储在变量binderObject中。然后使用bind()方法将指定前缀的属性绑定到Java对象中。最后，通过反射机制调用Result.get()方法从绑定结果对象中获取绑定的Java对象。<br />需要注意的是，该方法中的prefix参数表示要绑定的前缀，例如”spring.datasource”；targetClass参数表示要绑定的Java类类型，例如DataSourceProperties.class。同时，也要注意在运行时出现异常时，会抛出一个运行时异常，并将原始异常信息和堆栈跟踪记录下来。<br />总之，该方法利用反射机制实现了基于前缀的配置属性自动绑定到Java对象上。该方法可以将配置文件中指定前缀的属性值映射、注入到Java对象中，方便进行后续操作。</p>\n<p>问：为什么在这段代码中使用反射机制呢？<br />在这段代码中，使用反射机制的主要原因是为了解决接口和实现类之间的依赖关系问题。具体来说，<code>org.springframework.boot.context.properties.bind.Binder</code>类是Spring Boot框架内部使用的一个工具类，用于将配置文件中的属性值绑定到Java对象上。如果直接调用<code>new</code>关键字创建该类的对象，会导致编译时依赖于该类的具体实现，从而造成程序耦合度过高的问题。<br />使用反射机制可以在运行时动态获取<code>Binder</code>类的引用，并根据需要进行方法调用。这种方式可以有效地减少程序的耦合度，提高代码的灵活性和可维护性。另外，通过使用反射机制，我们还可以轻松地替换<code>Binder</code>类的具体实现，以满足不同的业务需求。<br />总之，使用反射机制可以帮助我们解决接口和实现类之间的依赖关系问题，从而提高程序的灵活性和可维护性。当然，在使用反射机制时也要注意安全性和效率方面的问题，尽量避免滥用反射。</p>\n<h2 id=\"DBRouterJoinPoint-java\"><a href=\"#DBRouterJoinPoint-java\" class=\"headerlink\" title=\"DBRouterJoinPoint.java\"></a>DBRouterJoinPoint.java</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Aspect<br>@<span class=\"hljs-constructor\">Component(<span class=\"hljs-string\">&quot;db-router-point&quot;</span>)</span><br>public <span class=\"hljs-keyword\">class</span> DBRouterJoinPoint &#123;<br><br>    <span class=\"hljs-keyword\">private</span> Logger logger = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LoggerFactory</span>.</span></span>get<span class=\"hljs-constructor\">Logger(DBRouterJoinPoint.<span class=\"hljs-params\">class</span>)</span>;<br><br>    @Autowired<br>    <span class=\"hljs-keyword\">private</span> DBRouterConfig dbRouterConfig;<br><br>    @<span class=\"hljs-constructor\">Pointcut(<span class=\"hljs-string\">&quot;@annotation(cn.bugstack.middleware.db.router.annotation.DBRouter)&quot;</span>)</span><br>    public void aop<span class=\"hljs-constructor\">Point()</span> &#123;<br>    &#125;<br><br>    @<span class=\"hljs-constructor\">Around(<span class=\"hljs-string\">&quot;aopPoint() &amp;&amp; @annotation(dbRouter)&quot;</span>)</span><br>    public Object <span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">Router(ProceedingJoinPoint <span class=\"hljs-params\">jp</span>, DBRouter <span class=\"hljs-params\">dbRouter</span>)</span> throws Throwable &#123;<br>        String dbKey = dbRouter.key<span class=\"hljs-literal\">()</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StringUtils</span>.</span></span>is<span class=\"hljs-constructor\">Blank(<span class=\"hljs-params\">dbKey</span>)</span>) throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">RuntimeException(<span class=\"hljs-string\">&quot;annotation DBRouter key is null！&quot;</span>)</span>;<br>        <br>        String dbKeyAttr = get<span class=\"hljs-constructor\">AttrValue(<span class=\"hljs-params\">dbKey</span>, <span class=\"hljs-params\">jp</span>.<span class=\"hljs-params\">getArgs</span>()</span>);<br>        <span class=\"hljs-built_in\">int</span> size = dbRouterConfig.get<span class=\"hljs-constructor\">DbCount()</span><span class=\"hljs-operator\"> * </span>dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span>;<br>       <br>        <span class=\"hljs-built_in\">int</span> idx = (size - <span class=\"hljs-number\">1</span>) &amp; (dbKeyAttr.hash<span class=\"hljs-constructor\">Code()</span> ^ (dbKeyAttr.hash<span class=\"hljs-constructor\">Code()</span> &gt;&gt;&gt; <span class=\"hljs-number\">16</span>));<br>      <br>        <span class=\"hljs-built_in\">int</span> dbIdx = idx<span class=\"hljs-operator\"> / </span>dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span> + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-built_in\">int</span> tbIdx = idx - dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span><span class=\"hljs-operator\"> * </span>(dbIdx - <span class=\"hljs-number\">1</span>);<br>  <br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>set<span class=\"hljs-constructor\">DBKey(String.<span class=\"hljs-params\">format</span>(<span class=\"hljs-string\">&quot;%02d&quot;</span>, <span class=\"hljs-params\">dbIdx</span>)</span>);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>set<span class=\"hljs-constructor\">TBKey(String.<span class=\"hljs-params\">format</span>(<span class=\"hljs-string\">&quot;%02d&quot;</span>, <span class=\"hljs-params\">tbIdx</span>)</span>);<br>        logger.info(<span class=\"hljs-string\">&quot;数据库路由 method：&#123;&#125; dbIdx：&#123;&#125; tbIdx：&#123;&#125;&quot;</span>, get<span class=\"hljs-constructor\">Method(<span class=\"hljs-params\">jp</span>)</span>.get<span class=\"hljs-constructor\">Name()</span>, dbIdx, tbIdx);<br>  <br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            return jp.proceed<span class=\"hljs-literal\">()</span>;<br>        &#125; finally &#123;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>clear<span class=\"hljs-constructor\">DBKey()</span>;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>clear<span class=\"hljs-constructor\">TBKey()</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Method get<span class=\"hljs-constructor\">Method(JoinPoint <span class=\"hljs-params\">jp</span>)</span> throws NoSuchMethodException &#123;<br>        Signature <span class=\"hljs-keyword\">sig</span> = jp.get<span class=\"hljs-constructor\">Signature()</span>;<br>        MethodSignature methodSignature = (MethodSignature) <span class=\"hljs-keyword\">sig</span>;<br>        return jp.get<span class=\"hljs-constructor\">Target()</span>.get<span class=\"hljs-constructor\">Class()</span>.get<span class=\"hljs-constructor\">Method(<span class=\"hljs-params\">methodSignature</span>.<span class=\"hljs-params\">getName</span>()</span>, methodSignature.get<span class=\"hljs-constructor\">ParameterTypes()</span>);<br>    &#125;<br><br>    public String get<span class=\"hljs-constructor\">AttrValue(String <span class=\"hljs-params\">attr</span>, Object[] <span class=\"hljs-params\">args</span>)</span> &#123;<br>        String filedValue = null;<br>        <span class=\"hljs-keyword\">for</span> (Object arg : args) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StringUtils</span>.</span></span>is<span class=\"hljs-constructor\">NotBlank(<span class=\"hljs-params\">filedValue</span>)</span>) break;<br>                filedValue = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">BeanUtils</span>.</span></span>get<span class=\"hljs-constructor\">Property(<span class=\"hljs-params\">arg</span>, <span class=\"hljs-params\">attr</span>)</span>;<br>            &#125; catch (Exception e) &#123;<br>                logger.error(<span class=\"hljs-string\">&quot;获取路由属性值失败 attr：&#123;&#125;&quot;</span>, attr, e);<br>            &#125;<br>        &#125;<br>        return filedValue;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这个类是一个使用了 Spring AOP 框架的切面（Aspect），主要作用如下：<br>● 在使用注解 @DBRouter 标记的方法调用前后，拦截方法调用并动态计算出目标数据源信息，并将其存储到 ThreadLocal 中。<br>● 提供一系列辅助方法，例如计算路由、获取 Bean 属性值等。<br>具体来说，这个类中的 @Pointcut 注解定义了一个切入点，该切入点用于匹配所有带有 @DBRouter 注解的方法。而 @Around 注解则表示这是一个环绕通知类型的切面，它会在目标方法执行前和执行后都执行逻辑。<br>在 doRouter 方法中，首先从 DBRouter 注解中读取路由键，然后根据所需的路由键属性以及当前方法参数列表中的值计算出路由结果，并将其设置到 ThreadLocal 中，以便后续访问数据库时能够正确地选择数据源。最后，在目标方法执行完毕后，使用 finally 块清除 ThreadLocal 中的数据源信息。<br>此外，还有一些辅助方法，如 getMethod 方法用于获取 Join Point 对应的方法对象，getAttrValue 方法用于根据属性名称获取 Bean 对象的属性值等。<br>总之，这个类的作用是为带有 @DBRouter 注解的方法提供动态路由功能，并使用 Spring AOP 框架实现对方法调用的拦截和增强。</p>\n<p>private Logger logger &#x3D; LoggerFactory.getLogger(DBRouterJoinPoint.class);<br>这行代码的作用是声明一个日志记录器，用于在程序运行时输出日志信息。具体来说，该日志记录器使用了SLF4J（Simple Logging Facade for Java）框架提供的LoggerFactory.getLogger()静态方法来创建一个Logger对象。其中，DBRouterJoinPoint.class参数表示要获取日志记录器所属的类名。<br>在程序开发中，日志记录器是一种非常重要的工具，可以帮助开发者实时监控程序运行状态、调试错误、排查故障等。通过使用日志记录器，开发者可以将程序的运行过程和相关信息输出到指定的日志文件或控制台中，方便进行后续分析和处理。<br>在上述代码中，通过声明一个日志记录器，我们可以在程序运行时输出一些有用的信息，例如：<br>logger.info(“Start executing DB router logic”);<br>这条语句可以用来输出程序开始执行DB路由逻辑的提示信息。如果程序出现问题，我们也可以在日志中查看错误信息，例如：<br>logger.error(“An error occurred while executing DB router logic”, e);<br>这条语句可以用来输出程序执行DB路由逻辑时出现的异常信息，并将异常堆栈跟踪记录下来，以便后续进行排查和处理。<br>总之，通过使用日志记录器，我们可以更好地了解程序的运行状态，快速定位问题并进行及时处理，提高程序的可靠性和可维护性。</p>\n<p>@Pointcut(“@annotation(com.tute.middleware.db.router.annotation.DBRouter)”)<br>public void aopPoint(){</p>\n<p>}<br>这段代码是一个AOP切入点（Pointcut），用于定义一个切入点表达式，表示在被@DBRouter注解标记的方法上进行切面增强。<br>具体来说，该切入点通过@annotation()表达式来匹配所有被@DBRouter注解标记的方法。当程序中有一个方法被@DBRouter注解标记时，AOP框架会将该方法作为一个连接点（Join Point）进行拦截。然后，根据切面编程的规则，在目标方法执行前、执行后或异常抛出时，执行相应的增强逻辑，例如记录日志、事务管理、安全检查等等。<br>需要注意的是，该切入点本身不包含任何增强逻辑，只是一个定义了切入点的空方法。在实际使用中，我们通常会定义多个切入点，并结合切面（Aspect）类一起使用，例如：<br>@Aspect<br>@Component<br>public class DBRouterAspect {</p>\n<pre><code class=\"hljs\">private static final Logger logger = LoggerFactory.getLogger(DBRouterAspect.class);\n\n@Pointcut(&quot;@annotation(com.tute.middleware.db.router.annotation.DBRouter)&quot;)\npublic void aopPoint() &#123;&#125;\n\n@Before(&quot;aopPoint()&quot;)\npublic void before(JoinPoint joinPoint) &#123;\n    logger.info(&quot;开始执行DB路由逻辑...&quot;);\n&#125;\n\n@AfterReturning(pointcut = &quot;aopPoint()&quot;, returning = &quot;result&quot;)\npublic void afterReturning(JoinPoint joinPoint, Object result) &#123;\n    logger.info(&quot;DB路由逻辑执行完毕，返回值为：&#123;&#125;&quot;, result);\n&#125;\n\n@AfterThrowing(pointcut = &quot;aopPoint()&quot;, throwing = &quot;e&quot;)\npublic void afterThrowing(JoinPoint joinPoint, Exception e) &#123;\n    logger.error(&quot;DB路由逻辑执行异常，异常信息为：&#123;&#125;&quot;, e);\n&#125;\n</code></pre>\n<p>}<br>在上述代码中，我们定义了一个DBRouterAspect切面类，用于对所有被@DBRouter注解标记的方法进行增强。该切面类中包括一个切入点（使用了@Pointcut注解定义）、一个前置增强（使用了@Before注解定义）、一个正常返回增强（使用了@AfterReturning注解定义）和一个异常抛出增强（使用了@AfterThrowing注解定义）。前置增强、正常返回增强和异常抛出增强都是在目标方法执行前、执行后或异常抛出时执行的具体逻辑。<br>总之，AOP切入点是AOP编程的重要组成部分，可以帮助我们精确地定义需要增强的连接点，从而实现更加灵活和可维护的编程。</p>\n<p>在 Spring Boot 中，默认已开启了对注解 AOP 的支持，因此不需要进行额外的配置即可使用注解方式的 AOP。具体来说，只需要满足以下两个条件即可：</p>\n<ol>\n<li>在工程中引入 spring-boot-starter-aop 依赖。</li>\n<li>定义一个切面类，并使用 @Aspect 注解标记该类，然后在目标方法上使用注解来标识需要被拦截和增强的方法。<br>当应用程序启动时，Spring Boot 将自动扫描项目中定义的所有 @Aspect 类，并根据其定义的切入点和通知类型来创建代理对象，从而实现对目标方法的拦截和增强。<br>总之，在 Spring Boot 中使用注解方式的 AOP 是非常方便的，只需要按照上述步骤即可完成配置，无需进行其他复杂的配置。</li>\n</ol>\n<p>StringUtils.isBlank(dbKey) 和 StringUtils.isEmpty(dbKey) 是 Apache Commons Lang 库中的两个字符串处理方法，它们的区别如下：</p>\n<ul>\n<li><p>StringUtils.isBlank(dbKey) ：判断给定字符串是否为空或仅包含空格、制表符、换行符等不可见字符，如果是则返回 true，否则返回 false。例如，如果 dbKey 为 “ “ 或 “\\t\\n” 等，则返回 true，否则返回 false。</p>\n</li>\n<li><p>StringUtils.isEmpty(dbKey) ：判断给定字符串是否为空或长度为 0，如果是则返回 true，否则返回 false。例如，如果 dbKey 为 “” 或 null，则返回 true，否则返回 false。<br>因此，可以总结出以下区别：</p>\n</li>\n<li><p>isBlank() 方法考虑了除空字符串外的其他所有不可见字符，而 isEmpty() 方法不考虑这些字符。</p>\n</li>\n<li><p>isEmpty() 方法只检查字符串是否为空或具有零长度，而 isBlank() 方法还检查字符串是否全部由空格组成。<br>在使用时，需要根据具体情况来选择使用哪个方法。如果需要判断一个字符串是否为空或者只包含空格、制表符、回车符等不可见字符，应该使用 isBlank()；如果只需要判断一个字符串是否为空或长度为 0，则可以使用 isEmpty()。</p>\n</li>\n</ul>\n<p>@Around(“aopPoint() &amp;&amp; @annotation(dbRouter)”) 是一个用于定义切面的注解。它是 Spring AOP 框架中的一部分，用于在运行时根据指定的切入点表达式（Pointcut expression）拦截方法调用，并织入额外的逻辑。<br>具体来说，这个注解的含义如下：</p>\n<ul>\n<li><p>@Around 表示这个注解是一个环绕通知类型的切面，即会在目标方法执行前和执行后都执行一些逻辑。</p>\n</li>\n<li><p>“aopPoint() &amp;&amp; @annotation(dbRouter)” 是一个切入点表达式，用于指定需要被拦截的目标方法。它由两个部分组成： </p>\n<ul>\n<li>aopPoint()：表示使用名为 aopPoint 的切入点，该切入点是一个方法，用于定义需要被拦截的目标方法。这个切入点可能包含多个匹配规则，例如 execution()、within()、args() 等等。</li>\n<li>@annotation(dbRouter)：表示目标方法必须带有 dbRouter 注解才会被拦截。这里的 dbRouter 是自定义注解类型的名称，它可以作为一个切入点的限定条件，只有符合条件的目标方法才会被拦截。</li>\n</ul>\n</li>\n</ul>\n<p>因此，@Around(“aopPoint() &amp;&amp; @annotation(dbRouter)”) 注解的作用是定义一个环绕通知切面，该切面会拦截带有 dbRouter 注解的目标方法，并在目标方法执行前和执行后织入额外的逻辑。</p>\n<p>在 Spring AOP 框架中，切入点表达式（Pointcut expression）由两个部分组成：切入点和匹配规则。<br>切入点定义了一个或多个方法的集合，而匹配规则则指定了哪些方法可以被包含在切入点中。匹配规则常用的有以下几种：</p>\n<ul>\n<li><p>execution()：用于匹配方法执行的 Join Point（连接点），并且需要指定方法的签名。例如，execution(public * com.example.demo.<em>.</em>(..)) 表示匹配所有公共方法。</p>\n</li>\n<li><p>within()：用于匹配某个类或某个包内的所有 Join Point，需要指定类名或包名。例如，within(com.example.demo.service.*) 表示匹配 com.example.demo.service 包下的所有 Join Point。</p>\n</li>\n<li><p>this() &#x2F; target() &#x2F; args()：用于匹配当前正在被代理的对象、目标对象或方法参数等 Join Point 相关的信息。</p>\n</li>\n<li><p>@annotation() &#x2F; @within() &#x2F; @target()：用于匹配带有特定注解的 Join Point，需要指定注解类型。例如，@annotation(MyAnnotation) 表示匹配所有带有 MyAnnotation 注解的<br>方法。</p>\n</li>\n</ul>\n<p>这些匹配规则可以单独使用，也可以结合起来使用，以定义更精确的切入点。在实际开发中，我们可以根据具体需求选择合适的匹配规则来定义切入点，以实现拦截目标方法并织入额外逻辑的目的。<br>路由算法</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public Object <span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">Router(ProceedingJoinPoint <span class=\"hljs-params\">jp</span>, DBRouter <span class=\"hljs-params\">dbRouter</span>)</span> throws Throwable &#123;<br>        String dbKey = dbRouter.key<span class=\"hljs-literal\">()</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StringUtils</span>.</span></span>is<span class=\"hljs-constructor\">Blank(<span class=\"hljs-params\">dbKey</span>)</span>) throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">RuntimeException(<span class=\"hljs-string\">&quot;annotation DBRouter key is null！&quot;</span>)</span>;<br>        <br>        String dbKeyAttr = get<span class=\"hljs-constructor\">AttrValue(<span class=\"hljs-params\">dbKey</span>, <span class=\"hljs-params\">jp</span>.<span class=\"hljs-params\">getArgs</span>()</span>);<br>        <span class=\"hljs-built_in\">int</span> size = dbRouterConfig.get<span class=\"hljs-constructor\">DbCount()</span><span class=\"hljs-operator\"> * </span>dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span>;<br>       <br>        <span class=\"hljs-built_in\">int</span> idx = (size - <span class=\"hljs-number\">1</span>) &amp; (dbKeyAttr.hash<span class=\"hljs-constructor\">Code()</span> ^ (dbKeyAttr.hash<span class=\"hljs-constructor\">Code()</span> &gt;&gt;&gt; <span class=\"hljs-number\">16</span>));<br>      <br>        <span class=\"hljs-built_in\">int</span> dbIdx = idx<span class=\"hljs-operator\"> / </span>dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span> + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-built_in\">int</span> tbIdx = idx - dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span><span class=\"hljs-operator\"> * </span>(dbIdx - <span class=\"hljs-number\">1</span>);<br>  <br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>set<span class=\"hljs-constructor\">DBKey(String.<span class=\"hljs-params\">format</span>(<span class=\"hljs-string\">&quot;%02d&quot;</span>, <span class=\"hljs-params\">dbIdx</span>)</span>);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>set<span class=\"hljs-constructor\">TBKey(String.<span class=\"hljs-params\">format</span>(<span class=\"hljs-string\">&quot;%02d&quot;</span>, <span class=\"hljs-params\">tbIdx</span>)</span>);<br>        logger.info(<span class=\"hljs-string\">&quot;数据库路由 method：&#123;&#125; dbIdx：&#123;&#125; tbIdx：&#123;&#125;&quot;</span>, get<span class=\"hljs-constructor\">Method(<span class=\"hljs-params\">jp</span>)</span>.get<span class=\"hljs-constructor\">Name()</span>, dbIdx, tbIdx);<br>  <br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            return jp.proceed<span class=\"hljs-literal\">()</span>;<br>        &#125; finally &#123;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>clear<span class=\"hljs-constructor\">DBKey()</span>;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>clear<span class=\"hljs-constructor\">TBKey()</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>这段代码实现了一个数据库的路由功能。具体来说，它基于传入的注解（DBRouter）中的键值（key），计算出该操作要使用的数据库和表的索引，并将其存储在上下文中（DBContextHolder）。这样，在整个操作过程中，就可以根据上下文中的索引选择正确的数据库和表，而不需要显式地指定或硬编码。最终，无论执行是否成功，上下文都会被清除以释放资源。</p>\n<h3 id=\"为什么使用扰动函数\"><a href=\"#为什么使用扰动函数\" class=\"headerlink\" title=\"为什么使用扰动函数\"></a>为什么使用扰动函数</h3><p>理论上来说字符串的hashCode是一个int类型值，那可以直接作为数组下标了，且不会出现碰撞。但是这个hashCode的取值范围是[-2147483648, 2147483647]，有将近40亿的长度，谁也不能把数组初始化的这么大，内存也是放不下的。<br>我们默认初始化的Map大小是16个长度 DEFAULT_INITIAL_CAPACITY &#x3D; 1 &lt;&lt; 4，所以获取的Hash值并不能直接作为下标使用，需要与数组长度进行取模运算得到一个下标值，也就是我们上面做的散列列子。<br>那么，hashMap源码这里不只是直接获取哈希值，还进行了一次扰动计算，(h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16)。把哈希值右移16位，也就正好是自己长度的一半，之后与原哈希值做异或运算，这样就混合了原哈希值中的高位和低位，增大了<strong>随机性</strong>。</p>\n","site":{"data":{}},"excerpt":"<p>当业务变得极其庞大的时候，原有的单表可能不足以维持业务的正常发展，此时就需要进行分库分表操作，来缓解数据库的压力</p>","more":"<h1 id=\"dbRouter\"><a href=\"#dbRouter\" class=\"headerlink\" title=\"dbRouter\"></a>dbRouter</h1><p><img src=\"/2023/05/10/dbRouter/01.png\" alt=\"image.png\"></p>\n<h2 id=\"DBRouter-java\"><a href=\"#DBRouter-java\" class=\"headerlink\" title=\"DBRouter.java\"></a>DBRouter.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> DBRouter &#123;<br>    String <span class=\"hljs-title function_\">key</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>@Documented</strong>是Java中的一个元注解，它用于指示被该注解修饰的注解是否会被包含在JavaDoc文档中。<br />具体来说，当一个注解添加了@Documented注解后，使用该注解修饰的类、方法或字段等等，在生成JavaDoc文档时，这些注解会被包含在文档中，并能够被文档工具展示出来。如果没有使用@Documented注解，则这些注解不会被包含在JavaDoc文档中。<br />举个例子，比如在编写自己的Java框架或库时，可能会定义一些自定义注解，这些注解可能是用来描述类、方法、参数等信息的，如果想让其他人更好地了解这些注解的作用以及如何使用它们，就可以为这些注解添加@Documented注解，这样在生成JavaDoc文档时，这些注解就可以被包含进去，方便用户查看和阅读。<br />因此，@Documented注解的作用就是告诉Java编译器，将被该注解修饰的注解包含在JavaDoc文档中，使得开发者可以更方便地了解和使用这些注解。</p>\n<p><strong>@Retention(RetentionPolicy.RUNTIME)</strong> 是Java中的一个元注解，它用于指示被该注解修饰的注解的保留策略，即在什么时候该注解会失效。<br />具体来说，@Retention(RetentionPolicy.RUNTIME)表示被该注解修饰的注解会在运行时保留，并可以通过反射机制获取到。换句话说，如果没有使用@Retention(RetentionPolicy.RUNTIME)注解，则该注解修饰的注解会在编译时被丢弃，而无法在程序运行时获取到。<br />举个例子，假设我们定义了一个自定义注解@MyAnnotation，并希望在程序运行时能够通过反射获取到该注解的信息，例如注解的属性值等等。此时就需要为@MyAnnotation添加@Retention(RetentionPolicy.RUNTIME)注解，以便让该注解在运行时保持不变。<br />因此，@Retention(RetentionPolicy.RUNTIME)注解的作用是指定被该注解修饰的注解的保留策略为运行时保留，并且可以通过反射机制获取注解信息，这对于编写某些框架或库非常有用。</p>\n<p><strong>@Target({ElementType.TYPE, ElementType.METHOD})</strong> 是Java中的一个元注解，用于指定被该注解修饰的注解可以应用的目标元素类型。<br />具体来说，@Target({ElementType.TYPE, ElementType.METHOD})表示被该注解修饰的注解可以应用在类、接口和枚举类型上，同时也可以应用在方法上。如果尝试将这个注解用于其他的目标元素类型，如属性、构造函数等，则会编译错误。<br />举个例子，假设我们定义了一个自定义注解@MyAnnotation，并希望让这个注解可以用于类、接口和枚举类型上，同时也可以用于方法上。此时就需要为@MyAnnotation添加@Target({ElementType.TYPE, ElementType.METHOD})注解，以便限制该注解的使用范围，避免出现不合理或者意外的情况。<br />因此，@Target({ElementType.TYPE, ElementType.METHOD})注解的作用是指定被该注解修饰的注解可以应用的目标元素类型，它可以限制注解的使用范围，使得注解的作用更加明确和准确。</p>\n<h2 id=\"DBContextHolder-java\"><a href=\"#DBContextHolder-java\" class=\"headerlink\" title=\"DBContextHolder.java\"></a>DBContextHolder.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DBContextHolder</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;String&gt; dbKey = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;String&gt; tbKey = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br>    <span class=\"hljs-comment\">//get方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getDBKey</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> dbKey.get();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getTBKey</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> tbKey.get();<br>    &#125;<br><br>    <span class=\"hljs-comment\">//set方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setDBKey</span><span class=\"hljs-params\">(String dbKeyIdx)</span>&#123;<br>        dbKey.set(dbKeyIdx);<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setTBKey</span><span class=\"hljs-params\">(String tbKeyIdx)</span>&#123;<br>        tbKey.set(tbKeyIdx);<br>    &#125;<br>    <span class=\"hljs-comment\">//清空key</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clearDBKey</span><span class=\"hljs-params\">()</span>&#123;<br>        dbKey.remove();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clearTBKey</span><span class=\"hljs-params\">()</span>&#123;<br>        tbKey.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这个类是一个线程池上下文管理类，主要用来管理当前线程使用的数据库和表的名称。<br />具体来说，这个类中定义了两个ThreadLocal类型的静态变量：dbKey和tbKey。这两个变量分别用于存储当前线程使用的数据库名称和表名称，它们的值可以在应用程序运行时通过代码来设置或者获取。<br />通过使用这个类，我们可以在应用程序中动态切换数据库和表，而无需修改实际执行查询和操作的代码。例如，在某些情况下需要进行读写分离，可以在读操作前将dbKey设置为读库的名称，在写操作前将其设置为写库的名称；在某些情况下需要动态选择表名，可以先通过某种规则计算出表名，然后将其设置到tbKey中，再执行相关操作。<br />总之，DBContextHolder类的作用是提供一种机制，让应用程序可以动态地切换数据库和表，从而更加灵活地控制数据的访问和操作。该类通常会与其他数据源相关组件（如AbstractRoutingDataSource）配合使用，以实现多数据源或者动态数据源切换等功能。</p>\n<p>**remove()**方法是ThreadLocal类中的一个实例方法，用于将当前线程绑定的变量值删除。在DBContextHolder类中，clearDBKey()和clearTBKey()方法分别调用了dbKey.remove()和tbKey.remove()方法，用于清空当前线程绑定的数据库和表名称。<br />由于ThreadLocal对象通常是与线程一一对应的，因此使用remove()方法可以防止内存泄漏。如果不清除线程绑定的变量值，可能会出现以下情况之一：</p>\n<ul>\n<li>当前线程结束后，ThreadLocal对象仍然持有该变量的引用，导致该变量无法被GC回收，从而发生内存泄漏。</li>\n<li>由于线程池的复用机制，下一个使用该线程的任务可能会意外地继承上一个任务的线程绑定变量值，导致程序出现错误或者异常行为。</li>\n</ul>\n<p>因此，在使用ThreadLocal时，最好在不再需要使用线程绑定变量的时候调用remove()方法进行清理。在DBContextHolder类中，clearDBKey()和clearTBKey()方法的作用就是通过调用remove()方法来清空当前线程绑定的数据库和表名称，以便下一次使用线程时，这些变量的值不会影响到其他任务。</p>\n<h2 id=\"DynamicDataSource-java\"><a href=\"#DynamicDataSource-java\" class=\"headerlink\" title=\"DynamicDataSource.java\"></a>DynamicDataSource.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicDataSource</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractRoutingDataSource</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title function_\">determineCurrentLookupKey</span><span class=\"hljs-params\">()</span> &#123;<br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;db&quot;</span> + DBContextHolder.getDBKey();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>AbstractRoutingDataSource在Mybatis中引入了spring-jdbc依赖，所以不必刻意再次单独引入spring-jdbc依赖<br /><strong>AbstractRoutingDataSource抽象类</strong><br />AbstractRoutingDataSource是Spring框架中的一个数据源类，它可以根据特定的规则动态切换应用程序连接到的数据源。<br />在某些应用程序中，需要使用多个数据库（例如：读写分离），此时就需要使用AbstractRoutingDataSource来实现动态切换数据源。通过继承AbstractRoutingDataSource类并实现determineCurrentLookupKey()方法，可以定义选择数据源的逻辑，例如基于线程上下文、基于请求参数、基于用户权限等。<strong>当应用程序需要访问数据库时，Spring框架会自动调用determineCurrentLookupKey()方法获取当前要使用的数据源，然后将数据源交给JdbcTemplate或其他数据访问组件使用。</strong><br />因此，AbstractRoutingDataSource的作用是提供一种机制，让Spring应用程序可以基于运行时的条件选择不同的数据源，并且无需修改现有代码即可实现数据源的切换。</p>\n<h2 id=\"DataSourceAutoConfig-java\"><a href=\"#DataSourceAutoConfig-java\" class=\"headerlink\" title=\"DataSourceAutoConfig.java\"></a>DataSourceAutoConfig.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.tute.middleware.db.router.config;<br><br><span class=\"hljs-keyword\">import</span> com.tute.middleware.db.router.DBRouterConfig;<br><span class=\"hljs-keyword\">import</span> com.tute.middleware.db.router.dynamic.DynamicDataSource;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.EnvironmentAware;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.core.env.Environment;<br><span class=\"hljs-keyword\">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;<br><br><span class=\"hljs-keyword\">import</span> javax.sql.DataSource;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 2023/5/10</span><br><span class=\"hljs-comment\">**/</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceAutoConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">EnvironmentAware</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, Map&lt;String,Object&gt;&gt; dataSourceMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> dbCount; <span class=\"hljs-comment\">//数据库的数量</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> tbCount; <span class=\"hljs-comment\">//表的数量</span><br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DBRouterConfig <span class=\"hljs-title function_\">dbRouterConfig</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DBRouterConfig</span>(dbCount,tbCount);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title function_\">dataSource</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-comment\">// 创建数据源</span><br>        Map&lt;Object,Object&gt; targetDataSource = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (String dbInfo : dataSourceMap.keySet()) &#123;<br>            <span class=\"hljs-comment\">//根据外层Map的KeySet的key拿到内层的Map</span><br>            Map&lt;String, Object&gt; objMap = dataSourceMap.get(dbInfo);<br>            targetDataSource.put(dbInfo,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DriverManagerDataSource</span>(<br>                objMap.get(<span class=\"hljs-string\">&quot;url&quot;</span>).toString(),<br>                objMap.get(<span class=\"hljs-string\">&quot;username&quot;</span>).toString(),<br>                objMap.get(<span class=\"hljs-string\">&quot;password&quot;</span>).toString()));<br>        &#125;<br>        <span class=\"hljs-comment\">//设置数据源</span><br>        <span class=\"hljs-type\">DynamicDataSource</span> <span class=\"hljs-variable\">dynamicDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DynamicDataSource</span>();<br>        dynamicDataSource.setTargetDataSources(targetDataSource);<br>        <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">        这行代码是将一个targetDataSource数据源对象设置为动态数据源dynamicDataSource的</span><br><span class=\"hljs-comment\">        目标数据源。在Spring中，通过DynamicDataSource和AbstractRoutingDataSource两个类的配合使用，</span><br><span class=\"hljs-comment\">        可以实现动态切换多个数据源。</span><br><span class=\"hljs-comment\">\t\t具体来说，DynamicDataSource是对AbstractRoutingDataSource的一</span><br><span class=\"hljs-comment\">        个扩展，它除了支持动态数据源的切换外，还支持针对不同的查询/操作类型选择不同的数据源。</span><br><span class=\"hljs-comment\">        setTargetDataSources()方法就是用于设置动态数据源的目标数据源的，</span><br><span class=\"hljs-comment\">        即将targetDataSource对象作为参数传递进去，表示该动态数据源会从targetDataSource中获取</span><br><span class=\"hljs-comment\">        所有可用的数据源。</span><br><span class=\"hljs-comment\">\t\t在实际应用中，targetDataSource通常是一个Map类型的对象，用于存储多个数据源对象，</span><br><span class=\"hljs-comment\">\t\t例如读写分离、分表等场景下需要使用多个数据源。</span><br><span class=\"hljs-comment\">        每个数据源需要有一个标识符，如数据库名称或者其他标识符，以便在程序运行时进行调用和切换。</span><br><span class=\"hljs-comment\">        设置了目标数据源后，动态数据源就可以根据特定的规则或条件来动态地切换数据源，</span><br><span class=\"hljs-comment\">        并且能够确保在当前线程中只有一个数据源被使用。</span><br><span class=\"hljs-comment\">        因此，这行代码的作用是将targetDataSource设置为动态数据源的目标数据源，</span><br><span class=\"hljs-comment\">        使得动态数据源可以从targetDataSource中获取到所有可用的数据源，</span><br><span class=\"hljs-comment\">        并在需要访问数据时可以自动切换数据源。</span><br><span class=\"hljs-comment\">\t\t*/</span><br>        <span class=\"hljs-keyword\">return</span> dynamicDataSource;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setEnvironment</span><span class=\"hljs-params\">(Environment environment)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<pre><code>        targetDataSource.put(dbInfo,new DriverManagerDataSource(\n            objMap.get(&quot;url&quot;).toString(),\n            objMap.get(&quot;username&quot;).toString(),\n            objMap.get(&quot;password&quot;).toString()));\n</code></pre>\n</blockquote>\n<p>首先，这段代码中使用了<code>new DriverManagerDataSource()</code>语句创建了一个<code>DriverManagerDataSource</code>对象，并通过构造函数传入了数据库连接URL、用户名和密码等信息。<code>DriverManagerDataSource</code>是Spring JDBC框架中的一个数据源实现类，它可以根据提供的数据库连接信息来创建一个JDBC连接。<br />然后，将创建的<code>DriverManagerDataSource</code>对象存储到<code>targetDataSource</code>中，其中<code>dbInfo</code>表示该数据源的名称或者标识符，通常是一个字符串；<code>targetDataSource.put(dbInfo, dataSource)</code>方法将该数据源对象和对应的名称关联起来并存储到<code>targetDataSource</code>中，以便在程序运行时进行调用和切换。<br />通常情况下，<code>targetDataSource</code>是一个Map类型的对象，用于存储多个数据源对象，例如读写分离、分表等场景下需要使用多个数据源。在实际应用中，<code>targetDataSource</code>通常会被注入到<code>AbstractRoutingDataSource</code>类中，以实现数据源的动态切换功能。<br />综上所述，这段代码的作用是创建一个数据库连接，并将其存储到<code>targetDataSource</code>中，以便在需要访问对应数据库时可以从<code>targetDataSource</code>中获取到正确的连接。</p>\n<blockquote>\n<p> dynamicDataSource.setTargetDataSources(targetDataSource);</p>\n</blockquote>\n<p> 这行代码是将一个<code>targetDataSource</code>数据源对象设置为动态数据源<code>dynamicDataSource</code>的目标数据源。在Spring中，通过<code>DynamicDataSource</code>和<code>AbstractRoutingDataSource</code>两个类的配合使用，可以实现动态切换多个数据源。<br />具体来说，<code>DynamicDataSource</code>是对<code>AbstractRoutingDataSource</code>的一个扩展，它除了支持动态数据源的切换外，还支持针对不同的查询&#x2F;操作类型选择不同的数据源。<code>setTargetDataSources()</code>方法就是用于设置动态数据源的目标数据源的，即将<code>targetDataSource</code>对象作为参数传递进去，表示该动态数据源会从<code>targetDataSource</code>中获取所有可用的数据源。<br />在实际应用中，<code>targetDataSource</code>通常是一个Map类型的对象，用于存储多个数据源对象，例如读写分离、分表等场景下需要使用多个数据源。每个数据源需要有一个标识符，如数据库名称或者其他标识符，以便在程序运行时进行调用和切换。设置了目标数据源后，动态数据源就可以根据特定的规则或条件来动态地切换数据源，并且能够确保在当前线程中只有一个数据源被使用。<br />因此，这行代码的作用是将<code>targetDataSource</code>设置为动态数据源的目标数据源，使得动态数据源可以从<code>targetDataSource</code>中获取到所有可用的数据源，并在需要访问数据时可以自动切换数据源。</p>\n<h2 id=\"DataSourceAutoConfig-java-1\"><a href=\"#DataSourceAutoConfig-java-1\" class=\"headerlink\" title=\"DataSourceAutoConfig.java\"></a>DataSourceAutoConfig.java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 2023/5/10</span><br><span class=\"hljs-comment\">**/</span><br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceAutoConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">EnvironmentAware</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, Map&lt;String, Object&gt;&gt; dataSourceMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> dbCount; <span class=\"hljs-comment\">//数据库的数量</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> tbCount; <span class=\"hljs-comment\">//表的数量</span><br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DBRouterConfig <span class=\"hljs-title function_\">dbRouterConfig</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DBRouterConfig</span>(dbCount, tbCount);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title function_\">dataSource</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 创建数据源</span><br>        Map&lt;Object, Object&gt; targetDataSource = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (String dbInfo : dataSourceMap.keySet()) &#123;<br>            <span class=\"hljs-comment\">//根据外层Map的KeySet的key拿到内层的Map</span><br>            Map&lt;String, Object&gt; objMap = dataSourceMap.get(dbInfo);<br>            targetDataSource.put(dbInfo, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DriverManagerDataSource</span>(<br>                objMap.get(<span class=\"hljs-string\">&quot;url&quot;</span>).toString(),<br>                objMap.get(<span class=\"hljs-string\">&quot;username&quot;</span>).toString(),<br>                objMap.get(<span class=\"hljs-string\">&quot;password&quot;</span>).toString()));<br>        &#125;<br>        <span class=\"hljs-comment\">//设置数据源</span><br>        <span class=\"hljs-type\">DynamicDataSource</span> <span class=\"hljs-variable\">dynamicDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DynamicDataSource</span>();<br>        dynamicDataSource.setTargetDataSources(targetDataSource);<br>        <span class=\"hljs-keyword\">return</span> dynamicDataSource;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setEnvironment</span><span class=\"hljs-params\">(Environment environment)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefix</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;router.jdbc.datasource&quot;</span>;<br>        dbCount = Integer.parseInt(Objects.requireNonNull(environment.getProperty(prefix + <span class=\"hljs-string\">&quot;dbCount&quot;</span>)));<br>        tbCount = Integer.parseInt(Objects.requireNonNull(environment.getProperty(prefix + <span class=\"hljs-string\">&quot;tbCount&quot;</span>)));<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">dataSources</span> <span class=\"hljs-operator\">=</span> environment.getProperty(prefix + <span class=\"hljs-string\">&quot;list&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (String dbInfo : dataSources.split(<span class=\"hljs-string\">&quot;,&quot;</span>)) &#123;<br>            Map&lt;String, Object&gt; dataSourceProps = PropertyUtil.handle(environment, prefix + dbInfo, Map.class);<br>            dataSourceMap.put(dbInfo, dataSourceProps);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"PropertyUtil-java\"><a href=\"#PropertyUtil-java\" class=\"headerlink\" title=\"PropertyUtil.java\"></a>PropertyUtil.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 2023/5/10</span><br><span class=\"hljs-comment\"> **/</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PropertyUtil</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">springBootVersion</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;org.springframework.boot.bind.RelaxedPropertyResolver&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            springBootVersion = <span class=\"hljs-number\">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; T <span class=\"hljs-title function_\">handle</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Environment environment, <span class=\"hljs-keyword\">final</span> String prefix, <span class=\"hljs-keyword\">final</span> Class&lt;T&gt; targetClass)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (springBootVersion == <span class=\"hljs-number\">1</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> (T) v1(environment, prefix);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> (T) v2(environment, prefix, targetClass);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object <span class=\"hljs-title function_\">v1</span><span class=\"hljs-params\">(Environment environment, String prefix)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class&lt;?&gt; resolverClass = Class.forName(<span class=\"hljs-string\">&quot;org.springframework.boot.bind.RelaxedPropertyResolver&quot;</span>);<br>            Constructor&lt;?&gt; resolverConstructor = resolverClass.getDeclaredConstructor(PropertyResolver.class);<br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">getSubPropertiesMethod</span> <span class=\"hljs-operator\">=</span> resolverClass.getDeclaredMethod(<span class=\"hljs-string\">&quot;getSubProperties&quot;</span>, String.class);<br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">resolverObject</span> <span class=\"hljs-operator\">=</span> resolverConstructor.newInstance(environment);<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefixParam</span> <span class=\"hljs-operator\">=</span> prefix.endsWith(<span class=\"hljs-string\">&quot;.&quot;</span>) ? prefix : prefix + <span class=\"hljs-string\">&quot;.&quot;</span>;<br>            <span class=\"hljs-keyword\">return</span> getSubPropertiesMethod.invoke(resolverObject, prefixParam);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> ClassNotFoundException | NoSuchMethodException | SecurityException | InstantiationException<br>                       | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(ex.getMessage(), ex);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object <span class=\"hljs-title function_\">v2</span><span class=\"hljs-params\">(Environment environment, String prefix, Class&lt;?&gt; targetClass)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class&lt;?&gt; binderClass = Class.forName(<span class=\"hljs-string\">&quot;org.springframework.boot.context.properties.bind.Binder&quot;</span>);<br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">getMethod</span> <span class=\"hljs-operator\">=</span> binderClass.getDeclaredMethod(<span class=\"hljs-string\">&quot;get&quot;</span>, Environment.class);<br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">bindMethod</span> <span class=\"hljs-operator\">=</span> binderClass.getDeclaredMethod(<span class=\"hljs-string\">&quot;bind&quot;</span>, String.class, Class.class);<br>            <span class=\"hljs-comment\">//public static Binder get(Environment environment) &#123;</span><br>            <span class=\"hljs-comment\">//\t\treturn get(environment, null);</span><br>            <span class=\"hljs-comment\">//\t&#125; Create a new &#123;@link Binder&#125; instance from the specified environment.</span><br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">binderObject</span> <span class=\"hljs-operator\">=</span> getMethod.invoke(<span class=\"hljs-literal\">null</span>, environment);<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefixParam</span> <span class=\"hljs-operator\">=</span> prefix.endsWith(<span class=\"hljs-string\">&quot;.&quot;</span>) ? prefix.substring(<span class=\"hljs-number\">0</span>, prefix.length() - <span class=\"hljs-number\">1</span>) : prefix;<br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">bindResultObject</span> <span class=\"hljs-operator\">=</span> bindMethod.invoke(binderObject, prefixParam, targetClass);<br>            <span class=\"hljs-type\">Method</span> <span class=\"hljs-variable\">resultGetMethod</span> <span class=\"hljs-operator\">=</span> bindResultObject.getClass().getDeclaredMethod(<span class=\"hljs-string\">&quot;get&quot;</span>);<br><span class=\"hljs-comment\">//            /**</span><br><span class=\"hljs-comment\">//             * Return the object that was bound or throw a &#123;@link NoSuchElementException&#125; if no</span><br><span class=\"hljs-comment\">//             * value was bound.</span><br><span class=\"hljs-comment\">//             * @return the bound value (never &#123;@code null&#125;)</span><br><span class=\"hljs-comment\">//             * @throws NoSuchElementException if no value was bound</span><br><span class=\"hljs-comment\">//             * @see #isBound()</span><br><span class=\"hljs-comment\">//             */</span><br><span class=\"hljs-comment\">//            public T get() throws NoSuchElementException &#123;</span><br><span class=\"hljs-comment\">//                if (this.value == null) &#123;</span><br><span class=\"hljs-comment\">//                    throw new NoSuchElementException(&quot;No value bound&quot;);</span><br><span class=\"hljs-comment\">//                &#125;</span><br><span class=\"hljs-comment\">//                return this.value;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            <span class=\"hljs-keyword\">return</span> resultGetMethod.invoke(bindResultObject);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">final</span> ClassNotFoundException | NoSuchMethodException | SecurityException | IllegalAccessException<br>                       | IllegalArgumentException | InvocationTargetException ex) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(ex.getMessage(), ex);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>在Spring Boot 2.x版本中，<code>org.springframework.boot.bind.RelaxedPropertyResolver</code>类已经被废弃并移除了。官方文档建议使用<code>org.springframework.boot.context.properties.bind.BindResult</code>和<code>org.springframework.boot.context.properties.bind.Binder</code>类来代替。<br />具体来说，<code>BindResult</code>类封装了配置属性的绑定结果，并提供了一些便捷的方法来获取绑定后的属性值，例如<code>get()</code>、<code>getOrNull()</code>等。<code>Binder</code>类则是一个工厂类，用于创建配置属性绑定器对象，并通过<code>bind()</code>方法将属性绑定到Java对象中。<br />需要注意的是，在Spring Boot 2.x版本中，还引入了一种新的注解方式<code>@ConfigurationProperties</code>来绑定属性，该方式比<code>RelaxedPropertyResolver</code>更加直观和易用。可以通过在应用程序的配置文件中为Java对象指定前缀来实现对属性的绑定，例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">myapp:</span><br>  <span class=\"hljs-attr\">db:</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/mydb</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">password</span><br></code></pre></td></tr></table></figure>\n<p>然后在Java代码中使用<code>@ConfigurationProperties(prefix = &quot;myapp.db&quot;)</code>注解来指定要绑定的前缀，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ConfigurationProperties(prefix = &quot;myapp.db&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceProperties</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String url;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>以上示例代码中<code>DataSourceProperties</code>类的属性名与配置文件中的属性名一一对应，这样就可以自动将配置文件中的属性值绑定到Java对象中了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><span class=\"hljs-meta\">@SuppressWarnings</span>(<span class=\"hljs-string\">&quot;unchecked&quot;</span>)<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">T</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">T</span> handle(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Environment</span> environment, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-keyword\">prefix</span>, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Class</span>&lt;<span class=\"hljs-type\">T</span>&gt; targetClass) &#123;<br>    <span class=\"hljs-keyword\">switch</span> (springBootVersion) &#123;<br>        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">T</span>) v1(environment, <span class=\"hljs-keyword\">prefix</span>);<br>        <span class=\"hljs-keyword\">default</span>:<br>            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">T</span>) v2(environment, <span class=\"hljs-keyword\">prefix</span>, targetClass);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在Java中，<strong>final关键字</strong>可以用来修饰变量、方法和类等元素，表示它们是不可变的或者不可继承的。在这个方法的形参中加上final关键字，主要是为了限制这些参数不被修改，从而增强代码的可靠性和安全性。<br />具体来说，将形参加上final关键字，有以下几个好处：</p>\n<ol>\n<li>防止无意间修改参数值：在方法执行的过程中，如果修改了某个参数的值，可能会影响到程序的正确性。将参数标记为final后，编译器会阻止在方法内部对参数进行修改，避免出现意外的错误。</li>\n<li>提高代码可读性：通过使用final关键字，可以让代码更加简洁明了，表达出开发者的意图。同时，也方便其他开发者阅读和理解代码。</li>\n<li>优化代码执行效率：在一定程度上，使用final关键字还可以提高代码的执行效率。因为final变量只需要赋值一次就固定了，所以在运行时可以直接使用变量的值，而不必每次都去重新计算。</li>\n</ol>\n<p>总之，将方法的形参加上final关键字，可以使代码更加健壮、简洁、高效，从而提高代码的质量和可维护性。</p>\n<p><strong>@SuppressWarnings(“unchecked”)</strong> 注解的作用是告诉编译器在忽略范型类型转换警告时不需要提示，即抑制编译器产生”unchecked warning”警告信息。</p>\n<p>在Java中，泛型是一种静态检查机制，可以在编译时检测一些可能发生的类型转换错误。但是，在某些情况下，由于Java的类型擦除机制，编译器无法检测到所有的类型错误。例如，当使用原始类型时，编译器无法检测到泛型类型转换错误。此时，编译器会产生“unchecked warning”警告信息，提醒开发者可能存在类型安全问题。<br />通过在代码中添加@SuppressWarnings(“unchecked”)注解，可以告诉编译器忽略对该行代码的类型检查，从而消除编译器产生的“unchecked warning”警告信息。需要注意的是，使用@SuppressWarnings(“unchecked”)注解应该谨慎，只有在确保该行代码不会产生类型安全问题时才能使用。<br />总之，@SuppressWarnings(“unchecked”)注解的作用是抑制编译器对Java泛型类型转换的警告信息，通常用于一些不能避免的类型转换操作，但同时也要注意尽可能减少使用该注解，以保证程序的类型安全性。</p>\n<h3 id=\"v1方法：\"><a href=\"#v1方法：\" class=\"headerlink\" title=\"v1方法：\"></a>v1方法：</h3><p>这段代码的作用是获取Spring Boot应用程序中指定前缀的子属性，并返回一个<strong>Map类型的结果</strong>，其中键为属性名，值为属性值。</p>\n<p>具体来说，该方法在运行时通过反射机制调用了org.springframework.boot.bind.RelaxedPropertyResolver类中的方法来获取属性。首先，该方法使用Class.forName()方法获取RelaxedPropertyResolver类的Class对象，然后通过getDeclaredConstructor()方法获取该类带有一个PropertyResolver参数的构造器。接着，使用getDeclaredMethod()方法获取getSubProperties()方法的引用，这个方法接受一个字符串参数，表示要获取哪个属性的子属性。最后，通过反射机制创建RelaxedPropertyResolver类的实例，并调用getSubProperties()方法来获取指定前缀的子属性。<br />代码中的prefix参数表示要获取的属性前缀，例如”spring.datasource”。该方法将前缀参数传递给getSubProperties()方法，然后将返回的Map类型的结果转换成一个符合预期的Map类型并返回。如果在运行时出现异常，则会抛出一个运行时异常，并将原始异常信息和堆栈跟踪记录下来。<br />需要注意的是，在Spring Boot 2.x版本中，RelaxedPropertyResolver类已经被废弃并移除了。建议使用org.springframework.boot.context.properties.bind.Binder类来替代。</p>\n<h3 id=\"v2方法：\"><a href=\"#v2方法：\" class=\"headerlink\" title=\"v2方法：\"></a>v2方法：</h3><p>这段代码的作用是使用反射机制绑定Spring Boot应用程序中指定前缀的属性到Java对象中，并返回绑定后的Java对象。<br />具体来说，该方法在运行时通过反射机制调用了org.springframework.boot.context.properties.bind.Binder类中的方法来实现属性绑定。首先，该方法使用Class.forName()方法获取Binder类的Class对象，然后使用getDeclaredMethod()方法获取该类的两个反射方法引用：get()方法和bind()方法。接着，通过反射机制调用get()方法创建Binder对象实例，并将该对象存储在变量binderObject中。然后使用bind()方法将指定前缀的属性绑定到Java对象中。最后，通过反射机制调用Result.get()方法从绑定结果对象中获取绑定的Java对象。<br />需要注意的是，该方法中的prefix参数表示要绑定的前缀，例如”spring.datasource”；targetClass参数表示要绑定的Java类类型，例如DataSourceProperties.class。同时，也要注意在运行时出现异常时，会抛出一个运行时异常，并将原始异常信息和堆栈跟踪记录下来。<br />总之，该方法利用反射机制实现了基于前缀的配置属性自动绑定到Java对象上。该方法可以将配置文件中指定前缀的属性值映射、注入到Java对象中，方便进行后续操作。</p>\n<p>问：为什么在这段代码中使用反射机制呢？<br />在这段代码中，使用反射机制的主要原因是为了解决接口和实现类之间的依赖关系问题。具体来说，<code>org.springframework.boot.context.properties.bind.Binder</code>类是Spring Boot框架内部使用的一个工具类，用于将配置文件中的属性值绑定到Java对象上。如果直接调用<code>new</code>关键字创建该类的对象，会导致编译时依赖于该类的具体实现，从而造成程序耦合度过高的问题。<br />使用反射机制可以在运行时动态获取<code>Binder</code>类的引用，并根据需要进行方法调用。这种方式可以有效地减少程序的耦合度，提高代码的灵活性和可维护性。另外，通过使用反射机制，我们还可以轻松地替换<code>Binder</code>类的具体实现，以满足不同的业务需求。<br />总之，使用反射机制可以帮助我们解决接口和实现类之间的依赖关系问题，从而提高程序的灵活性和可维护性。当然，在使用反射机制时也要注意安全性和效率方面的问题，尽量避免滥用反射。</p>\n<h2 id=\"DBRouterJoinPoint-java\"><a href=\"#DBRouterJoinPoint-java\" class=\"headerlink\" title=\"DBRouterJoinPoint.java\"></a>DBRouterJoinPoint.java</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Aspect<br>@<span class=\"hljs-constructor\">Component(<span class=\"hljs-string\">&quot;db-router-point&quot;</span>)</span><br>public <span class=\"hljs-keyword\">class</span> DBRouterJoinPoint &#123;<br><br>    <span class=\"hljs-keyword\">private</span> Logger logger = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LoggerFactory</span>.</span></span>get<span class=\"hljs-constructor\">Logger(DBRouterJoinPoint.<span class=\"hljs-params\">class</span>)</span>;<br><br>    @Autowired<br>    <span class=\"hljs-keyword\">private</span> DBRouterConfig dbRouterConfig;<br><br>    @<span class=\"hljs-constructor\">Pointcut(<span class=\"hljs-string\">&quot;@annotation(cn.bugstack.middleware.db.router.annotation.DBRouter)&quot;</span>)</span><br>    public void aop<span class=\"hljs-constructor\">Point()</span> &#123;<br>    &#125;<br><br>    @<span class=\"hljs-constructor\">Around(<span class=\"hljs-string\">&quot;aopPoint() &amp;&amp; @annotation(dbRouter)&quot;</span>)</span><br>    public Object <span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">Router(ProceedingJoinPoint <span class=\"hljs-params\">jp</span>, DBRouter <span class=\"hljs-params\">dbRouter</span>)</span> throws Throwable &#123;<br>        String dbKey = dbRouter.key<span class=\"hljs-literal\">()</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StringUtils</span>.</span></span>is<span class=\"hljs-constructor\">Blank(<span class=\"hljs-params\">dbKey</span>)</span>) throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">RuntimeException(<span class=\"hljs-string\">&quot;annotation DBRouter key is null！&quot;</span>)</span>;<br>        <br>        String dbKeyAttr = get<span class=\"hljs-constructor\">AttrValue(<span class=\"hljs-params\">dbKey</span>, <span class=\"hljs-params\">jp</span>.<span class=\"hljs-params\">getArgs</span>()</span>);<br>        <span class=\"hljs-built_in\">int</span> size = dbRouterConfig.get<span class=\"hljs-constructor\">DbCount()</span><span class=\"hljs-operator\"> * </span>dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span>;<br>       <br>        <span class=\"hljs-built_in\">int</span> idx = (size - <span class=\"hljs-number\">1</span>) &amp; (dbKeyAttr.hash<span class=\"hljs-constructor\">Code()</span> ^ (dbKeyAttr.hash<span class=\"hljs-constructor\">Code()</span> &gt;&gt;&gt; <span class=\"hljs-number\">16</span>));<br>      <br>        <span class=\"hljs-built_in\">int</span> dbIdx = idx<span class=\"hljs-operator\"> / </span>dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span> + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-built_in\">int</span> tbIdx = idx - dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span><span class=\"hljs-operator\"> * </span>(dbIdx - <span class=\"hljs-number\">1</span>);<br>  <br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>set<span class=\"hljs-constructor\">DBKey(String.<span class=\"hljs-params\">format</span>(<span class=\"hljs-string\">&quot;%02d&quot;</span>, <span class=\"hljs-params\">dbIdx</span>)</span>);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>set<span class=\"hljs-constructor\">TBKey(String.<span class=\"hljs-params\">format</span>(<span class=\"hljs-string\">&quot;%02d&quot;</span>, <span class=\"hljs-params\">tbIdx</span>)</span>);<br>        logger.info(<span class=\"hljs-string\">&quot;数据库路由 method：&#123;&#125; dbIdx：&#123;&#125; tbIdx：&#123;&#125;&quot;</span>, get<span class=\"hljs-constructor\">Method(<span class=\"hljs-params\">jp</span>)</span>.get<span class=\"hljs-constructor\">Name()</span>, dbIdx, tbIdx);<br>  <br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            return jp.proceed<span class=\"hljs-literal\">()</span>;<br>        &#125; finally &#123;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>clear<span class=\"hljs-constructor\">DBKey()</span>;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>clear<span class=\"hljs-constructor\">TBKey()</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Method get<span class=\"hljs-constructor\">Method(JoinPoint <span class=\"hljs-params\">jp</span>)</span> throws NoSuchMethodException &#123;<br>        Signature <span class=\"hljs-keyword\">sig</span> = jp.get<span class=\"hljs-constructor\">Signature()</span>;<br>        MethodSignature methodSignature = (MethodSignature) <span class=\"hljs-keyword\">sig</span>;<br>        return jp.get<span class=\"hljs-constructor\">Target()</span>.get<span class=\"hljs-constructor\">Class()</span>.get<span class=\"hljs-constructor\">Method(<span class=\"hljs-params\">methodSignature</span>.<span class=\"hljs-params\">getName</span>()</span>, methodSignature.get<span class=\"hljs-constructor\">ParameterTypes()</span>);<br>    &#125;<br><br>    public String get<span class=\"hljs-constructor\">AttrValue(String <span class=\"hljs-params\">attr</span>, Object[] <span class=\"hljs-params\">args</span>)</span> &#123;<br>        String filedValue = null;<br>        <span class=\"hljs-keyword\">for</span> (Object arg : args) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StringUtils</span>.</span></span>is<span class=\"hljs-constructor\">NotBlank(<span class=\"hljs-params\">filedValue</span>)</span>) break;<br>                filedValue = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">BeanUtils</span>.</span></span>get<span class=\"hljs-constructor\">Property(<span class=\"hljs-params\">arg</span>, <span class=\"hljs-params\">attr</span>)</span>;<br>            &#125; catch (Exception e) &#123;<br>                logger.error(<span class=\"hljs-string\">&quot;获取路由属性值失败 attr：&#123;&#125;&quot;</span>, attr, e);<br>            &#125;<br>        &#125;<br>        return filedValue;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这个类是一个使用了 Spring AOP 框架的切面（Aspect），主要作用如下：<br>● 在使用注解 @DBRouter 标记的方法调用前后，拦截方法调用并动态计算出目标数据源信息，并将其存储到 ThreadLocal 中。<br>● 提供一系列辅助方法，例如计算路由、获取 Bean 属性值等。<br>具体来说，这个类中的 @Pointcut 注解定义了一个切入点，该切入点用于匹配所有带有 @DBRouter 注解的方法。而 @Around 注解则表示这是一个环绕通知类型的切面，它会在目标方法执行前和执行后都执行逻辑。<br>在 doRouter 方法中，首先从 DBRouter 注解中读取路由键，然后根据所需的路由键属性以及当前方法参数列表中的值计算出路由结果，并将其设置到 ThreadLocal 中，以便后续访问数据库时能够正确地选择数据源。最后，在目标方法执行完毕后，使用 finally 块清除 ThreadLocal 中的数据源信息。<br>此外，还有一些辅助方法，如 getMethod 方法用于获取 Join Point 对应的方法对象，getAttrValue 方法用于根据属性名称获取 Bean 对象的属性值等。<br>总之，这个类的作用是为带有 @DBRouter 注解的方法提供动态路由功能，并使用 Spring AOP 框架实现对方法调用的拦截和增强。</p>\n<p>private Logger logger &#x3D; LoggerFactory.getLogger(DBRouterJoinPoint.class);<br>这行代码的作用是声明一个日志记录器，用于在程序运行时输出日志信息。具体来说，该日志记录器使用了SLF4J（Simple Logging Facade for Java）框架提供的LoggerFactory.getLogger()静态方法来创建一个Logger对象。其中，DBRouterJoinPoint.class参数表示要获取日志记录器所属的类名。<br>在程序开发中，日志记录器是一种非常重要的工具，可以帮助开发者实时监控程序运行状态、调试错误、排查故障等。通过使用日志记录器，开发者可以将程序的运行过程和相关信息输出到指定的日志文件或控制台中，方便进行后续分析和处理。<br>在上述代码中，通过声明一个日志记录器，我们可以在程序运行时输出一些有用的信息，例如：<br>logger.info(“Start executing DB router logic”);<br>这条语句可以用来输出程序开始执行DB路由逻辑的提示信息。如果程序出现问题，我们也可以在日志中查看错误信息，例如：<br>logger.error(“An error occurred while executing DB router logic”, e);<br>这条语句可以用来输出程序执行DB路由逻辑时出现的异常信息，并将异常堆栈跟踪记录下来，以便后续进行排查和处理。<br>总之，通过使用日志记录器，我们可以更好地了解程序的运行状态，快速定位问题并进行及时处理，提高程序的可靠性和可维护性。</p>\n<p>@Pointcut(“@annotation(com.tute.middleware.db.router.annotation.DBRouter)”)<br>public void aopPoint(){</p>\n<p>}<br>这段代码是一个AOP切入点（Pointcut），用于定义一个切入点表达式，表示在被@DBRouter注解标记的方法上进行切面增强。<br>具体来说，该切入点通过@annotation()表达式来匹配所有被@DBRouter注解标记的方法。当程序中有一个方法被@DBRouter注解标记时，AOP框架会将该方法作为一个连接点（Join Point）进行拦截。然后，根据切面编程的规则，在目标方法执行前、执行后或异常抛出时，执行相应的增强逻辑，例如记录日志、事务管理、安全检查等等。<br>需要注意的是，该切入点本身不包含任何增强逻辑，只是一个定义了切入点的空方法。在实际使用中，我们通常会定义多个切入点，并结合切面（Aspect）类一起使用，例如：<br>@Aspect<br>@Component<br>public class DBRouterAspect {</p>\n<pre><code>private static final Logger logger = LoggerFactory.getLogger(DBRouterAspect.class);\n\n@Pointcut(&quot;@annotation(com.tute.middleware.db.router.annotation.DBRouter)&quot;)\npublic void aopPoint() &#123;&#125;\n\n@Before(&quot;aopPoint()&quot;)\npublic void before(JoinPoint joinPoint) &#123;\n    logger.info(&quot;开始执行DB路由逻辑...&quot;);\n&#125;\n\n@AfterReturning(pointcut = &quot;aopPoint()&quot;, returning = &quot;result&quot;)\npublic void afterReturning(JoinPoint joinPoint, Object result) &#123;\n    logger.info(&quot;DB路由逻辑执行完毕，返回值为：&#123;&#125;&quot;, result);\n&#125;\n\n@AfterThrowing(pointcut = &quot;aopPoint()&quot;, throwing = &quot;e&quot;)\npublic void afterThrowing(JoinPoint joinPoint, Exception e) &#123;\n    logger.error(&quot;DB路由逻辑执行异常，异常信息为：&#123;&#125;&quot;, e);\n&#125;\n</code></pre>\n<p>}<br>在上述代码中，我们定义了一个DBRouterAspect切面类，用于对所有被@DBRouter注解标记的方法进行增强。该切面类中包括一个切入点（使用了@Pointcut注解定义）、一个前置增强（使用了@Before注解定义）、一个正常返回增强（使用了@AfterReturning注解定义）和一个异常抛出增强（使用了@AfterThrowing注解定义）。前置增强、正常返回增强和异常抛出增强都是在目标方法执行前、执行后或异常抛出时执行的具体逻辑。<br>总之，AOP切入点是AOP编程的重要组成部分，可以帮助我们精确地定义需要增强的连接点，从而实现更加灵活和可维护的编程。</p>\n<p>在 Spring Boot 中，默认已开启了对注解 AOP 的支持，因此不需要进行额外的配置即可使用注解方式的 AOP。具体来说，只需要满足以下两个条件即可：</p>\n<ol>\n<li>在工程中引入 spring-boot-starter-aop 依赖。</li>\n<li>定义一个切面类，并使用 @Aspect 注解标记该类，然后在目标方法上使用注解来标识需要被拦截和增强的方法。<br>当应用程序启动时，Spring Boot 将自动扫描项目中定义的所有 @Aspect 类，并根据其定义的切入点和通知类型来创建代理对象，从而实现对目标方法的拦截和增强。<br>总之，在 Spring Boot 中使用注解方式的 AOP 是非常方便的，只需要按照上述步骤即可完成配置，无需进行其他复杂的配置。</li>\n</ol>\n<p>StringUtils.isBlank(dbKey) 和 StringUtils.isEmpty(dbKey) 是 Apache Commons Lang 库中的两个字符串处理方法，它们的区别如下：</p>\n<ul>\n<li><p>StringUtils.isBlank(dbKey) ：判断给定字符串是否为空或仅包含空格、制表符、换行符等不可见字符，如果是则返回 true，否则返回 false。例如，如果 dbKey 为 “ “ 或 “\\t\\n” 等，则返回 true，否则返回 false。</p>\n</li>\n<li><p>StringUtils.isEmpty(dbKey) ：判断给定字符串是否为空或长度为 0，如果是则返回 true，否则返回 false。例如，如果 dbKey 为 “” 或 null，则返回 true，否则返回 false。<br>因此，可以总结出以下区别：</p>\n</li>\n<li><p>isBlank() 方法考虑了除空字符串外的其他所有不可见字符，而 isEmpty() 方法不考虑这些字符。</p>\n</li>\n<li><p>isEmpty() 方法只检查字符串是否为空或具有零长度，而 isBlank() 方法还检查字符串是否全部由空格组成。<br>在使用时，需要根据具体情况来选择使用哪个方法。如果需要判断一个字符串是否为空或者只包含空格、制表符、回车符等不可见字符，应该使用 isBlank()；如果只需要判断一个字符串是否为空或长度为 0，则可以使用 isEmpty()。</p>\n</li>\n</ul>\n<p>@Around(“aopPoint() &amp;&amp; @annotation(dbRouter)”) 是一个用于定义切面的注解。它是 Spring AOP 框架中的一部分，用于在运行时根据指定的切入点表达式（Pointcut expression）拦截方法调用，并织入额外的逻辑。<br>具体来说，这个注解的含义如下：</p>\n<ul>\n<li><p>@Around 表示这个注解是一个环绕通知类型的切面，即会在目标方法执行前和执行后都执行一些逻辑。</p>\n</li>\n<li><p>“aopPoint() &amp;&amp; @annotation(dbRouter)” 是一个切入点表达式，用于指定需要被拦截的目标方法。它由两个部分组成： </p>\n<ul>\n<li>aopPoint()：表示使用名为 aopPoint 的切入点，该切入点是一个方法，用于定义需要被拦截的目标方法。这个切入点可能包含多个匹配规则，例如 execution()、within()、args() 等等。</li>\n<li>@annotation(dbRouter)：表示目标方法必须带有 dbRouter 注解才会被拦截。这里的 dbRouter 是自定义注解类型的名称，它可以作为一个切入点的限定条件，只有符合条件的目标方法才会被拦截。</li>\n</ul>\n</li>\n</ul>\n<p>因此，@Around(“aopPoint() &amp;&amp; @annotation(dbRouter)”) 注解的作用是定义一个环绕通知切面，该切面会拦截带有 dbRouter 注解的目标方法，并在目标方法执行前和执行后织入额外的逻辑。</p>\n<p>在 Spring AOP 框架中，切入点表达式（Pointcut expression）由两个部分组成：切入点和匹配规则。<br>切入点定义了一个或多个方法的集合，而匹配规则则指定了哪些方法可以被包含在切入点中。匹配规则常用的有以下几种：</p>\n<ul>\n<li><p>execution()：用于匹配方法执行的 Join Point（连接点），并且需要指定方法的签名。例如，execution(public * com.example.demo.<em>.</em>(..)) 表示匹配所有公共方法。</p>\n</li>\n<li><p>within()：用于匹配某个类或某个包内的所有 Join Point，需要指定类名或包名。例如，within(com.example.demo.service.*) 表示匹配 com.example.demo.service 包下的所有 Join Point。</p>\n</li>\n<li><p>this() &#x2F; target() &#x2F; args()：用于匹配当前正在被代理的对象、目标对象或方法参数等 Join Point 相关的信息。</p>\n</li>\n<li><p>@annotation() &#x2F; @within() &#x2F; @target()：用于匹配带有特定注解的 Join Point，需要指定注解类型。例如，@annotation(MyAnnotation) 表示匹配所有带有 MyAnnotation 注解的<br>方法。</p>\n</li>\n</ul>\n<p>这些匹配规则可以单独使用，也可以结合起来使用，以定义更精确的切入点。在实际开发中，我们可以根据具体需求选择合适的匹配规则来定义切入点，以实现拦截目标方法并织入额外逻辑的目的。<br>路由算法</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public Object <span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">Router(ProceedingJoinPoint <span class=\"hljs-params\">jp</span>, DBRouter <span class=\"hljs-params\">dbRouter</span>)</span> throws Throwable &#123;<br>        String dbKey = dbRouter.key<span class=\"hljs-literal\">()</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StringUtils</span>.</span></span>is<span class=\"hljs-constructor\">Blank(<span class=\"hljs-params\">dbKey</span>)</span>) throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">RuntimeException(<span class=\"hljs-string\">&quot;annotation DBRouter key is null！&quot;</span>)</span>;<br>        <br>        String dbKeyAttr = get<span class=\"hljs-constructor\">AttrValue(<span class=\"hljs-params\">dbKey</span>, <span class=\"hljs-params\">jp</span>.<span class=\"hljs-params\">getArgs</span>()</span>);<br>        <span class=\"hljs-built_in\">int</span> size = dbRouterConfig.get<span class=\"hljs-constructor\">DbCount()</span><span class=\"hljs-operator\"> * </span>dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span>;<br>       <br>        <span class=\"hljs-built_in\">int</span> idx = (size - <span class=\"hljs-number\">1</span>) &amp; (dbKeyAttr.hash<span class=\"hljs-constructor\">Code()</span> ^ (dbKeyAttr.hash<span class=\"hljs-constructor\">Code()</span> &gt;&gt;&gt; <span class=\"hljs-number\">16</span>));<br>      <br>        <span class=\"hljs-built_in\">int</span> dbIdx = idx<span class=\"hljs-operator\"> / </span>dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span> + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-built_in\">int</span> tbIdx = idx - dbRouterConfig.get<span class=\"hljs-constructor\">TbCount()</span><span class=\"hljs-operator\"> * </span>(dbIdx - <span class=\"hljs-number\">1</span>);<br>  <br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>set<span class=\"hljs-constructor\">DBKey(String.<span class=\"hljs-params\">format</span>(<span class=\"hljs-string\">&quot;%02d&quot;</span>, <span class=\"hljs-params\">dbIdx</span>)</span>);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>set<span class=\"hljs-constructor\">TBKey(String.<span class=\"hljs-params\">format</span>(<span class=\"hljs-string\">&quot;%02d&quot;</span>, <span class=\"hljs-params\">tbIdx</span>)</span>);<br>        logger.info(<span class=\"hljs-string\">&quot;数据库路由 method：&#123;&#125; dbIdx：&#123;&#125; tbIdx：&#123;&#125;&quot;</span>, get<span class=\"hljs-constructor\">Method(<span class=\"hljs-params\">jp</span>)</span>.get<span class=\"hljs-constructor\">Name()</span>, dbIdx, tbIdx);<br>  <br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            return jp.proceed<span class=\"hljs-literal\">()</span>;<br>        &#125; finally &#123;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>clear<span class=\"hljs-constructor\">DBKey()</span>;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DBContextHolder</span>.</span></span>clear<span class=\"hljs-constructor\">TBKey()</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>这段代码实现了一个数据库的路由功能。具体来说，它基于传入的注解（DBRouter）中的键值（key），计算出该操作要使用的数据库和表的索引，并将其存储在上下文中（DBContextHolder）。这样，在整个操作过程中，就可以根据上下文中的索引选择正确的数据库和表，而不需要显式地指定或硬编码。最终，无论执行是否成功，上下文都会被清除以释放资源。</p>\n<h3 id=\"为什么使用扰动函数\"><a href=\"#为什么使用扰动函数\" class=\"headerlink\" title=\"为什么使用扰动函数\"></a>为什么使用扰动函数</h3><p>理论上来说字符串的hashCode是一个int类型值，那可以直接作为数组下标了，且不会出现碰撞。但是这个hashCode的取值范围是[-2147483648, 2147483647]，有将近40亿的长度，谁也不能把数组初始化的这么大，内存也是放不下的。<br>我们默认初始化的Map大小是16个长度 DEFAULT_INITIAL_CAPACITY &#x3D; 1 &lt;&lt; 4，所以获取的Hash值并不能直接作为下标使用，需要与数组长度进行取模运算得到一个下标值，也就是我们上面做的散列列子。<br>那么，hashMap源码这里不只是直接获取哈希值，还进行了一次扰动计算，(h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16)。把哈希值右移16位，也就正好是自己长度的一半，之后与原哈希值做异或运算，这样就混合了原哈希值中的高位和低位，增大了<strong>随机性</strong>。</p>"}],"PostAsset":[{"_id":"source/_posts/2023-05-05-hahaha/dog.jpg","slug":"dog.jpg","post":"clher6xwa0003ocwe446pgvb3","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/1.png","slug":"1.png","post":"clher6xwl000tocweel0ccpx9","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/4cb065a31ddd414e8c45a4a08754c823.jpg","slug":"4cb065a31ddd414e8c45a4a08754c823.jpg","post":"clher6xwl000tocweel0ccpx9","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/75fad2d93da642fcb6006e7d538cba88.jpg","slug":"75fad2d93da642fcb6006e7d538cba88.jpg","post":"clher6xwl000tocweel0ccpx9","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/a6179f036c6a428fa92a5a541482490c.jpg","slug":"a6179f036c6a428fa92a5a541482490c.jpg","post":"clher6xwl000tocweel0ccpx9","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存击穿.png","slug":"缓存击穿.png","post":"clher6xwl000tocweel0ccpx9","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存击穿方案.png","slug":"缓存击穿方案.png","post":"clher6xwl000tocweel0ccpx9","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存穿透.png","slug":"缓存穿透.png","post":"clher6xwl000tocweel0ccpx9","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存雪崩.png","slug":"缓存雪崩.png","post":"clher6xwl000tocweel0ccpx9","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/雪崩失效.png","slug":"雪崩失效.png","post":"clher6xwl000tocweel0ccpx9","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-10-dbRouter/01.png","slug":"01.png","post":"clhhrqv3y0000s0we4psba5ev","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clher6xwa0003ocwe446pgvb3","category_id":"clher6xwc0004ocwe33vibxxm","_id":"clher6xwh000focwefnj95969"},{"post_id":"clher6xwe0007ocwe4zklgupz","category_id":"clher6xwg000bocwe5lwyde4x","_id":"clher6xwh000hocwe9nnah71c"},{"post_id":"clher6xwj000mocwehaavbuvd","category_id":"clher6xwg000bocwe5lwyde4x","_id":"clher6xwm000uocwe1qbl2342"},{"post_id":"clher6xwk000pocwehqv7hyyu","category_id":"clher6xwg000bocwe5lwyde4x","_id":"clher6xwo000zocwe7yapdcw0"},{"post_id":"clher6xwn000yocwe718i7ulq","category_id":"clher6xwg000bocwe5lwyde4x","_id":"clher6xwp0019ocwe37ko14se"},{"post_id":"clher6xwl000tocweel0ccpx9","category_id":"clher6xwo0010ocwea1x20i1t","_id":"clher6xwp001bocwefu85bhni"},{"post_id":"clhhrqv3y0000s0we4psba5ev","category_id":"clhhrqv420001s0we73iqe70s","_id":"clhhrqv470007s0we767w294a"}],"PostTag":[{"post_id":"clher6xwe0007ocwe4zklgupz","tag_id":"clher6xwg000docwehzpq3j9x","_id":"clher6xwh000jocwe0kqhc0az"},{"post_id":"clher6xwe0007ocwe4zklgupz","tag_id":"clher6xwd0005ocwedo6o1jkn","_id":"clher6xwh000kocwe28i76dhq"},{"post_id":"clher6xwe0007ocwe4zklgupz","tag_id":"clher6xwh000iocwede4w36az","_id":"clher6xwh000locwe6w66fitb"},{"post_id":"clher6xwj000mocwehaavbuvd","tag_id":"clher6xwg000docwehzpq3j9x","_id":"clher6xwk000oocweaynn6unf"},{"post_id":"clher6xwj000mocwehaavbuvd","tag_id":"clher6xwd0005ocwedo6o1jkn","_id":"clher6xwl000socweesbu92zm"},{"post_id":"clher6xwj000mocwehaavbuvd","tag_id":"clher6xwh000iocwede4w36az","_id":"clher6xwm000vocweeyurfrar"},{"post_id":"clher6xwk000pocwehqv7hyyu","tag_id":"clher6xwg000docwehzpq3j9x","_id":"clher6xwn000xocwe6bzlb61o"},{"post_id":"clher6xwk000pocwehqv7hyyu","tag_id":"clher6xwd0005ocwedo6o1jkn","_id":"clher6xwo0012ocwe5wbp3r77"},{"post_id":"clher6xwk000pocwehqv7hyyu","tag_id":"clher6xwh000iocwede4w36az","_id":"clher6xwp0013ocwehv5f68pl"},{"post_id":"clher6xwn000yocwe718i7ulq","tag_id":"clher6xwg000docwehzpq3j9x","_id":"clher6xwp0018ocwef0vf9e98"},{"post_id":"clher6xwn000yocwe718i7ulq","tag_id":"clher6xwd0005ocwedo6o1jkn","_id":"clher6xwp001aocwe77sj5dnl"},{"post_id":"clher6xwn000yocwe718i7ulq","tag_id":"clher6xwh000iocwede4w36az","_id":"clher6xwp001cocwe9am8hzkf"},{"post_id":"clher6xwl000tocweel0ccpx9","tag_id":"clher6xwo0011ocwe0o5cbn1k","_id":"clher6xwp001docwe8cps2pd3"},{"post_id":"clher6xwl000tocweel0ccpx9","tag_id":"clher6xwp0015ocwec11849x4","_id":"clher6xwp001eocweg6ikgsyl"},{"post_id":"clhhrqv3y0000s0we4psba5ev","tag_id":"clher6xwh000iocwede4w36az","_id":"clhhrqv460005s0wee94jgtny"},{"post_id":"clhhrqv3y0000s0we4psba5ev","tag_id":"clher6xwd0005ocwedo6o1jkn","_id":"clhhrqv460006s0wedwyn2ew7"},{"post_id":"clher6xwa0003ocwe446pgvb3","tag_id":"clhmzosas0000r8we0q113zgo","_id":"clhmzosav0001r8webrmqbk7v"},{"post_id":"clhhrqv3y0000s0we4psba5ev","tag_id":"clhmzosay0002r8we8vwrb76u","_id":"clhmzosaz0003r8we6i7h5n8b"}],"Tag":[{"name":"programing","_id":"clher6xwd0005ocwedo6o1jkn"},{"name":"诗词歌赋","_id":"clher6xwf0009ocwebnpfarog"},{"name":"Netty","_id":"clher6xwg000docwehzpq3j9x"},{"name":"Java","_id":"clher6xwh000iocwede4w36az"},{"name":"hello,world","_id":"clher6xwl000rocwehe289uz9"},{"name":"redis","_id":"clher6xwo0011ocwe0o5cbn1k"},{"name":"解决方案","_id":"clher6xwp0015ocwec11849x4"},{"name":"数据库","_id":"clhhrqv450002s0we81b420dm"},{"name":"诗词","_id":"clhmzosas0000r8we0q113zgo"},{"name":"Database","_id":"clhmzosay0002r8we8vwrb76u"}]}}