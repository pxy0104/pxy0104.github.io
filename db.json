{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/dog.jpg","path":"images/dog.jpg","modified":0,"renderable":0},{"_id":"themes/sky/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/sky/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/sky/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/sky/source/css/common/third-part.scss","path":"css/common/third-part.scss","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2023-05-06-hello.md","hash":"adb4f928da9f10a6b059bb73c8f8a91b36039571","modified":1683369968359},{"_id":"source/_posts/2023-05-05-hahaha.md","hash":"5035e1105de3ec0e7e192c7264d7b0ca0ceb474d","modified":1683370196773},{"_id":"source/about/index.md","hash":"2aef3216f88066b3c61166ebd15fbcf14e0f1486","modified":1683303831031},{"_id":"source/_posts/2023-05-06-imgtest.md","hash":"d10bb0c646ec8f0c3159e59d9600a6fae22ce7ee","modified":1683304536965},{"_id":"source/_posts/hello-world.md","hash":"2b9888f67dcd5ff371c43229ffb6a40ad0302b90","modified":1683368074489},{"_id":"source/tags/index.md","hash":"248d282c6efe8ef0333c30f48ed1fb2b62ab4237","modified":1683280513472},{"_id":"source/images/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1622676726087},{"_id":"source/_posts/2023-05-05-hahaha/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1622676726087},{"_id":"source/_posts/2023-05-06-imgtest/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1622676726087},{"_id":"themes/sky/layout/_partial/categorys.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1683278393471},{"_id":"themes/sky/_config.yml","hash":"ff10e92fb2ce49ef0af04cde13ff0ab9830e05ae","modified":1683280992018},{"_id":"themes/sky/README.md","hash":"09dbed10c11d9b553a2c6f4cb94d52a92059bda7","modified":1683278393469},{"_id":"themes/sky/layout/about.ejs","hash":"76b3601cb6103746d5e630209cd8b266e32991c3","modified":1683278393473},{"_id":"themes/sky/layout/archive.ejs","hash":"76e4a586a1651e11dd68184b8d57280ec518c487","modified":1683278393473},{"_id":"themes/sky/layout/categories.ejs","hash":"8f948a44125620fa62ca24887eca515c6cf9d64e","modified":1683278393474},{"_id":"themes/sky/layout/index.ejs","hash":"4e3a2e8b3972e74faa530a9c6a2f5f757ccc5535","modified":1683278393474},{"_id":"themes/sky/languages/en.yml","hash":"1cbbb9cac7753903aa55c739d8805cd3d4e7cae0","modified":1683278393470},{"_id":"themes/sky/layout/layout.ejs","hash":"c1601dcfa435ec603a3de0422f0d543c15c806a0","modified":1683278393474},{"_id":"themes/sky/languages/zh-CN.yml","hash":"fcac8318f44201d3047869b6c795886bf4d7a380","modified":1683278393470},{"_id":"themes/sky/layout/post.ejs","hash":"28fc2e70f5a8c98d5177b4639e6adb19b63c410d","modified":1683278393474},{"_id":"themes/sky/languages/default.yml","hash":"fcac8318f44201d3047869b6c795886bf4d7a380","modified":1683278393469},{"_id":"themes/sky/layout/tags.ejs","hash":"926231b0bb373c67fd5ced2bd2c7a74df36429d4","modified":1683278393475},{"_id":"themes/sky/layout/_partial/head.ejs","hash":"59c2f21b2757fe9e225cc1c1587b84ce079abab0","modified":1683278393471},{"_id":"themes/sky/layout/_partial/copyright.ejs","hash":"6181b792dcbab376880826ef7d988682201dfddd","modified":1683278393471},{"_id":"themes/sky/layout/_partial/header.ejs","hash":"f7ce3e651ef299ba10bbf0fd2e67561466faca12","modified":1683278393471},{"_id":"themes/sky/layout/_partial/mobile-header.ejs","hash":"c6865a03f907829f9043680265b6c6f029c146d9","modified":1683278393472},{"_id":"themes/sky/layout/_partial/social.ejs","hash":"0740b2c42d97ff3ff9968322bcd8bd41697f8e5f","modified":1683365998599},{"_id":"themes/sky/layout/_partial/paginator.ejs","hash":"8390ff839e440ad6bd458543ed5b3b0e52bf7e78","modified":1683278393472},{"_id":"themes/sky/layout/_partial/toc.ejs","hash":"152da61440963d08fe17190d3657907b3fb8d006","modified":1683278393473},{"_id":"themes/sky/source/css/_variables.scss","hash":"e12dd6adf8777df4839491c6f8d6ee39e288afad","modified":1683278393479},{"_id":"themes/sky/source/css/_reset.scss","hash":"05572018b6da81f21a9acfd12a73226a16a6d036","modified":1683278393479},{"_id":"themes/sky/source/css/gitment.css","hash":"c6951e8c4d709f1917c2cf78b9777d9610cb6532","modified":1683278393480},{"_id":"themes/sky/source/css/style.scss","hash":"69e0c5fe524ded6d1d69e9d66d3ff988de469571","modified":1683278393481},{"_id":"themes/sky/source/js/index.js","hash":"d920bfbafa72d5bc76eaa2870850c215b0503163","modified":1683278393481},{"_id":"themes/sky/source/css/_partial/_header.scss","hash":"4490dd9e14887e0d194d48a457e16e3700181276","modified":1683278393476},{"_id":"themes/sky/source/css/_partial/_paginator.scss","hash":"3936f82d0728589d95a0243b798771bb3278f621","modified":1683278393476},{"_id":"themes/sky/source/css/_partial/_post.scss","hash":"b0d0b07f8dc4c17f0f435124f2d2bcc0a1eead2a","modified":1683278393476},{"_id":"themes/sky/source/css/_partial/archive.scss","hash":"b150551b69c45673c19b9d65cffbb135fcbd2e7f","modified":1683278393477},{"_id":"themes/sky/source/css/_partial/_tags.scss","hash":"abd235a70cb0f5edb2042e412ddde5aa63a6618a","modified":1683278393477},{"_id":"themes/sky/source/css/_partial/mobile.scss","hash":"968812f56630bd98cf2277f912d8ac634244a5e5","modified":1683278393477},{"_id":"themes/sky/source/css/_partial/social.scss","hash":"f4126828c799557f177d24ee4d68277b6c3d2aa7","modified":1683278393478},{"_id":"themes/sky/source/css/_partial/copyright.scss","hash":"8265d6b06dc3c9474475e3bce7aef71e6a185c1b","modified":1683278393477},{"_id":"themes/sky/source/css/common/third-part.scss","hash":"9e6c9d7bab372df6983206b169ce5f9e6a7a5f9f","modified":1683278393480},{"_id":"themes/sky/source/css/_partial/post/code.scss","hash":"7372a76bf7c8d8828c670708e42f096fb9e8b918","modified":1683278393478},{"_id":"themes/sky/source/css/_partial/post/toc.scss","hash":"c70f20162c5eaaea6d9f87c85aee1483cfd4a6d5","modified":1683278393478},{"_id":"themes/sky/source/css/common/_utils.scss","hash":"4dab0d4bbd787c78550d6d3a45d94aee93ba1b76","modified":1683278393480},{"_id":"public/about/index.html","hash":"ab127c568839093f19fc51e1cdc2767e1ddb75c8","modified":1683305445967},{"_id":"public/tags/index.html","hash":"371883ccecffba1ca4e793e09af5ca27cdfe45dc","modified":1683305445967},{"_id":"public/2023/05/06/imgtest/index.html","hash":"bf49ce656ee1b23a8fefe0560c995b1d510a011d","modified":1683305445967},{"_id":"public/2023/05/06/hello/index.html","hash":"ef7745f76461d0de9c24ae018ef4564b3333aea6","modified":1683305445967},{"_id":"public/2023/05/05/hahaha/index.html","hash":"1b7911c52872c1ee1098ec5a2ec050a5492f2838","modified":1683305445967},{"_id":"public/2023/05/05/hello-world/index.html","hash":"98e701dcec8b8007d7da264893ca427bd41adf7a","modified":1683305445967},{"_id":"public/archives/index.html","hash":"5a8eb21fbc6547c0d023d07351e376b90c489b5b","modified":1683305445967},{"_id":"public/archives/2023/index.html","hash":"5a8eb21fbc6547c0d023d07351e376b90c489b5b","modified":1683305445967},{"_id":"public/archives/2023/05/index.html","hash":"5a8eb21fbc6547c0d023d07351e376b90c489b5b","modified":1683305445967},{"_id":"public/index.html","hash":"cb58f739b920746e12cfdd660c75076698905c33","modified":1683305445967},{"_id":"public/css/style.css","hash":"b6d4afb2e85679da41ad5fc845e4aa661acba3f2","modified":1683305445967},{"_id":"public/css/common/third-part.css","hash":"90b3753ca86ce3992ea70b3b8ade30add817f3a1","modified":1683305445967},{"_id":"public/js/index.js","hash":"907faae45c668d3650efa971da364dddb674fb19","modified":1683305445967},{"_id":"public/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1683305445967},{"_id":"public/2023/05/05/hahaha/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1683305445967},{"_id":"public/images/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1683305445967},{"_id":"public/2023/05/06/imgtest/dog.jpg","hash":"a5bb132ac160061ab83c4c7b04a2f441b11a46c1","modified":1683305445967},{"_id":"source/_posts/2023-05-06-56.md","hash":"c564b0e4ca911198ce6365977529614f2bade74c","modified":1683356259409},{"_id":"source/_posts/2023-05-06-redis应用问题解决.md","hash":"dd3a75901f1f606c3f45b8ee784261a1d3ee171e","modified":1683368990422},{"_id":"source/categories/index.md","hash":"1be552089d7cd7085c717ff7130688bb29acd77c","modified":1683369645276},{"_id":"source/_posts/2023-05-06-redis应用问题解决/1.png","hash":"67a0ba529d303261c378fc6e1b33bda2c10c8a04","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存击穿方案.png","hash":"cccd5f058f98d3b30fccecda1cf441a69826ea70","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存击穿.png","hash":"db1d2a396722b20f362cc5eab778c3e1f660c39c","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/4cb065a31ddd414e8c45a4a08754c823.jpg","hash":"9da1c134f36064307e9c4c25e8ecfbebfc53bafe","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/75fad2d93da642fcb6006e7d538cba88.jpg","hash":"552a9e900c63eb8dda135925e6303026169d2765","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/a6179f036c6a428fa92a5a541482490c.jpg","hash":"7d7374d7307ce2091051a47c9e6a209b06319361","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存穿透.png","hash":"5918159f51ffd4dbd6b8ca1d83ec3b4b014467ba","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存雪崩.png","hash":"d1f4aa9971741ce480b4a70135ab81b1120c4338","modified":1683366298000},{"_id":"source/_posts/2023-05-06-redis应用问题解决/雪崩失效.png","hash":"9265f2dbab25bf3199d57bddffc65c482a46141a","modified":1683366298000}],"Category":[{"name":"基础","_id":"clhbvc46q00025sweh2wj1313"},{"name":"入门","_id":"clhbvc46w00055swe2igy3696"},{"name":"poem","parent":"clhbvc46q00025sweh2wj1313","_id":"clhbvc46x00085swe8ib0h57j"},{"name":"redis","_id":"clhbvc46y000b5swec8c9avpe"},{"name":"基础","parent":"clhbvc46w00055swe2igy3696","_id":"clhbvc46y000f5sweatpfecfi"},{"name":"base","parent":"clhbvc46y000f5sweatpfecfi","_id":"clhbvc46z000k5swec7mfd7mz"},{"name":"poem","_id":"clhbvdtey000p5swefoq65ef3"},{"name":"诗词","_id":"clhbvo2qh000r5swe8h826yri"}],"Data":[],"Page":[{"layout":"about","_content":"# 联系\n\nI really **like** using Markdown.\n2290418832\\\nI **think** I'll use it to format all of my documents from now on.\n\n`eruak`\n`c++`\n{% img ../images/dog.jpg '\"dog\" \"lihua\"' %}\n这是一个分割行\n\n![123](/images/dog.jpg)\n<!-- 以上是有效格式 -->\n## 这是郭旭东,此人是一名兽医\n\n郭医生QQ:1300433162\n","source":"about/index.md","raw":"---\nlayout: about\n---\n# 联系\n\nI really **like** using Markdown.\n2290418832\\\nI **think** I'll use it to format all of my documents from now on.\n\n`eruak`\n`c++`\n{% img ../images/dog.jpg '\"dog\" \"lihua\"' %}\n这是一个分割行\n\n![123](/images/dog.jpg)\n<!-- 以上是有效格式 -->\n## 这是郭旭东,此人是一名兽医\n\n郭医生QQ:1300433162\n","date":"2023-05-06T11:10:46.994Z","updated":"2023-05-06T11:10:46.994Z","path":"about/index.html","_id":"clhasln990000mkwehjz75v8w","title":"","comments":1,"content":"<h1 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h1><p>I really <strong>like</strong> using Markdown.<br>2290418832<br>I <strong>think</strong> I’ll use it to format all of my documents from now on.</p>\n<p><code>eruak</code><br><code>c++</code></p>\n<img class=\"..&#x2F;images&#x2F;dog.jpg &quot;dog&quot; &quot;lihua&quot;\">\n<p>这是一个分割行</p>\n<p><img src=\"/images/dog.jpg\" alt=\"123\"></p>\n<!-- 以上是有效格式 -->\n<h2 id=\"这是郭旭东-此人是一名兽医\"><a href=\"#这是郭旭东-此人是一名兽医\" class=\"headerlink\" title=\"这是郭旭东,此人是一名兽医\"></a>这是郭旭东,此人是一名兽医</h2><p>郭医生QQ:1300433162</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h1><p>I really <strong>like</strong> using Markdown.<br>2290418832<br>I <strong>think</strong> I’ll use it to format all of my documents from now on.</p>\n<p><code>eruak</code><br><code>c++</code></p>\n<img class=\"..&#x2F;images&#x2F;dog.jpg &quot;dog&quot; &quot;lihua&quot;\">\n<p>这是一个分割行</p>\n<p><img src=\"/images/dog.jpg\" alt=\"123\"></p>\n<!-- 以上是有效格式 -->\n<h2 id=\"这是郭旭东-此人是一名兽医\"><a href=\"#这是郭旭东-此人是一名兽医\" class=\"headerlink\" title=\"这是郭旭东,此人是一名兽医\"></a>这是郭旭东,此人是一名兽医</h2><p>郭医生QQ:1300433162</p>\n"},{"layout":"tags","_content":"","source":"tags/index.md","raw":"---\nlayout: tags\n---\n","date":"2023-05-05T09:55:13.472Z","updated":"2023-05-05T09:55:13.472Z","path":"tags/index.html","title":"","comments":1,"_id":"clhasln9g0002mkweh9717z0a","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"categories","_content":"","source":"categories/index.md","raw":"---\nlayout: categories\n---\n","date":"2023-05-06T10:40:45.276Z","updated":"2023-05-06T10:40:45.276Z","path":"categories/index.html","title":"","comments":1,"_id":"clhbvc46k00005swedugb4b59","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hahaha","date":"2023-05-05T15:51:04.000Z","_content":"\n衣带渐宽终不悔,为伊消得人憔悴\n\n<!-- more -->\n蓦然回首,那人竟在灯火阑珊处。\n<!-- ![这是图片](blog\\source\\_posts\\2023-05-05-hahaha\\dog.jpg \"Magic Gardens\") #无效格式1 -->\n\n![123](/images/dog.jpg) # 有效格式1\n\n++++++++++\n\n![222](dog.jpg) #无效格式\n\n+++++++++++\n\n![123](/images/dog.jpg) # 有效格式1\n++++++++++++\n![12](/images/dog.jpg) # 有效格式2\n","source":"_posts/2023-05-05-hahaha.md","raw":"---\ntitle: hahaha\ndate: 2023-05-05 23:51:04\ntags: 诗词歌赋\ncategories: 诗词\n---\n\n衣带渐宽终不悔,为伊消得人憔悴\n\n<!-- more -->\n蓦然回首,那人竟在灯火阑珊处。\n<!-- ![这是图片](blog\\source\\_posts\\2023-05-05-hahaha\\dog.jpg \"Magic Gardens\") #无效格式1 -->\n\n![123](/images/dog.jpg) # 有效格式1\n\n++++++++++\n\n![222](dog.jpg) #无效格式\n\n+++++++++++\n\n![123](/images/dog.jpg) # 有效格式1\n++++++++++++\n![12](/images/dog.jpg) # 有效格式2\n","slug":"hahaha","published":1,"updated":"2023-05-06T11:04:27.202Z","_id":"clhasln9b0001mkwegm5jb6zz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>衣带渐宽终不悔,为伊消得人憔悴</p>\n<span id=\"more\"></span>\n<p>蓦然回首,那人竟在灯火阑珊处。</p>\n<!-- ![这是图片](blog\\source\\_posts\\2023-05-05-hahaha\\dog.jpg \"Magic Gardens\") #无效格式1 -->\n\n<p><img src=\"/images/dog.jpg\" alt=\"123\"> # 有效格式1</p>\n<p>++++++++++</p>\n<p><img src=\"/2023/05/05/hahaha/dog.jpg\" alt=\"222\"> #无效格式</p>\n<p>+++++++++++</p>\n<p><img src=\"/images/dog.jpg\" alt=\"123\"> # 有效格式1<br>++++++++++++<br><img src=\"/images/dog.jpg\" alt=\"12\"> # 有效格式2</p>\n","site":{"data":{}},"excerpt":"<p>衣带渐宽终不悔,为伊消得人憔悴</p>","more":"<p>蓦然回首,那人竟在灯火阑珊处。</p>\n<!-- ![这是图片](blog\\source\\_posts\\2023-05-05-hahaha\\dog.jpg \"Magic Gardens\") #无效格式1 -->\n\n<p><img src=\"/images/dog.jpg\" alt=\"123\"> # 有效格式1</p>\n<p>++++++++++</p>\n<p><img src=\"/2023/05/05/hahaha/dog.jpg\" alt=\"222\"> #无效格式</p>\n<p>+++++++++++</p>\n<p><img src=\"/images/dog.jpg\" alt=\"123\"> # 有效格式1<br>++++++++++++<br><img src=\"/images/dog.jpg\" alt=\"12\"> # 有效格式2</p>"},{"title":"hello","date":"2023-05-05T16:29:33.000Z","_content":"\nHello world!\n<!-- more -->\n\n1\n2\n3\n4\n5\ngxd*******************\n","source":"_posts/2023-05-06-hello.md","raw":"---\ntitle: hello\ndate: 2023-05-06 00:29:33\ntags: hello,world\ncategories: 入门\n \n---\n\nHello world!\n<!-- more -->\n\n1\n2\n3\n4\n5\ngxd*******************\n","slug":"hello","published":1,"updated":"2023-05-06T11:04:44.943Z","_id":"clhasln9h0003mkweeap8a1ci","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Hello world!</p>\n<span id=\"more\"></span>\n\n<p>1<br>2<br>3<br>4<br>5<br>gxd*******************</p>\n","site":{"data":{}},"excerpt":"<p>Hello world!</p>","more":"<p>1<br>2<br>3<br>4<br>5<br>gxd*******************</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: 入门\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-05-05T09:05:03.971Z","updated":"2023-05-06T11:05:24.274Z","_id":"clhasln9o0005mkwedbvy12jt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"56","date":"2023-05-06T06:43:18.000Z","_content":"\n今日时间\n14点44分 2023年5月6日\n\n","source":"_posts/2023-05-06-56.md","raw":"---\ntitle: 56\ndate: 2023-05-06 14:43:18\ntags: programing\ncategories: 诗词\n---\n\n今日时间\n14点44分 2023年5月6日\n\n","slug":"56","published":1,"updated":"2023-05-06T11:04:38.252Z","_id":"clhbvc46p00015swebt8903lv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今日时间<br>14点44分 2023年5月6日</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今日时间<br>14点44分 2023年5月6日</p>\n"},{"title":"redis应用问题解决","date":"2023-05-06T10:03:21.000Z","_content":"\n在学习Redis的过程中，我结合尚硅谷的视频对配套笔记做了一些整理。\n<!-- more -->\n\n# Redis 应用问题解决\n\n- 缓存穿透\n- 缓存击穿\n- 缓存雪崩\n\n## 一、缓存穿透\n\nkey 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如\n\n用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。\n\n缓存穿透发生的条件：\n\n1. 应用服务器压力变大\n2. redis 命中率降低\n3. 一直查询数据库，使得数据库压力太大而压垮\n\n其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。\n\n缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。\n\n![缓存穿透](缓存穿透.png)\n\n### 解决方案\n\n1. 对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。\n2. 设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。\n3. 采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。\n4. 进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。\n\n## 二、缓存击穿\n\nkey 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。\n\n**缓存击穿的现象：**\n\n数据库访问压力瞬时增加，数据库崩溃\n\nredis 里面没有出现大量 key 过期\n\nredis 正常运行\n\n**缓存击穿发生的原因**：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。\n\n![](缓存击穿.png)\n\n### 解决方案\n\nkey 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。\n\n1. 预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。\n2. 实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。\n3. 使用锁：\n                                                    1. 就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。\n                        2. 先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。\n                        3. 当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；\n                        4. 当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。\n\n![](缓存击穿方案.png)\n\n## 三、缓存雪崩\n\n**问题描述**\n\nkey 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。\n\n\n\n缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。\n\n![](缓存雪崩.png)缓存失效瞬间：![](雪崩失效.png)\n\n\n\n**解决方案**\n\n1. 构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。\n2. 使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。\n3. 设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。\n4. 将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。\n\n## 四、分布式锁\n\n**问题描述**\n\n随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！\n\n分布式锁主流的实现方案：\n\n2. 基于数据库实现分布式锁\n3. 基于缓存（Redis 等）\n4. 基于 Zookeeper\n\n措施： setnx 上锁 del解锁\n\n         设置过期时间\n\n        原子操作：设置锁的同时设置过期时间 \n\n         set key value nx ex 10\n\n\n\n**根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：**\n\n\n\n- 类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。\n- 另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。\n\n每一种分布式锁解决方案都有各自的优缺点：\n\n\n\n性能：redis 最高\n\n可靠性：zookeeper 最高\n\n\n\nsetnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。\n\n\n\nset key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。\n\n**问题**\n![](4cb065a31ddd414e8c45a4a08754c823.jpg)\n\nuuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。\n\n\n\n使用uuid防止误删\n\n![](a6179f036c6a428fa92a5a541482490c.jpg)\n\n\n\n**问题**\n\n![](75fad2d93da642fcb6006e7d538cba88.jpg)\n\n使用lua脚本保持原子性操作\n\n\n\n\n\n### \n\n### RedLock\n\nRedlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。\n\n此种方式具有以下特性：\n\n互斥访问：即永远只有一个 client 能拿到锁。\n\n避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。\n\n容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务\n\n### RedLock 原理（了解）\n\n获取当前 Unix 时间，以毫秒为单位。\n\n依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。\n\n客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。\n\n如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。\n\n如果因为某些原因，获取锁失败（没有在至少 N/2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。\n\nNew:\n\nACL\n\nIO 多线程其实指客户端交互部分的网络 IO 交互处理模块 多线程，而非执行命令多线程。Redis6 执行命令依然是单线程。\n\nRedis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:\n![](1.png)\n","source":"_posts/2023-05-06-redis应用问题解决.md","raw":"---\ntitle: redis应用问题解决\ndate: 2023-05-06 18:03:21\ntags:\n- redis\n- 解决方案\ncategories: redis\n---\n\n在学习Redis的过程中，我结合尚硅谷的视频对配套笔记做了一些整理。\n<!-- more -->\n\n# Redis 应用问题解决\n\n- 缓存穿透\n- 缓存击穿\n- 缓存雪崩\n\n## 一、缓存穿透\n\nkey 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如\n\n用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。\n\n缓存穿透发生的条件：\n\n1. 应用服务器压力变大\n2. redis 命中率降低\n3. 一直查询数据库，使得数据库压力太大而压垮\n\n其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。\n\n缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。\n\n![缓存穿透](缓存穿透.png)\n\n### 解决方案\n\n1. 对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。\n2. 设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。\n3. 采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。\n4. 进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。\n\n## 二、缓存击穿\n\nkey 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。\n\n**缓存击穿的现象：**\n\n数据库访问压力瞬时增加，数据库崩溃\n\nredis 里面没有出现大量 key 过期\n\nredis 正常运行\n\n**缓存击穿发生的原因**：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。\n\n![](缓存击穿.png)\n\n### 解决方案\n\nkey 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。\n\n1. 预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。\n2. 实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。\n3. 使用锁：\n                                                    1. 就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。\n                        2. 先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。\n                        3. 当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；\n                        4. 当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。\n\n![](缓存击穿方案.png)\n\n## 三、缓存雪崩\n\n**问题描述**\n\nkey 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。\n\n\n\n缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。\n\n![](缓存雪崩.png)缓存失效瞬间：![](雪崩失效.png)\n\n\n\n**解决方案**\n\n1. 构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。\n2. 使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。\n3. 设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。\n4. 将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。\n\n## 四、分布式锁\n\n**问题描述**\n\n随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！\n\n分布式锁主流的实现方案：\n\n2. 基于数据库实现分布式锁\n3. 基于缓存（Redis 等）\n4. 基于 Zookeeper\n\n措施： setnx 上锁 del解锁\n\n         设置过期时间\n\n        原子操作：设置锁的同时设置过期时间 \n\n         set key value nx ex 10\n\n\n\n**根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：**\n\n\n\n- 类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。\n- 另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。\n\n每一种分布式锁解决方案都有各自的优缺点：\n\n\n\n性能：redis 最高\n\n可靠性：zookeeper 最高\n\n\n\nsetnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。\n\n\n\nset key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。\n\n**问题**\n![](4cb065a31ddd414e8c45a4a08754c823.jpg)\n\nuuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。\n\n\n\n使用uuid防止误删\n\n![](a6179f036c6a428fa92a5a541482490c.jpg)\n\n\n\n**问题**\n\n![](75fad2d93da642fcb6006e7d538cba88.jpg)\n\n使用lua脚本保持原子性操作\n\n\n\n\n\n### \n\n### RedLock\n\nRedlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。\n\n此种方式具有以下特性：\n\n互斥访问：即永远只有一个 client 能拿到锁。\n\n避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。\n\n容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务\n\n### RedLock 原理（了解）\n\n获取当前 Unix 时间，以毫秒为单位。\n\n依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。\n\n客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。\n\n如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。\n\n如果因为某些原因，获取锁失败（没有在至少 N/2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。\n\nNew:\n\nACL\n\nIO 多线程其实指客户端交互部分的网络 IO 交互处理模块 多线程，而非执行命令多线程。Redis6 执行命令依然是单线程。\n\nRedis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:\n![](1.png)\n","slug":"redis应用问题解决","published":1,"updated":"2023-05-06T10:29:50.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhbvc46v00045swe64teb98l","content":"<p>在学习Redis的过程中，我结合尚硅谷的视频对配套笔记做了一些整理。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Redis-应用问题解决\"><a href=\"#Redis-应用问题解决\" class=\"headerlink\" title=\"Redis 应用问题解决\"></a>Redis 应用问题解决</h1><ul>\n<li>缓存穿透</li>\n<li>缓存击穿</li>\n<li>缓存雪崩</li>\n</ul>\n<h2 id=\"一、缓存穿透\"><a href=\"#一、缓存穿透\" class=\"headerlink\" title=\"一、缓存穿透\"></a>一、缓存穿透</h2><p>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如</p>\n<p>用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>\n<p>缓存穿透发生的条件：</p>\n<ol>\n<li>应用服务器压力变大</li>\n<li>redis 命中率降低</li>\n<li>一直查询数据库，使得数据库压力太大而压垮</li>\n</ol>\n<p>其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。</p>\n<p>缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F.png\" alt=\"缓存穿透\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li>对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</li>\n<li>设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。</li>\n<li>采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</li>\n<li>进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</li>\n</ol>\n<h2 id=\"二、缓存击穿\"><a href=\"#二、缓存击穿\" class=\"headerlink\" title=\"二、缓存击穿\"></a>二、缓存击穿</h2><p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p>\n<p><strong>缓存击穿的现象：</strong></p>\n<p>数据库访问压力瞬时增加，数据库崩溃</p>\n<p>redis 里面没有出现大量 key 过期</p>\n<p>redis 正常运行</p>\n<p><strong>缓存击穿发生的原因</strong>：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF.png\"></p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。</p>\n<ol>\n<li>预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。</li>\n<li>实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。</li>\n<li>使用锁：<br>                                             1. 就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。<br>                 2. 先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。<br>                 3. 当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；<br>                 4. 当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。</li>\n</ol>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E6%96%B9%E6%A1%88.png\"></p>\n<h2 id=\"三、缓存雪崩\"><a href=\"#三、缓存雪崩\" class=\"headerlink\" title=\"三、缓存雪崩\"></a>三、缓存雪崩</h2><p><strong>问题描述</strong></p>\n<p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p>\n<p>缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.png\">缓存失效瞬间：<img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E9%9B%AA%E5%B4%A9%E5%A4%B1%E6%95%88.png\"></p>\n<p><strong>解决方案</strong></p>\n<ol>\n<li>构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。</li>\n<li>使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。</li>\n<li>设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。</li>\n<li>将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li>\n</ol>\n<h2 id=\"四、分布式锁\"><a href=\"#四、分布式锁\" class=\"headerlink\" title=\"四、分布式锁\"></a>四、分布式锁</h2><p><strong>问题描述</strong></p>\n<p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p>\n<p>分布式锁主流的实现方案：</p>\n<ol start=\"2\">\n<li>基于数据库实现分布式锁</li>\n<li>基于缓存（Redis 等）</li>\n<li>基于 Zookeeper</li>\n</ol>\n<p>措施： setnx 上锁 del解锁</p>\n<pre><code>     设置过期时间\n\n    原子操作：设置锁的同时设置过期时间 \n\n     set key value nx ex 10\n</code></pre>\n<p><strong>根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：</strong></p>\n<ul>\n<li>类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。</li>\n<li>另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。</li>\n</ul>\n<p>每一种分布式锁解决方案都有各自的优缺点：</p>\n<p>性能：redis 最高</p>\n<p>可靠性：zookeeper 最高</p>\n<p>setnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。</p>\n<p>set key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。</p>\n<p><strong>问题</strong><br><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/4cb065a31ddd414e8c45a4a08754c823.jpg\"></p>\n<p>uuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。</p>\n<p>使用uuid防止误删</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/a6179f036c6a428fa92a5a541482490c.jpg\"></p>\n<p><strong>问题</strong></p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/75fad2d93da642fcb6006e7d538cba88.jpg\"></p>\n<p>使用lua脚本保持原子性操作</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"RedLock\"><a href=\"#RedLock\" class=\"headerlink\" title=\"RedLock\"></a>RedLock</h3><p>Redlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。</p>\n<p>此种方式具有以下特性：</p>\n<p>互斥访问：即永远只有一个 client 能拿到锁。</p>\n<p>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。</p>\n<p>容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务</p>\n<h3 id=\"RedLock-原理（了解）\"><a href=\"#RedLock-原理（了解）\" class=\"headerlink\" title=\"RedLock 原理（了解）\"></a>RedLock 原理（了解）</h3><p>获取当前 Unix 时间，以毫秒为单位。</p>\n<p>依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。</p>\n<p>客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</p>\n<p>如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。</p>\n<p>如果因为某些原因，获取锁失败（没有在至少 N&#x2F;2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。</p>\n<p>New:</p>\n<p>ACL</p>\n<p>IO 多线程其实指客户端交互部分的网络 IO 交互处理模块 多线程，而非执行命令多线程。Redis6 执行命令依然是单线程。</p>\n<p>Redis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH&#x2F;LPOP 等等的并发问题。整体的设计大体如下:<br><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/1.png\"></p>\n","site":{"data":{}},"excerpt":"<p>在学习Redis的过程中，我结合尚硅谷的视频对配套笔记做了一些整理。</p>","more":"<h1 id=\"Redis-应用问题解决\"><a href=\"#Redis-应用问题解决\" class=\"headerlink\" title=\"Redis 应用问题解决\"></a>Redis 应用问题解决</h1><ul>\n<li>缓存穿透</li>\n<li>缓存击穿</li>\n<li>缓存雪崩</li>\n</ul>\n<h2 id=\"一、缓存穿透\"><a href=\"#一、缓存穿透\" class=\"headerlink\" title=\"一、缓存穿透\"></a>一、缓存穿透</h2><p>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如</p>\n<p>用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>\n<p>缓存穿透发生的条件：</p>\n<ol>\n<li>应用服务器压力变大</li>\n<li>redis 命中率降低</li>\n<li>一直查询数据库，使得数据库压力太大而压垮</li>\n</ol>\n<p>其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。</p>\n<p>缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F.png\" alt=\"缓存穿透\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li>对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</li>\n<li>设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。</li>\n<li>采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</li>\n<li>进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</li>\n</ol>\n<h2 id=\"二、缓存击穿\"><a href=\"#二、缓存击穿\" class=\"headerlink\" title=\"二、缓存击穿\"></a>二、缓存击穿</h2><p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p>\n<p><strong>缓存击穿的现象：</strong></p>\n<p>数据库访问压力瞬时增加，数据库崩溃</p>\n<p>redis 里面没有出现大量 key 过期</p>\n<p>redis 正常运行</p>\n<p><strong>缓存击穿发生的原因</strong>：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF.png\"></p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。</p>\n<ol>\n<li>预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。</li>\n<li>实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。</li>\n<li>使用锁：<br>                                             1. 就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。<br>                 2. 先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。<br>                 3. 当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；<br>                 4. 当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。</li>\n</ol>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E6%96%B9%E6%A1%88.png\"></p>\n<h2 id=\"三、缓存雪崩\"><a href=\"#三、缓存雪崩\" class=\"headerlink\" title=\"三、缓存雪崩\"></a>三、缓存雪崩</h2><p><strong>问题描述</strong></p>\n<p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p>\n<p>缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.png\">缓存失效瞬间：<img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E9%9B%AA%E5%B4%A9%E5%A4%B1%E6%95%88.png\"></p>\n<p><strong>解决方案</strong></p>\n<ol>\n<li>构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。</li>\n<li>使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。</li>\n<li>设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。</li>\n<li>将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li>\n</ol>\n<h2 id=\"四、分布式锁\"><a href=\"#四、分布式锁\" class=\"headerlink\" title=\"四、分布式锁\"></a>四、分布式锁</h2><p><strong>问题描述</strong></p>\n<p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p>\n<p>分布式锁主流的实现方案：</p>\n<ol start=\"2\">\n<li>基于数据库实现分布式锁</li>\n<li>基于缓存（Redis 等）</li>\n<li>基于 Zookeeper</li>\n</ol>\n<p>措施： setnx 上锁 del解锁</p>\n<pre><code>     设置过期时间\n\n    原子操作：设置锁的同时设置过期时间 \n\n     set key value nx ex 10\n</code></pre>\n<p><strong>根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：</strong></p>\n<ul>\n<li>类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。</li>\n<li>另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。</li>\n</ul>\n<p>每一种分布式锁解决方案都有各自的优缺点：</p>\n<p>性能：redis 最高</p>\n<p>可靠性：zookeeper 最高</p>\n<p>setnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。</p>\n<p>set key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。</p>\n<p><strong>问题</strong><br><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/4cb065a31ddd414e8c45a4a08754c823.jpg\"></p>\n<p>uuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。</p>\n<p>使用uuid防止误删</p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/a6179f036c6a428fa92a5a541482490c.jpg\"></p>\n<p><strong>问题</strong></p>\n<p><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/75fad2d93da642fcb6006e7d538cba88.jpg\"></p>\n<p>使用lua脚本保持原子性操作</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"RedLock\"><a href=\"#RedLock\" class=\"headerlink\" title=\"RedLock\"></a>RedLock</h3><p>Redlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。</p>\n<p>此种方式具有以下特性：</p>\n<p>互斥访问：即永远只有一个 client 能拿到锁。</p>\n<p>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。</p>\n<p>容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务</p>\n<h3 id=\"RedLock-原理（了解）\"><a href=\"#RedLock-原理（了解）\" class=\"headerlink\" title=\"RedLock 原理（了解）\"></a>RedLock 原理（了解）</h3><p>获取当前 Unix 时间，以毫秒为单位。</p>\n<p>依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。</p>\n<p>客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</p>\n<p>如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。</p>\n<p>如果因为某些原因，获取锁失败（没有在至少 N&#x2F;2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。</p>\n<p>New:</p>\n<p>ACL</p>\n<p>IO 多线程其实指客户端交互部分的网络 IO 交互处理模块 多线程，而非执行命令多线程。Redis6 执行命令依然是单线程。</p>\n<p>Redis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH&#x2F;LPOP 等等的并发问题。整体的设计大体如下:<br><img src=\"/2023/05/06/redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/1.png\"></p>"}],"PostAsset":[{"_id":"source/_posts/2023-05-05-hahaha/dog.jpg","slug":"dog.jpg","post":"clhasln9b0001mkwegm5jb6zz","modified":0,"renderable":0},{"_id":"source/_posts/2023-05-06-redis应用问题解决/1.png","post":"clhbvc46v00045swe64teb98l","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/2023-05-06-redis应用问题解决/4cb065a31ddd414e8c45a4a08754c823.jpg","post":"clhbvc46v00045swe64teb98l","slug":"4cb065a31ddd414e8c45a4a08754c823.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2023-05-06-redis应用问题解决/75fad2d93da642fcb6006e7d538cba88.jpg","post":"clhbvc46v00045swe64teb98l","slug":"75fad2d93da642fcb6006e7d538cba88.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2023-05-06-redis应用问题解决/a6179f036c6a428fa92a5a541482490c.jpg","post":"clhbvc46v00045swe64teb98l","slug":"a6179f036c6a428fa92a5a541482490c.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存击穿.png","post":"clhbvc46v00045swe64teb98l","slug":"缓存击穿.png","modified":1,"renderable":1},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存击穿方案.png","post":"clhbvc46v00045swe64teb98l","slug":"缓存击穿方案.png","modified":1,"renderable":1},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存穿透.png","post":"clhbvc46v00045swe64teb98l","slug":"缓存穿透.png","modified":1,"renderable":1},{"_id":"source/_posts/2023-05-06-redis应用问题解决/缓存雪崩.png","post":"clhbvc46v00045swe64teb98l","slug":"缓存雪崩.png","modified":1,"renderable":1},{"_id":"source/_posts/2023-05-06-redis应用问题解决/雪崩失效.png","post":"clhbvc46v00045swe64teb98l","slug":"雪崩失效.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clhbvc46v00045swe64teb98l","category_id":"clhbvc46y000b5swec8c9avpe","_id":"clhbvc46z000i5swe28lp21rk"},{"post_id":"clhasln9h0003mkweeap8a1ci","category_id":"clhbvc46w00055swe2igy3696","_id":"clhbvc46z000m5sweghiw33au"},{"post_id":"clhasln9b0001mkwegm5jb6zz","category_id":"clhbvo2qh000r5swe8h826yri","_id":"clhbvo2qj000s5swe3wc9aixx"},{"post_id":"clhbvc46p00015swebt8903lv","category_id":"clhbvo2qh000r5swe8h826yri","_id":"clhbvod3h000t5swe2oypc098"},{"post_id":"clhasln9o0005mkwedbvy12jt","category_id":"clhbvc46w00055swe2igy3696","_id":"clhbvp9ks000u5swe59lxgaqn"}],"PostTag":[{"post_id":"clhasln9b0001mkwegm5jb6zz","tag_id":"clhbvc46s00035swe4zm7dcfg","_id":"clhbvc46w00075swe7d5sh5k3"},{"post_id":"clhbvc46p00015swebt8903lv","tag_id":"clhbvc46w00065swe0kyp2h2c","_id":"clhbvc46x000a5swe4resck5j"},{"post_id":"clhasln9h0003mkweeap8a1ci","tag_id":"clhbvc46x00095sweajf9grv3","_id":"clhbvc46y000d5swehlrsc586"},{"post_id":"clhbvc46v00045swe64teb98l","tag_id":"clhbvc46y000c5swe86n9fql9","_id":"clhbvc46z000j5swe2inqhxl3"},{"post_id":"clhbvc46v00045swe64teb98l","tag_id":"clhbvc46z000g5swe6ykf3vhs","_id":"clhbvc46z000l5swegs51h50n"}],"Tag":[{"name":"诗词歌赋","_id":"clhbvc46s00035swe4zm7dcfg"},{"name":"programing","_id":"clhbvc46w00065swe0kyp2h2c"},{"name":"hello,world","_id":"clhbvc46x00095sweajf9grv3"},{"name":"redis","_id":"clhbvc46y000c5swe86n9fql9"},{"name":"解决方案","_id":"clhbvc46z000g5swe6ykf3vhs"}]}}